{
  "components": {
    "parameters": {
      "account_access_status": {
        "explode": false,
        "in": "query",
        "name": "access_status",
        "schema": {
          "items": {
            "$ref": "#/components/schemas/account_access_status"
          },
          "type": "array"
        },
        "style": "form"
      },
      "account_id": {
        "description": "uuid representing an account",
        "in": "query",
        "name": "account_id",
        "schema": {
          "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "format": "uuid",
          "type": "string"
        }
      },
      "account_id1": {
        "description": "The account's unique identifier provided by Synctera",
        "in": "query",
        "name": "account_id",
        "required": true,
        "schema": {
          "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "format": "uuid",
          "type": "string"
        }
      },
      "account_id2": {
        "description": "Account ID",
        "explode": false,
        "in": "query",
        "name": "account_id",
        "schema": {
          "items": {
            "format": "uuid",
            "type": "string"
          },
          "type": "array"
        }
      },
      "account_id_path": {
        "description": "Unique identifier for the account.",
        "in": "path",
        "name": "account_id",
        "required": true,
        "schema": {
          "example": "57826c51-e4ff-4e57-9558-08cab6b963c7",
          "format": "uuid",
          "type": "string"
        }
      },
      "account_id_query": {
        "description": "Account ID(s). Multiple IDs can be provided as a comma-separated list.\n",
        "explode": false,
        "in": "query",
        "name": "id",
        "schema": {
          "example": "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157",
          "items": {
            "format": "uuid",
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "account_id_query1": {
        "description": "Originating account IDs. Multiple IDs can be provided as a comma-separated list.",
        "explode": false,
        "in": "query",
        "name": "account_id",
        "schema": {
          "example": "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157",
          "items": {
            "format": "uuid",
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "account_id_query2": {
        "description": "return results matching this account ID",
        "in": "query",
        "name": "account_id",
        "schema": {
          "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "format": "uuid",
          "type": "string"
        }
      },
      "account_id_query_array": {
        "description": "Account ID(s). Multiple IDs can be provided as a comma-separated list.",
        "explode": false,
        "in": "query",
        "name": "account_id",
        "schema": {
          "items": {
            "$ref": "#/components/schemas/account_id"
          },
          "type": "array"
        },
        "style": "form"
      },
      "account_ids_in_query": {
        "description": "A list of account ids to filter on.",
        "explode": false,
        "in": "query",
        "name": "account_id",
        "schema": {
          "example": "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157",
          "items": {
            "format": "uuid",
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "account_no": {
        "description": "Account number",
        "in": "query",
        "name": "account_no",
        "schema": {
          "type": "string"
        }
      },
      "account_number": {
        "description": "Account number(s). Multiple account numbers can be provided as a comma-separated list.\nWhen only a single account number is provided, any * characters in the string are wildcards, and match any characters.\n",
        "explode": false,
        "in": "query",
        "name": "account_number",
        "schema": {
          "example": "2345678108180014864",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "account_sort_by_query": {
        "description": "Specifies the sort order for the returned accounts.\n",
        "explode": false,
        "in": "query",
        "name": "sort_by",
        "schema": {
          "items": {
            "enum": [
              "account_number:asc",
              "account_number:desc",
              "account_type:asc",
              "account_type:desc",
              "first_name:asc",
              "first_name:desc",
              "last_name:asc",
              "last_name:desc"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "account_status": {
        "explode": false,
        "in": "query",
        "name": "status",
        "schema": {
          "items": {
            "$ref": "#/components/schemas/account_status"
          },
          "type": "array"
        },
        "style": "form"
      },
      "account_type_query": {
        "description": "The type of the account\n",
        "in": "query",
        "name": "account_type",
        "schema": {
          "$ref": "#/components/schemas/account_type"
        }
      },
      "acknowledging_person_id": {
        "description": "Return only disclosures that have the specified acknowledging_person_id. Multiple IDs can be provided as a comma-separated list.\n",
        "explode": false,
        "in": "query",
        "name": "acknowledging_person_id",
        "schema": {
          "example": "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157",
          "items": {
            "format": "uuid",
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "address_id": {
        "description": "ID of the address",
        "in": "path",
        "name": "address_id",
        "required": true,
        "schema": {
          "example": "1a582c51-e4ff-4e57-9558-08cab6b963aa",
          "format": "uuid",
          "type": "string"
        }
      },
      "address_type": {
        "description": "Specifies the address type.\n",
        "explode": false,
        "in": "query",
        "name": "address_type",
        "schema": {
          "items": {
            "enum": [
              "BILLING",
              "LEGAL",
              "OPERATING",
              "OTHER",
              "SHIPPING"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "alert_id": {
        "description": "Unique identifier for this watchlist alert.",
        "in": "path",
        "name": "alert_id",
        "required": true,
        "schema": {
          "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "format": "uuid",
          "type": "string"
        }
      },
      "amount": {
        "description": "Only return transactions equal to the given amount (in minor currency units, e.g., cents).",
        "in": "query",
        "name": "amount",
        "schema": {
          "example": 1000,
          "format": "int64",
          "minimum": 0,
          "type": "integer"
        }
      },
      "amount_limit_gte_query": {
        "description": "return results with an amount limit greater than or equal to this",
        "in": "query",
        "name": "amount_limit_gte",
        "schema": {
          "minimum": 0,
          "type": "integer"
        }
      },
      "amount_limit_lte_query": {
        "description": "return results with an amount limit less than or equal to this",
        "in": "query",
        "name": "amount_limit_lte",
        "schema": {
          "minimum": 0,
          "type": "integer"
        }
      },
      "amount_limit_query": {
        "description": "return results matching this amount limit",
        "in": "query",
        "name": "amount_limit",
        "schema": {
          "format": "int64",
          "minimum": 0,
          "type": "integer"
        }
      },
      "author_user_id_query": {
        "in": "query",
        "name": "author_user_id",
        "schema": {
          "description": "Only return notes where the author user ID matches the specified string.",
          "example": "64438afd-fa20-4010-a573-2bbdca77cdb6",
          "format": "uuid",
          "type": "string"
        }
      },
      "authorization_from_order_date_query": {
        "description": "From order date of the transfer",
        "in": "query",
        "name": "from_order_date",
        "schema": {
          "format": "date",
          "type": "string"
        }
      },
      "authorization_id_path": {
        "description": "Cashier Authorization ID",
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "authorization_id_query": {
        "description": "Cashier Authorization ID",
        "explode": false,
        "in": "query",
        "name": "id",
        "schema": {
          "items": {
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "authorization_order_date_query": {
        "description": "order date of the transfer",
        "in": "query",
        "name": "order_date",
        "schema": {
          "format": "date",
          "type": "string"
        }
      },
      "authorization_to_order_date_query": {
        "description": "To order date of the transfer",
        "in": "query",
        "name": "to_order_date",
        "schema": {
          "format": "date",
          "type": "string"
        }
      },
      "ban_status": {
        "description": "Ban status of the person. Multiple values can be provided as a comma-seperated list of the following:\n* `ALLOWED` – person is not banned or suspended\n* `SUSPENDED` - person is suspended\n* `BANNED` – person is banned\n",
        "explode": false,
        "in": "query",
        "name": "ban_status",
        "schema": {
          "items": {
            "$ref": "#/components/schemas/ban_status"
          },
          "type": "array"
        },
        "style": "form"
      },
      "barcode_query": {
        "in": "query",
        "name": "barcode",
        "schema": {
          "$ref": "#/components/schemas/barcode"
        }
      },
      "batch_id": {
        "description": "Return documents that are related to batch with the specified ID",
        "in": "query",
        "name": "batch_id",
        "schema": {
          "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
          "type": "string"
        }
      },
      "batch_ids_query": {
        "description": "Batch UUID(s). Multiple UUIDs can be provided as a comma-separated list. Cannot be used with is_batched.",
        "explode": false,
        "in": "query",
        "name": "batch_ids",
        "schema": {
          "example": "ba313a66-cbb6-4bc3-aa37-6548448ecb32,cadb3dd1-feb0-42c3-b545-afbbfa99eb7f",
          "items": {
            "format": "uuid",
            "type": "string"
          },
          "type": "array"
        }
      },
      "bin_prefix_query": {
        "in": "query",
        "name": "bin_prefix",
        "schema": {
          "$ref": "#/components/schemas/bin_prefix"
        }
      },
      "business_id": {
        "description": "The unique identifier for business",
        "in": "query",
        "name": "business_id",
        "schema": {
          "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "format": "uuid",
          "type": "string"
        }
      },
      "business_id_path": {
        "description": "Business's unique identifier.",
        "in": "path",
        "name": "business_id",
        "required": true,
        "schema": {
          "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "format": "uuid",
          "type": "string"
        }
      },
      "business_id_query": {
        "description": "Unique identifier for the business. Multiple IDs can be provided as a comma-separated list.\n",
        "explode": false,
        "in": "query",
        "name": "business_id",
        "schema": {
          "example": "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157",
          "items": {
            "format": "uuid",
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "business_id_query1": {
        "in": "query",
        "name": "business_id",
        "schema": {
          "$ref": "#/components/schemas/business_id"
        }
      },
      "business_id_query_array": {
        "description": "A list of business unique identifiers, with a comma separating any values.",
        "explode": false,
        "in": "query",
        "name": "business_id",
        "schema": {
          "items": {
            "$ref": "#/components/schemas/business_id2"
          },
          "type": "array"
        },
        "style": "form"
      },
      "business_sort_by_query": {
        "description": "Specifies the sort order for the returned businesses.\n",
        "explode": false,
        "in": "query",
        "name": "sort_by",
        "schema": {
          "items": {
            "enum": [
              "creation_time:asc",
              "creation_time:desc",
              "entity_name:asc",
              "entity_name:desc",
              "last_updated_time:asc",
              "last_updated_time:desc"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "business_status": {
        "in": "query",
        "name": "status",
        "schema": {
          "description": "Status of the business. One of the following:\n* `PROSPECT` – a potential customer, used for information-gathering and disclosures.\n* `ACTIVE` –  is an integrator defined status.  Integrators should set a business to active if they believe the person to be qualified for conducting business.  Synctera will combine this status with other statuses such a verification to determine if the business is eligible for specific actions such as initiating transactions or issuing a card.\n* `FROZEN` – business's actions are blocked for security, legal, or other reasons.\n* `SANCTION` – business is on a sanctions list and should be carefully monitored.\n* `DISSOLVED` – an inactive status indicating a business entity has filed articles of dissolution or a certificate of termination to terminate its existence.\n* `CANCELLED` – an inactive status indicating that a business entity has filed a cancellation or has failed to file its periodic report after notice of forfeiture of its rights to do business.\n* `SUSPENDED` – an inactive status indicating that the business entity has lost the right to operate in it's registered jurisdiction.\n* `MERGED` – an inactive status indicating that the business entity has terminated existence by merging into another entity.\n* `INACTIVE` – an inactive status indicating that the business entity is no longer active.\n* `CONVERTED` – An inactive status indicating that the business entity has been converted to another type of business entity in the same jurisdiction.\n",
          "enum": [
            "ACTIVE",
            "CANCELLED",
            "CONVERTED",
            "DISSOLVED",
            "FROZEN",
            "INACTIVE",
            "MERGED",
            "PROSPECT",
            "SANCTION",
            "SUSPENDED"
          ],
          "type": "string"
        }
      },
      "card_brand_query": {
        "description": "The brand of a card product",
        "in": "query",
        "name": "card_brand",
        "schema": {
          "$ref": "#/components/schemas/card_brand"
        }
      },
      "card_id": {
        "in": "path",
        "name": "card_id",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/card_id"
        }
      },
      "card_id1": {
        "description": "Card ID",
        "in": "query",
        "name": "card_id",
        "schema": {
          "example": "6dc0397d-1aba-4be9-9582-895a7a887d49",
          "format": "uuid",
          "type": "string"
        }
      },
      "card_id_query": {
        "in": "query",
        "name": "card_id",
        "schema": {
          "$ref": "#/components/schemas/card_id"
        }
      },
      "card_image_id": {
        "in": "path",
        "name": "card_image_id",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/card_image_id"
        }
      },
      "card_product_id_query": {
        "in": "query",
        "name": "card_product_id",
        "schema": {
          "$ref": "#/components/schemas/card_product_id"
        }
      },
      "card_sort_by_query": {
        "description": "Specifies the sort order for the returned cards.\n",
        "explode": false,
        "in": "query",
        "name": "sort_by",
        "schema": {
          "items": {
            "enum": [
              "account_id:asc",
              "account_id:desc",
              "card_brand:asc",
              "card_brand:desc",
              "card_product_id:asc",
              "card_product_id:desc",
              "card_status:asc",
              "card_status:desc",
              "card_type:asc",
              "card_type:desc",
              "customer_id:asc",
              "customer_id:desc",
              "expiration_date:asc",
              "expiration_date:desc",
              "form:asc",
              "form:desc",
              "last_four:asc",
              "last_four:desc"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "card_status_query": {
        "description": "The status of a card",
        "in": "query",
        "name": "card_status",
        "schema": {
          "$ref": "#/components/schemas/card_status"
        }
      },
      "card_type_query": {
        "description": "Indicates the type of card",
        "in": "query",
        "name": "card_type",
        "schema": {
          "$ref": "#/components/schemas/card_type"
        }
      },
      "cash_amount_query": {
        "description": "Amount of the transfer",
        "in": "query",
        "name": "amount",
        "schema": {
          "example": 100,
          "type": "string"
        }
      },
      "cash_authorization_account_number_query": {
        "description": "Account number of the transfer, known as \"Location ID\" in the cash order csv",
        "in": "query",
        "name": "account_number",
        "schema": {
          "type": "string"
        }
      },
      "cash_authorization_client_name_query": {
        "description": "Client name of the transfer",
        "in": "query",
        "name": "client_name",
        "schema": {
          "type": "string"
        }
      },
      "cash_bank_id_query": {
        "description": "Bank ID of the transfer",
        "in": "query",
        "name": "bank_id",
        "schema": {
          "type": "string"
        }
      },
      "cash_currency_query": {
        "description": "Currency of the transfer",
        "in": "query",
        "name": "currency",
        "schema": {
          "example": "CAD",
          "type": "string"
        }
      },
      "cash_customer_id_query": {
        "description": "Customer ID of the transfer",
        "in": "query",
        "name": "customer_id",
        "schema": {
          "type": "string"
        }
      },
      "cash_dc_sign_query": {
        "description": "DC sign of the transfer",
        "in": "query",
        "name": "dc_sign",
        "schema": {
          "type": "string"
        }
      },
      "cash_destination_account_id_query": {
        "description": "Destination account ID",
        "in": "query",
        "name": "destination_account_id",
        "schema": {
          "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "type": "string"
        }
      },
      "cash_destination_account_number_query": {
        "description": "Destination account number",
        "in": "query",
        "name": "destination_account_number",
        "schema": {
          "example": "987654321",
          "type": "string"
        }
      },
      "cash_destination_account_owner_name_query": {
        "description": "Destination account owner name",
        "in": "query",
        "name": "destination_account_owner_name",
        "schema": {
          "example": "Jane Joe",
          "type": "string"
        }
      },
      "cash_effective_date_query": {
        "description": "Effective date of the transfer",
        "in": "query",
        "name": "effective_date",
        "schema": {
          "type": "string"
        }
      },
      "cash_from_effective_date_query": {
        "description": "From effective date of the transfer",
        "in": "query",
        "name": "from_effective_date",
        "schema": {
          "type": "string"
        }
      },
      "cash_from_posting_date_query": {
        "description": "From posting date of the transfer",
        "in": "query",
        "name": "from_posting_date",
        "schema": {
          "type": "string"
        }
      },
      "cash_id_path": {
        "description": "Cashier Transfer ID",
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "cash_id_query": {
        "description": "Cashier Transfer ID",
        "in": "query",
        "name": "id",
        "schema": {
          "type": "string"
        }
      },
      "cash_is_same_day_query": {
        "description": "Is same day transfer",
        "in": "query",
        "name": "is_same_day",
        "schema": {
          "type": "boolean"
        }
      },
      "cash_max_amount_query": {
        "description": "Maximum amount of the transfer",
        "in": "query",
        "name": "max_amount",
        "schema": {
          "example": 100,
          "minimum": 1,
          "type": "integer"
        }
      },
      "cash_min_amount_query": {
        "description": "Minimum amount of the transfer",
        "in": "query",
        "name": "min_amount",
        "schema": {
          "example": 100,
          "minimum": 1,
          "type": "integer"
        }
      },
      "cash_network_status_query": {
        "description": "Network status of the transfer",
        "in": "query",
        "name": "network_status",
        "schema": {
          "type": "string"
        }
      },
      "cash_originating_account_id_query": {
        "description": "Originating account ID",
        "in": "query",
        "name": "originating_account_id",
        "schema": {
          "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "type": "string"
        }
      },
      "cash_originating_account_number_query": {
        "description": "Originating account number",
        "in": "query",
        "name": "originating_account_number",
        "schema": {
          "example": "123456789",
          "type": "string"
        }
      },
      "cash_originating_account_owner_name_query": {
        "description": "Originating account owner name",
        "in": "query",
        "name": "originating_account_owner_name",
        "schema": {
          "type": "string"
        }
      },
      "cash_partner_id_query": {
        "description": "Partner ID of the transfer",
        "in": "query",
        "name": "partner_id",
        "schema": {
          "type": "string"
        }
      },
      "cash_posting_date_query": {
        "description": "Posting date of the transfer",
        "in": "query",
        "name": "posting_date",
        "schema": {
          "type": "string"
        }
      },
      "cash_reference_id_query": {
        "description": "Reference ID of the transfer",
        "in": "query",
        "name": "reference_id",
        "schema": {
          "type": "string"
        }
      },
      "cash_status_query": {
        "description": "Status of the transfer",
        "in": "query",
        "name": "status",
        "schema": {
          "type": "string"
        }
      },
      "cash_subtype_query": {
        "description": "Subtype of the transfer",
        "in": "query",
        "name": "subtype",
        "schema": {
          "type": "string"
        }
      },
      "cash_to_effective_date_query": {
        "description": "To effective date of the transfer",
        "in": "query",
        "name": "to_effective_date",
        "schema": {
          "type": "string"
        }
      },
      "cash_to_posting_date_query": {
        "description": "To posting date of the transfer",
        "in": "query",
        "name": "to_posting_date",
        "schema": {
          "type": "string"
        }
      },
      "cashback": {
        "description": "If true, only transactions with cashback will be returned. If false, only transactions without cashback will be returned. If not provided, all transactions will be returned.",
        "in": "query",
        "name": "cashback",
        "schema": {
          "type": "boolean"
        }
      },
      "classifications": {
        "description": "Specifies the classification of a party for banks. It can contain multiple values.",
        "example": "BANK_CUSTOMER,AUTHORIZED_USER,PROSPECT",
        "explode": false,
        "in": "query",
        "name": "classifications",
        "schema": {
          "$ref": "#/components/schemas/classifications"
        },
        "style": "form"
      },
      "country": {
        "description": "Country code.\n",
        "in": "query",
        "name": "country",
        "schema": {
          "description": "ISO 3166-1 Alpha-2 or Alpha-3 country code.",
          "example": "U",
          "pattern": "^[A-Z]{2,3}$",
          "type": "string"
        }
      },
      "country_codes": {
        "description": "The countries of operation of the financial institutions",
        "explode": false,
        "in": "query",
        "name": "country_codes",
        "required": true,
        "schema": {
          "items": {
            "enum": [
              "CA",
              "US"
            ],
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        }
      },
      "customer_id": {
        "description": "The unique identifier for customer",
        "in": "query",
        "name": "customer_id",
        "schema": {
          "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "format": "uuid",
          "type": "string"
        }
      },
      "customer_id1": {
        "description": "The unique identifier of a customer.",
        "in": "query",
        "name": "customer_id",
        "schema": {
          "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
          "format": "uuid",
          "type": "string"
        }
      },
      "customer_id_path": {
        "description": "The customer's unique identifier",
        "in": "path",
        "name": "customer_id",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/customer_id"
        }
      },
      "customer_id_query": {
        "in": "query",
        "name": "customer_id",
        "schema": {
          "$ref": "#/components/schemas/customer_id1"
        }
      },
      "customer_id_query1": {
        "description": "The IDs of customers who created the payment schedules. Multiple IDs can be provided as a comma-separated list.",
        "explode": false,
        "in": "query",
        "name": "customer_id",
        "schema": {
          "example": "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157",
          "items": {
            "format": "uuid",
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "customer_id_query_array": {
        "description": "A list of customer unique identifiers, with a comma separating any values.",
        "explode": false,
        "in": "query",
        "name": "customer_id",
        "schema": {
          "items": {
            "$ref": "#/components/schemas/customer_id"
          },
          "type": "array"
        },
        "style": "form"
      },
      "customer_id_query_one": {
        "deprecated": true,
        "description": "The customer's unique identifier",
        "in": "query",
        "name": "customer_id",
        "schema": {
          "$ref": "#/components/schemas/customer_id"
        }
      },
      "customer_id_query_required": {
        "in": "query",
        "name": "customer_id",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/customer_id1"
        }
      },
      "customer_sort_by_query": {
        "description": "Specifies the sort order for the returned customers.\n",
        "explode": false,
        "in": "query",
        "name": "sort_by",
        "schema": {
          "items": {
            "enum": [
              "creation_time:asc",
              "creation_time:desc",
              "first_name:asc",
              "first_name:desc",
              "last_name:asc",
              "last_name:desc",
              "last_updated_time:asc",
              "last_updated_time:desc"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "customer_status": {
        "in": "query",
        "name": "status",
        "schema": {
          "description": "Only return resources where with the specified status.",
          "enum": [
            "ACTIVE",
            "DECEASED",
            "DENIED",
            "DORMANT",
            "ESCHEAT",
            "FROZEN",
            "INACTIVE",
            "PROSPECT",
            "SANCTION"
          ],
          "example": "ACTIVE",
          "type": "string"
        }
      },
      "customer_type": {
        "description": "Customer type of the account, BUSINESS or PERSONAL\n",
        "in": "query",
        "name": "customer_type",
        "schema": {
          "$ref": "#/components/schemas/customer_type"
        }
      },
      "dc_sign_query": {
        "description": "Debit/Credit sign",
        "in": "query",
        "name": "dc_sign",
        "schema": {
          "enum": [
            "credit",
            "debit"
          ],
          "type": "string"
        }
      },
      "deposit_id_path": {
        "description": "ID of a deposit for a remote deposit capture",
        "in": "path",
        "name": "deposit_id",
        "required": true,
        "schema": {
          "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
          "format": "uuid",
          "type": "string"
        }
      },
      "digital_wallet_token_id": {
        "in": "path",
        "name": "digital_wallet_token_id",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/digital_wallet_token_id"
        }
      },
      "digital_wallet_token_state_query": {
        "description": "The status of the Digital Wallet Token",
        "in": "query",
        "name": "token_state",
        "schema": {
          "$ref": "#/components/schemas/digital_wallet_token_state"
        }
      },
      "disclosure_id": {
        "description": "The unique identifier for the disclosure.",
        "in": "path",
        "name": "disclosure_id",
        "required": true,
        "schema": {
          "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "format": "uuid",
          "type": "string"
        }
      },
      "dob": {
        "in": "query",
        "name": "dob",
        "schema": {
          "description": "Only return resources where the date of birth matches the specified value.",
          "example": "1980-12-25",
          "format": "date",
          "type": "string"
        }
      },
      "document_id": {
        "description": "The unique identifier of the document.",
        "in": "path",
        "name": "document_id",
        "required": true,
        "schema": {
          "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
          "format": "uuid",
          "type": "string"
        }
      },
      "document_version": {
        "description": "The document version.",
        "in": "path",
        "name": "document_version",
        "required": true,
        "schema": {
          "example": 1,
          "type": "integer"
        }
      },
      "edd_id": {
        "description": "The unique identifier of a edd",
        "in": "path",
        "name": "edd_id",
        "required": true,
        "schema": {
          "example": "faker.random.uuid",
          "format": "uuid",
          "type": "string"
        }
      },
      "effective_date": {
        "description": "Effective date of the transaction",
        "in": "query",
        "name": "effective_date",
        "schema": {
          "example": "2022-03-15",
          "format": "date",
          "type": "string"
        }
      },
      "eft_ca_amount_query": {
        "description": "Amount of the transfer",
        "in": "query",
        "name": "amount",
        "schema": {
          "example": 100,
          "type": "string"
        }
      },
      "eft_ca_bank_id_query": {
        "description": "Bank ID of the transfer",
        "in": "query",
        "name": "bank_id",
        "schema": {
          "type": "string"
        }
      },
      "eft_ca_currency_query": {
        "description": "Currency of the transfer",
        "in": "query",
        "name": "currency",
        "schema": {
          "example": "CAD",
          "type": "string"
        }
      },
      "eft_ca_customer_id_query": {
        "description": "Customer ID of the transfer",
        "in": "query",
        "name": "customer_id",
        "schema": {
          "type": "string"
        }
      },
      "eft_ca_dc_sign_query": {
        "description": "DC sign of the transfer",
        "in": "query",
        "name": "dc_sign",
        "schema": {
          "type": "string"
        }
      },
      "eft_ca_destination_account_id_query": {
        "description": "Destination account ID",
        "in": "query",
        "name": "destination_account_id",
        "schema": {
          "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "type": "string"
        }
      },
      "eft_ca_destination_account_number_query": {
        "description": "Destination account number",
        "in": "query",
        "name": "destination_account_number",
        "schema": {
          "example": "987654321",
          "type": "string"
        }
      },
      "eft_ca_destination_account_owner_name_query": {
        "description": "Destination account owner name",
        "in": "query",
        "name": "destination_account_owner_name",
        "schema": {
          "example": "Jane Joe",
          "type": "string"
        }
      },
      "eft_ca_effective_date_query": {
        "description": "Effective date of the transfer",
        "in": "query",
        "name": "effective_date",
        "schema": {
          "type": "string"
        }
      },
      "eft_ca_from_effective_date_query": {
        "description": "From effective date of the transfer",
        "in": "query",
        "name": "from_effective_date",
        "schema": {
          "type": "string"
        }
      },
      "eft_ca_from_posting_date_query": {
        "description": "From posting date of the transfer",
        "in": "query",
        "name": "from_posting_date",
        "schema": {
          "type": "string"
        }
      },
      "eft_ca_id_path": {
        "description": "EFT Canada Transfer ID",
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "eft_ca_id_query": {
        "description": "EFT Canada Transfer ID",
        "in": "query",
        "name": "id",
        "schema": {
          "type": "string"
        }
      },
      "eft_ca_is_same_day_query": {
        "description": "Is same day transfer",
        "in": "query",
        "name": "is_same_day",
        "schema": {
          "type": "boolean"
        }
      },
      "eft_ca_max_amount_query": {
        "description": "Maximum amount of the transfer",
        "in": "query",
        "name": "max_amount",
        "schema": {
          "example": 100,
          "minimum": 1,
          "type": "integer"
        }
      },
      "eft_ca_min_amount_query": {
        "description": "Minimum amount of the transfer",
        "in": "query",
        "name": "min_amount",
        "schema": {
          "example": 100,
          "minimum": 1,
          "type": "integer"
        }
      },
      "eft_ca_network_status_query": {
        "description": "Network status of the transfer",
        "in": "query",
        "name": "network_status",
        "schema": {
          "type": "string"
        }
      },
      "eft_ca_originating_account_id_query": {
        "description": "Originating account ID",
        "in": "query",
        "name": "originating_account_id",
        "schema": {
          "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "type": "string"
        }
      },
      "eft_ca_originating_account_number_query": {
        "description": "Originating account number",
        "in": "query",
        "name": "originating_account_number",
        "schema": {
          "example": "123456789",
          "type": "string"
        }
      },
      "eft_ca_originating_account_owner_name_query": {
        "description": "Originating account owner name",
        "in": "query",
        "name": "originating_account_owner_name",
        "schema": {
          "type": "string"
        }
      },
      "eft_ca_partner_id_query": {
        "description": "Partner ID of the transfer",
        "in": "query",
        "name": "partner_id",
        "schema": {
          "type": "string"
        }
      },
      "eft_ca_posting_date_query": {
        "description": "Posting date of the transfer",
        "in": "query",
        "name": "posting_date",
        "schema": {
          "type": "string"
        }
      },
      "eft_ca_reference_id_query": {
        "description": "Reference ID of the transfer",
        "in": "query",
        "name": "reference_id",
        "schema": {
          "type": "string"
        }
      },
      "eft_ca_status_query": {
        "description": "Status of the transfer",
        "in": "query",
        "name": "status",
        "schema": {
          "type": "string"
        }
      },
      "eft_ca_subtype_query": {
        "description": "Subtype of the transfer",
        "in": "query",
        "name": "subtype",
        "schema": {
          "type": "string"
        }
      },
      "eft_ca_to_effective_date_query": {
        "description": "To effective date of the transfer",
        "in": "query",
        "name": "to_effective_date",
        "schema": {
          "type": "string"
        }
      },
      "eft_ca_to_posting_date_query": {
        "description": "To posting date of the transfer",
        "in": "query",
        "name": "to_posting_date",
        "schema": {
          "type": "string"
        }
      },
      "email": {
        "in": "query",
        "name": "email",
        "schema": {
          "description": "Only return resources where the email field matches the specified string. Any * characters in the string are wildcards, and match any characters.",
          "example": "john.doe@example.com",
          "type": "string"
        }
      },
      "emboss_name_query": {
        "description": "emboss name",
        "in": "query",
        "name": "emboss_name",
        "schema": {
          "type": "string"
        }
      },
      "enabled_query": {
        "in": "query",
        "name": "enabled",
        "schema": {
          "example": true,
          "type": "boolean"
        }
      },
      "encryption": {
        "description": "Whether the file should be encrypted and access restricted, e.g. if the file contains PII",
        "in": "query",
        "name": "encryption",
        "schema": {
          "enum": [
            "NOT_REQUIRED",
            "REQUIRED"
          ],
          "type": "string"
        }
      },
      "end_effective_date": {
        "description": "End of the effective date range query",
        "in": "query",
        "name": "end_effective_date",
        "schema": {
          "example": "2022-03-25",
          "format": "date",
          "type": "string"
        }
      },
      "entity_name": {
        "in": "query",
        "name": "entity_name",
        "schema": {
          "description": "Only return resources where the `entity_name` field matches the specified string. Any `*` characters in the string are wildcards, and match any characters.",
          "example": "Apex Corporation",
          "type": "string"
        }
      },
      "exclude_jit_transactions": {
        "description": "Hide \"JIT funding\" transactions from results",
        "in": "query",
        "name": "exclude_jit_transactions",
        "schema": {
          "type": "boolean"
        }
      },
      "expiration_date_query": {
        "description": "The date representing when the card would expire at",
        "in": "query",
        "name": "expiration_date",
        "schema": {
          "example": "2006-01-02",
          "format": "date",
          "type": "string"
        }
      },
      "external_account_id": {
        "description": "External Account ID",
        "in": "path",
        "name": "external_account_id",
        "required": true,
        "schema": {
          "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "format": "uuid",
          "type": "string"
        }
      },
      "external_account_id_query": {
        "description": "External account ID(s). Multiple IDs can be provided as a comma-separated list.\n",
        "explode": false,
        "in": "query",
        "name": "id",
        "schema": {
          "example": "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157",
          "items": {
            "format": "uuid",
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "external_card_id": {
        "description": "The unique identifier of an external card",
        "in": "path",
        "name": "external_card_id",
        "required": true,
        "schema": {
          "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "format": "uuid",
          "type": "string"
        }
      },
      "external_card_status_query": {
        "in": "query",
        "name": "status",
        "schema": {
          "$ref": "#/components/schemas/external_card_status"
        }
      },
      "first_chosen_name": {
        "in": "query",
        "name": "first_name",
        "schema": {
          "description": "Only return resources where the first_name or chosen_name field matches the specified string. Any * characters in the string are wildcards, and match any characters.",
          "example": "Alice",
          "type": "string"
        }
      },
      "force_vendor_refresh": {
        "description": "Force a vendor refresh of the external account.\n",
        "in": "query",
        "name": "force_vendor_refresh",
        "schema": {
          "type": "boolean"
        }
      },
      "form_query": {
        "description": "The format of the card",
        "in": "query",
        "name": "form",
        "schema": {
          "$ref": "#/components/schemas/form"
        }
      },
      "from_business_id_query": {
        "description": "Unique identifier for the business. Multiple IDs can be provided as a comma-separated list.\n",
        "explode": false,
        "in": "query",
        "name": "from_business_id",
        "schema": {
          "example": "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157",
          "items": {
            "format": "uuid",
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "from_date": {
        "description": "Only display transactions with a posting date greater than from_date",
        "in": "query",
        "name": "from_date",
        "schema": {
          "format": "date",
          "type": "string"
        }
      },
      "from_date1": {
        "description": "Only display transactions with an effective date greater than from_date",
        "in": "query",
        "name": "from_date",
        "schema": {
          "format": "date",
          "type": "string"
        }
      },
      "from_person_id_query": {
        "description": "Unique identifier for the person. Multiple IDs can be provided as a comma-separated list.\n",
        "explode": false,
        "in": "query",
        "name": "from_person_id",
        "schema": {
          "example": "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157",
          "items": {
            "format": "uuid",
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "gateway_id": {
        "in": "path",
        "name": "gateway_id",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/gateway_id"
        }
      },
      "general_ledger_type_query": {
        "description": "The type of the general ledger account\n",
        "in": "query",
        "name": "general_ledger_type",
        "schema": {
          "$ref": "#/components/schemas/general_ledger_type"
        }
      },
      "has_accounts_query": {
        "description": "Filter on resources that have an account(s)\n",
        "in": "query",
        "name": "has_accounts",
        "schema": {
          "type": "boolean"
        }
      },
      "id": {
        "description": "Unique resource identifier",
        "explode": false,
        "in": "query",
        "name": "id",
        "schema": {
          "items": {
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "id1": {
        "description": "Transaction ID",
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "example": "472341e0-ea3e-41a1-96bc-fd0185e1eac8",
          "format": "uuid",
          "type": "string"
        }
      },
      "id_path": {
        "description": "The unique resource identifier",
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "format": "uuid",
          "type": "string"
        }
      },
      "id_query": {
        "description": "IDs. Multiple IDs can be provided as a comma-separated list.",
        "explode": false,
        "in": "query",
        "name": "id",
        "schema": {
          "example": "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157",
          "items": {
            "format": "uuid",
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "id_query1": {
        "description": "return results with these comma-separated IDs",
        "explode": false,
        "in": "query",
        "name": "id",
        "schema": {
          "example": "c833e6c6-5c15-4719-90e9-7a6682c483d3,ef17356c-69b0-446e-ae2f-72ab59eeb544",
          "items": {
            "format": "uuid",
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "idempotency_key": {
        "description": "An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.",
        "in": "header",
        "name": "Idempotency-Key",
        "schema": {
          "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "type": "string"
        }
      },
      "idempotency_key_query": {
        "description": "Transaction Idempotency Key(s). Multiple keys can be provided as a comma-separated list.",
        "explode": false,
        "in": "query",
        "name": "idempotency_key",
        "schema": {
          "example": "ba313a66-cbb6-4bc3-aa37-6548448ecb32,cadb3dd1-feb0-42c3-b545-afbbfa99eb7f",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "imad": {
        "in": "query",
        "name": "imad",
        "schema": {
          "description": "Optional query parameter to filter incoming wires by IMAD (Input Message Accountability Data)",
          "example": "20250715B6B7HU2R012486",
          "type": "string"
        }
      },
      "include_child_transactions": {
        "description": "Include transactions from sub-accounts when listing transactions for a given account",
        "in": "query",
        "name": "include_child_transactions",
        "schema": {
          "type": "boolean"
        }
      },
      "include_console_users": {
        "description": "includes the person representations of available console users in the person get respsonse.\n",
        "in": "query",
        "name": "include_console_users",
        "schema": {
          "type": "boolean"
        }
      },
      "include_history": {
        "description": "If true, include old (inactive) records as well.",
        "in": "query",
        "name": "include_history",
        "schema": {
          "default": false,
          "type": "boolean"
        }
      },
      "incoming_ach_id": {
        "description": "ID of the linked incoming ACH entry. This is filled only for outgoing ACH entries that are returns and links to the originally received incoming entry.",
        "in": "query",
        "name": "incoming_ach_id",
        "schema": {
          "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
          "format": "uuid",
          "type": "string"
        }
      },
      "interest_product_id_query": {
        "description": "Interest product ID that accounts associate with. Multiple IDs can be provided as a comma-separated list.",
        "in": "query",
        "name": "interest_product_id",
        "schema": {
          "type": "string"
        }
      },
      "internal_account_id_path": {
        "description": "Unique identifier for the internal account.",
        "in": "path",
        "name": "internal_account_id",
        "required": true,
        "schema": {
          "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "format": "uuid",
          "type": "string"
        }
      },
      "internal_account_id_query": {
        "description": "Internal account ID(s). Multiple IDs can be provided as a comma-separated list.\n",
        "explode": false,
        "in": "query",
        "name": "id",
        "schema": {
          "example": "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157",
          "items": {
            "format": "uuid",
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "is_active": {
        "in": "query",
        "name": "is_active",
        "schema": {
          "description": "Whether the address is active or not",
          "type": "boolean"
        }
      },
      "is_active_query": {
        "description": "return results that match this active status",
        "in": "query",
        "name": "is_active",
        "schema": {
          "type": "boolean"
        }
      },
      "is_batched_query": {
        "description": "If true, only display transactions that are part of a batch payment. Cannot be used with batch_ids.",
        "in": "query",
        "name": "is_batched",
        "schema": {
          "type": "boolean"
        }
      },
      "is_customer": {
        "description": "If true, show only customers. If false, show non-customer parties.",
        "in": "query",
        "name": "is_customer",
        "schema": {
          "type": "boolean"
        }
      },
      "is_registered_agent": {
        "in": "query",
        "name": "is_registered_agent",
        "schema": {
          "description": "Whether the address uses a registered agent or not",
          "type": "boolean"
        }
      },
      "last_four_query": {
        "description": "The last 4 digits of the card PAN",
        "in": "query",
        "name": "last_four",
        "schema": {
          "example": "1234",
          "pattern": "^\\d{4}$",
          "type": "string"
        }
      },
      "last_name": {
        "in": "query",
        "name": "last_name",
        "schema": {
          "description": "Only return resources where the last_name field matches the specified string. Any * characters in the string are wildcards, and match any characters.",
          "example": "Smith",
          "type": "string"
        }
      },
      "license_id": {
        "description": "License record identifier",
        "in": "path",
        "name": "license_id",
        "required": true,
        "schema": {
          "example": "ba4f84d7-fa20-4010-a573-0bbca57ab589",
          "format": "uuid",
          "type": "string"
        }
      },
      "limit": {
        "in": "query",
        "name": "limit",
        "schema": {
          "default": 100,
          "description": "Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.\n",
          "example": 100,
          "minimum": 1,
          "type": "integer"
        }
      },
      "linked_account_id_query": {
        "description": "Return only resources that are linked to the specified backing account in balance_floor or balance_ceiling. Multiple IDs can be provided as a comma-separated list.\n",
        "explode": false,
        "in": "query",
        "name": "linked_account_id",
        "schema": {
          "example": "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157",
          "items": {
            "format": "uuid",
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "max_age": {
        "description": "Optional relative age of a balance in seconds. If the balance is older than the requested seconds it will fail. This field is optional for most financial institutions, but required for some, so you should probably send it.\n",
        "in": "query",
        "name": "max_age",
        "schema": {
          "example": 600,
          "format": "int64",
          "minimum": 0,
          "type": "integer"
        }
      },
      "merchant_guid": {
        "description": "The unique id for a `merchant`.",
        "example": "MCH-7ed79542-884d-2b1b-dd74-501c5cc9d25b",
        "in": "path",
        "name": "merchant_guid",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "monitoring_alert_id": {
        "description": "Unique identifier for this monitoring alert.",
        "in": "path",
        "name": "alert_id",
        "required": true,
        "schema": {
          "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "format": "uuid",
          "type": "string"
        }
      },
      "monitoring_subscription_id": {
        "description": "Unique identifier for monitoring subscription.",
        "in": "path",
        "name": "subscription_id",
        "required": true,
        "schema": {
          "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "format": "uuid",
          "type": "string"
        }
      },
      "name_query": {
        "description": "return results that match this name",
        "in": "query",
        "name": "name",
        "schema": {
          "type": "string"
        }
      },
      "nickname": {
        "description": "A user-meaningful name for the account.\n",
        "in": "query",
        "name": "nickname",
        "schema": {
          "type": "string"
        }
      },
      "nickname_query": {
        "description": "Nickname of the account\n",
        "in": "query",
        "name": "nickname",
        "schema": {
          "type": "string"
        }
      },
      "note_id_path": {
        "description": "The unique identifier of a note",
        "in": "path",
        "name": "note_id",
        "required": true,
        "schema": {
          "example": "64438afd-fa20-4010-a573-2bbdca77cdb6",
          "format": "uuid",
          "type": "string"
        }
      },
      "note_id_query": {
        "description": "Return the note with the specified id. Multiple IDs can be provided as a comma-separated list.\n",
        "explode": false,
        "in": "query",
        "name": "id",
        "schema": {
          "example": "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157",
          "items": {
            "format": "uuid",
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "num_related_accounts_gte_query": {
        "description": "return results that are associated with at least this many accounts",
        "in": "query",
        "name": "num_related_accounts_gte",
        "schema": {
          "minimum": 0,
          "type": "integer"
        }
      },
      "num_related_accounts_lte_query": {
        "description": "return results that are associated with at most this many accounts",
        "in": "query",
        "name": "num_related_accounts_lte",
        "schema": {
          "minimum": 0,
          "type": "integer"
        }
      },
      "num_related_accounts_query": {
        "description": "return results that are associated with this many accounts",
        "in": "query",
        "name": "num_related_accounts",
        "schema": {
          "minimum": 0,
          "type": "integer"
        }
      },
      "omad": {
        "in": "query",
        "name": "omad",
        "schema": {
          "description": "Optional query parameter to filter incoming wires by OMAD (Output Message Accountability Data)",
          "example": "20250715MMQFMP2300021707151048FT03",
          "type": "string"
        }
      },
      "originating_account_id": {
        "description": "The unique identifier of the originating account.",
        "in": "query",
        "name": "originating_account_id",
        "schema": {
          "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
          "format": "uuid",
          "type": "string"
        }
      },
      "originator_names_in_query": {
        "description": "A list of originator names to filter on when listing stop payments.",
        "explode": false,
        "in": "query",
        "name": "originator_name",
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "overdraft_account_id_query": {
        "deprecated": true,
        "description": "Overdraft account ID(s). Multiple IDs can be provided as a comma-separated list.\nThis parameter is deprecated and will be removed in a future API version. Use linked_account_id instead.\n",
        "explode": false,
        "in": "query",
        "name": "overdraft_account_id",
        "schema": {
          "example": "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157",
          "items": {
            "format": "uuid",
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "overflow_account_id_query": {
        "deprecated": true,
        "description": "Overflow account ID(s). Multiple IDs can be provided as a comma-separated list.\nThis parameter is deprecated and will be removed in a future API version. Use linked_account_id instead.\n",
        "explode": false,
        "in": "query",
        "name": "overflow_account_id",
        "schema": {
          "example": "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157",
          "items": {
            "format": "uuid",
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "page_token": {
        "in": "query",
        "name": "page_token",
        "schema": {
          "description": "Optional pagination token to be provided to retrieve subsequent pages, returned from previous get",
          "example": "a8937a0d",
          "type": "string"
        }
      },
      "payment_schedule_id_query": {
        "description": "Payment schedule IDs. Multiple IDs can be provided as a comma-separated list.",
        "explode": false,
        "in": "query",
        "name": "schedule_id",
        "schema": {
          "example": "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157",
          "items": {
            "format": "uuid",
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "payment_type_query": {
        "in": "query",
        "name": "payment_type",
        "schema": {
          "$ref": "#/components/schemas/payment_type"
        }
      },
      "person_id_path": {
        "description": "Person's unique identifier.",
        "in": "path",
        "name": "person_id",
        "required": true,
        "schema": {
          "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "format": "uuid",
          "type": "string"
        }
      },
      "person_id_query": {
        "description": "Unique identifier for the person. Multiple IDs can be provided as a comma-separated list.\n",
        "explode": false,
        "in": "query",
        "name": "person_id",
        "schema": {
          "example": "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157",
          "items": {
            "format": "uuid",
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "person_sort_by_query": {
        "description": "Specifies the sort order for the returned persons.\n",
        "explode": false,
        "in": "query",
        "name": "sort_by",
        "schema": {
          "items": {
            "enum": [
              "creation_time:asc",
              "creation_time:desc",
              "dob:asc",
              "dob:desc",
              "first_name:asc",
              "first_name:desc",
              "last_name:asc",
              "last_name:desc",
              "last_updated_time:asc",
              "last_updated_time:desc"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "person_status": {
        "in": "query",
        "name": "status",
        "schema": {
          "$ref": "#/components/schemas/person_status"
        }
      },
      "personal_id_id_path": {
        "description": "UUID for a personal identifier.",
        "in": "path",
        "name": "personal_id_id",
        "required": true,
        "schema": {
          "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "format": "uuid",
          "type": "string"
        }
      },
      "phone_number": {
        "in": "query",
        "name": "phone_number",
        "schema": {
          "description": "Only return resources where the phone_number field matches the specified string. Phone numbers use the E.164 format e.g. +19178675309. Any * characters in the string are wildcards, and match any characters.",
          "example": "+12065550100",
          "type": "string"
        }
      },
      "postal_code_query": {
        "description": "The postal code of a card user",
        "in": "query",
        "name": "postal_code",
        "schema": {
          "example": "49633",
          "type": "string"
        }
      },
      "product_id": {
        "description": "Account Product ID",
        "in": "path",
        "name": "product_id",
        "required": true,
        "schema": {
          "example": "92113c51-e4ff-4e57-9558-08cab6b963dd",
          "format": "uuid",
          "type": "string"
        }
      },
      "receiving_account_id": {
        "description": "The unique identifier of the receiving account.",
        "in": "query",
        "name": "receiving_account_id",
        "schema": {
          "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
          "format": "uuid",
          "type": "string"
        }
      },
      "reference_id": {
        "description": "Reference ID",
        "in": "query",
        "name": "reference_id",
        "schema": {
          "type": "string"
        }
      },
      "related_resource_id": {
        "description": "Return documents that are related to resources with the specified ID",
        "in": "query",
        "name": "related_resource_id",
        "schema": {
          "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
          "format": "uuid",
          "type": "string"
        }
      },
      "related_resource_id_query": {
        "description": "Unique identifier for the related resource. Multiple IDs can be provided as a comma-separated list.\n",
        "explode": false,
        "in": "query",
        "name": "related_resource_id",
        "schema": {
          "example": "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157",
          "items": {
            "format": "uuid",
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "related_resource_id_query1": {
        "description": "Only return notes that have a related resource with the specified ID.",
        "explode": false,
        "in": "query",
        "name": "related_resource_id",
        "schema": {
          "example": "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "related_resource_type": {
        "description": "Return documents that are related to resources of the specified type",
        "in": "query",
        "name": "related_resource_type",
        "schema": {
          "$ref": "#/components/schemas/related_resource_type"
        }
      },
      "related_resource_type_query": {
        "description": "Type of related resource. Multiple values can be provided as a comma-separated list.\n",
        "explode": false,
        "in": "query",
        "name": "related_resource_type",
        "required": true,
        "schema": {
          "items": {
            "$ref": "#/components/schemas/related_resource_type1"
          },
          "type": "array"
        },
        "style": "form"
      },
      "related_resource_type_query1": {
        "description": "Only return notes that have a related resource with the specified type.",
        "in": "query",
        "name": "related_resource_type",
        "schema": {
          "$ref": "#/components/schemas/related_resource_type2"
        }
      },
      "relationship_id": {
        "description": "Relationship ID of the account associate with the account entity",
        "in": "path",
        "name": "relationship_id",
        "required": true,
        "schema": {
          "example": "1a582c51-e4ff-4e57-9558-08cab6b963aa",
          "format": "uuid",
          "type": "string"
        }
      },
      "relationship_type": {
        "description": "The relationship type, any of the following.  All direct businesses customers need at least one beneficial owner or controlling person.\n* `BENEFICIAL_OWNER_OF` – a person who directly or indirectly owns a portion of the business.\n* `MANAGING_PERSON_OF` – a person who is an officer, director, or controlling person of an organization.\n* `OWNER_OF` – a business with ownership of another business.\n",
        "explode": false,
        "in": "query",
        "name": "relationship_type",
        "schema": {
          "items": {
            "enum": [
              "BENEFICIAL_OWNER_OF",
              "MANAGING_PERSON_OF",
              "OWNER_OF",
              "PAYER_PAYEE"
            ],
            "example": "BENEFICIAL_OWNER_OF",
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "restricted": {
        "description": "Is External Account Restricted for Access",
        "in": "query",
        "name": "restricted",
        "schema": {
          "type": "boolean"
        }
      },
      "result_query": {
        "description": "The result of the verification that was run on the party. Multiple values can be provided as a comma-separated list.\n",
        "explode": false,
        "in": "query",
        "name": "result",
        "schema": {
          "items": {
            "$ref": "#/components/schemas/verification_result"
          },
          "type": "array"
        },
        "style": "form"
      },
      "routing_numbers": {
        "description": "An array of routing numbers to filter institutions. The response will only return institutions that match all of the routing numbers in the array",
        "explode": false,
        "in": "query",
        "name": "routing_numbers",
        "required": true,
        "schema": {
          "example": "21102,10021",
          "items": {
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        }
      },
      "schedule_id_path": {
        "description": "Payment schedule ID",
        "in": "path",
        "name": "payment_schedule_id",
        "required": true,
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "settlement_date_from": {
        "description": "Start of the settlement date range query",
        "in": "query",
        "name": "settlement_date_from",
        "schema": {
          "example": "2023-09-15",
          "format": "date",
          "type": "string"
        }
      },
      "settlement_date_to": {
        "description": "End of the settlement date range query",
        "in": "query",
        "name": "settlement_date_to",
        "schema": {
          "example": "2023-09-25",
          "format": "date",
          "type": "string"
        }
      },
      "sort_by": {
        "in": "query",
        "name": "sort_by",
        "schema": {
          "description": "Optional sort by query parameter. The direction is delimited by ':' and multiple sort fields are delimited by ','",
          "example": "account_id:desc,name:asc",
          "type": "string"
        }
      },
      "spend_control_direction_query": {
        "in": "query",
        "name": "direction",
        "schema": {
          "$ref": "#/components/schemas/spend_control_direction"
        }
      },
      "spend_control_id": {
        "in": "path",
        "name": "spend_control_id",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/spend_control_id"
        }
      },
      "spend_control_ids_query": {
        "description": "Spend Control ID(s). Multiple IDs can be provided as a comma-separated list.\nReturn only resources that use the specified Spend Controls.\n",
        "explode": false,
        "in": "query",
        "name": "spend_control_ids",
        "schema": {
          "$ref": "#/components/schemas/spend_control_ids"
        },
        "style": "form"
      },
      "spend_control_sort_by_query": {
        "description": "Specifies the sort order for returned Spend Controls.\n",
        "explode": false,
        "in": "query",
        "name": "sort_by",
        "schema": {
          "items": {
            "enum": [
              "amount_limit:asc",
              "amount_limit:desc",
              "is_active:asc",
              "is_active:desc",
              "last_modified_time:asc",
              "last_modified_time:desc",
              "name:asc",
              "name:desc",
              "num_related_accounts:asc",
              "num_related_accounts:desc"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "ssn_last_4": {
        "in": "query",
        "name": "ssn_last_4",
        "schema": {
          "description": "Only return resources where the last 4 characters of the SSN match the specified value.",
          "example": "6789",
          "maxLength": 4,
          "minLength": 4,
          "type": "string"
        }
      },
      "start_effective_date": {
        "description": "Start of the effective date range query",
        "in": "query",
        "name": "start_effective_date",
        "schema": {
          "example": "2022-03-15",
          "format": "date",
          "type": "string"
        }
      },
      "statement_id": {
        "description": "The unique identifier of a statement",
        "in": "path",
        "name": "statement_id",
        "required": true,
        "schema": {
          "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "format": "uuid",
          "type": "string"
        }
      },
      "status": {
        "description": "Status of the transaction",
        "in": "query",
        "name": "status",
        "schema": {
          "type": "string"
        }
      },
      "status1": {
        "description": "The status of the transaction",
        "explode": false,
        "in": "query",
        "name": "status",
        "schema": {
          "example": "PENDING,PARTCLEARED",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "status2": {
        "in": "query",
        "name": "status",
        "schema": {
          "description": "Optional query parameter that can be use to filter the list of returned wires by transfer status",
          "enum": [
            "BLOCKED",
            "POSTED",
            "READY"
          ],
          "example": "READY",
          "type": "string"
        }
      },
      "stop_payment_ids_in_query": {
        "description": "A list of stop payments to filter on.",
        "explode": false,
        "in": "query",
        "name": "stop_payment_id",
        "schema": {
          "example": "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157",
          "items": {
            "format": "uuid",
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "subscription_id": {
        "description": "Watchlist monitoring subscription ID",
        "in": "path",
        "name": "subscription_id",
        "required": true,
        "schema": {
          "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "format": "uuid",
          "type": "string"
        }
      },
      "subtype": {
        "description": "Only display transactions matching the given subtype",
        "in": "query",
        "name": "subtype",
        "schema": {
          "type": "string"
        }
      },
      "template_id": {
        "description": "Account Template ID",
        "in": "path",
        "name": "template_id",
        "required": true,
        "schema": {
          "example": "a8943c51-e4ff-4e57-9558-08cab6b963c0",
          "format": "uuid",
          "type": "string"
        }
      },
      "tenant_id": {
        "in": "query",
        "name": "tenant",
        "schema": {
          "description": "Only return resources owned by the specified tenant",
          "example": "abcdef_ghijkl",
          "type": "string"
        }
      },
      "to_business_id_query": {
        "description": "Unique identifier for the business. Multiple IDs can be provided as a comma-separated list.\n",
        "explode": false,
        "in": "query",
        "name": "to_business_id",
        "schema": {
          "example": "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157",
          "items": {
            "format": "uuid",
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "to_date": {
        "description": "Only display transactions with a posting date less than or equal to to_date",
        "in": "query",
        "name": "to_date",
        "schema": {
          "format": "date",
          "type": "string"
        }
      },
      "to_date1": {
        "description": "Only display transactions with an effective date less than or equal to to_date",
        "in": "query",
        "name": "to_date",
        "schema": {
          "format": "date",
          "type": "string"
        }
      },
      "total_amount": {
        "description": "Only return transactions equal to the given total amount (in minor currency units, e.g., cents). This may differ from amount for holds with increases/decreases.",
        "in": "query",
        "name": "total_amount",
        "schema": {
          "example": 1200,
          "format": "int64",
          "minimum": 0,
          "type": "integer"
        }
      },
      "transaction_id": {
        "description": "Transaction ID in the ledger",
        "in": "path",
        "name": "transaction_id",
        "required": true,
        "schema": {
          "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
          "format": "uuid",
          "type": "string"
        }
      },
      "transaction_id1": {
        "description": "Only display holds linked to the provided transaction id",
        "in": "query",
        "name": "transaction_id",
        "schema": {
          "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "format": "uuid",
          "type": "string"
        }
      },
      "transaction_ids_in_query": {
        "description": "A list of centinel transaction ids to filter on.",
        "explode": false,
        "in": "query",
        "name": "transaction_id",
        "schema": {
          "example": "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157",
          "items": {
            "format": "uuid",
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "transfer_id": {
        "description": "The unique identifier of a transfer",
        "in": "path",
        "name": "transfer_id",
        "required": true,
        "schema": {
          "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "format": "uuid",
          "type": "string"
        }
      },
      "type": {
        "description": "The type of documents. Multiple types can be provided as a comma-separated list.",
        "explode": false,
        "in": "query",
        "name": "type",
        "schema": {
          "items": {
            "$ref": "#/components/schemas/document_type"
          },
          "type": "array"
        },
        "style": "form"
      },
      "type1": {
        "description": "Only display transactions matching the given type",
        "in": "query",
        "name": "type",
        "schema": {
          "type": "string"
        }
      },
      "uetr": {
        "in": "query",
        "name": "uetr",
        "schema": {
          "description": "Optional query parameter to filter incoming wires by UETR (Unique End-to-End Transaction Reference)",
          "example": "5be434c4-f2c2-4f1f-8900-09c5c9d4e2d3",
          "format": "uuid",
          "type": "string"
        }
      },
      "uuid_nin_query": {
        "description": "Transaction UUID(s) to exclude from the query. Multiple UUIDs can be provided as a comma-separated list.",
        "explode": false,
        "in": "query",
        "name": "uuid_nin",
        "schema": {
          "example": "ba313a66-cbb6-4bc3-aa37-6548448ecb32,cadb3dd1-feb0-42c3-b545-afbbfa99eb7f",
          "items": {
            "format": "uuid",
            "type": "string"
          },
          "type": "array"
        }
      },
      "uuid_query": {
        "description": "Unique identifier for the resource. Multiple IDs can be provided as a comma-separated list.\n",
        "explode": false,
        "in": "query",
        "name": "id",
        "schema": {
          "example": "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157",
          "items": {
            "format": "uuid",
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "uuid_query1": {
        "description": "Transaction UUID(s). Multiple UUIDs can be provided as a comma-separated list.",
        "explode": false,
        "in": "query",
        "name": "uuid",
        "schema": {
          "example": "ba313a66-cbb6-4bc3-aa37-6548448ecb32,cadb3dd1-feb0-42c3-b545-afbbfa99eb7f",
          "items": {
            "format": "uuid",
            "type": "string"
          },
          "type": "array"
        }
      },
      "verification_id": {
        "description": "Verification's unique identifier.",
        "in": "path",
        "name": "verification_id",
        "required": true,
        "schema": {
          "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "format": "uuid",
          "type": "string"
        }
      },
      "verification_status": {
        "description": "Verification status of the person. Multiple values can be provided as a comma-seperated list of the following:\n* `UNVERIFIED` – verification has not been completed for this customer.\n* `PENDING` – verification is in progress for this customer.\n* `PROVISIONAL` – partially verified or verified with restrictions.\n* `ACCEPTED` – the customer has been verified.\n* `REVIEW` – verification has run and issues have been identified and require review.\n* `REJECTED` – the customer was rejected and should not be allowed to take certain actions e.g., open an account.\n",
        "explode": false,
        "in": "query",
        "name": "verification_status",
        "schema": {
          "items": {
            "$ref": "#/components/schemas/verification_status"
          },
          "type": "array"
        },
        "style": "form"
      },
      "verification_type_query": {
        "description": "The type of verification run. Multiple values can be provided as a comma-separated list.\n",
        "explode": false,
        "in": "query",
        "name": "verification_type",
        "schema": {
          "items": {
            "$ref": "#/components/schemas/verification_type"
          },
          "type": "array"
        },
        "style": "form"
      },
      "webhook_id": {
        "description": "Webhook ID",
        "in": "path",
        "name": "webhook_id",
        "required": true,
        "schema": {
          "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
          "format": "uuid",
          "type": "string"
        }
      },
      "wire_id": {
        "description": "The unique identifier of a wire transfer.",
        "in": "path",
        "name": "wire_id",
        "required": true,
        "schema": {
          "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
          "format": "uuid",
          "type": "string"
        }
      }
    },
    "responses": {
      "account_closed": {
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        },
        "description": "Account has been closed"
      },
      "already_exists": {
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        },
        "description": "Resource already exists error"
      },
      "bad_request": {
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        },
        "description": "BadRequest"
      },
      "delete_response": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/delete_response"
            }
          }
        },
        "description": "Resource has been deleted"
      },
      "forbidden": {
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        },
        "description": "Forbidden error"
      },
      "internal_server_error": {
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        },
        "description": "Internal server error"
      },
      "not_found": {
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        },
        "description": "Resource not found"
      },
      "unauthorized": {
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        },
        "description": "Unauthorized"
      },
      "unprocessable_entity": {
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        },
        "description": "Unprocessable entity request response"
      }
    },
    "schemas": {
      "account": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/account_depository"
          },
          {
            "$ref": "#/components/schemas/account_revolving_credit_secured"
          },
          {
            "$ref": "#/components/schemas/account_charge_unsecured"
          },
          {
            "$ref": "#/components/schemas/account_general_ledger"
          },
          {
            "$ref": "#/components/schemas/account_charge_secured"
          },
          {
            "$ref": "#/components/schemas/account_revolving_credit_unsecured"
          },
          {
            "$ref": "#/components/schemas/account_line_of_credit"
          }
        ],
        "description": "Account",
        "type": "object"
      },
      "account_access_status": {
        "description": "Represents whether a customer has frozen their account. `FROZEN` is a customer-initiated state meaning that the account will reject all debits, typically used for a lost or stolen card.",
        "enum": [
          "ACTIVE",
          "FROZEN"
        ],
        "type": "string"
      },
      "account_base": {
        "properties": {
          "access_status": {
            "$ref": "#/components/schemas/account_access_status"
          },
          "account_number": {
            "description": "Account number",
            "maxLength": 50,
            "readOnly": true,
            "type": "string"
          },
          "account_number_masked": {
            "description": "The response will contain the bank fintech ID (3 or 6 digits) plus the last 4 digits, with the digits in between replaced with * characters. Shadow mode account numbers will not be masked.",
            "example": "123*****6789",
            "maxLength": 50,
            "readOnly": true,
            "type": "string"
          },
          "account_purpose": {
            "description": "Purpose of the account",
            "example": "This account for the account holder's salary deposit.",
            "type": "string"
          },
          "account_type": {
            "$ref": "#/components/schemas/account_type"
          },
          "application_id": {
            "description": "The application ID for this account.\n",
            "format": "uuid",
            "type": "string"
          },
          "balances": {
            "description": "A list of balances for account based on different type",
            "items": {
              "$ref": "#/components/schemas/balance"
            },
            "readOnly": true,
            "type": "array"
          },
          "bank_routing": {
            "description": "Bank routing number",
            "maxLength": 9,
            "readOnly": true,
            "type": "string"
          },
          "creation_time": {
            "description": "Account creation timestamp in RFC3339 format",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "currency": {
            "description": "Account currency or account settlement currency. ISO 4217 alphabetic currency code. Default USD",
            "example": "USD",
            "pattern": "^[A-Z]{3}$",
            "type": "string"
          },
          "customer_ids": {
            "description": "A list of the customer IDs of the account holders.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "customer_type": {
            "$ref": "#/components/schemas/customer_type"
          },
          "exchange_rate_type": {
            "description": "Exchange rate type",
            "example": "M, INTERBANK, CUST",
            "maxLength": 10,
            "type": "string"
          },
          "iban": {
            "description": "International bank account number",
            "maxLength": 34,
            "type": "string"
          },
          "id": {
            "description": "Account ID",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_account_pool": {
            "description": "Account is investment (variable balance) account or a multi-balance account pool. Default false",
            "type": "boolean"
          },
          "is_sar_enabled": {
            "description": "A flag to indicate whether SAR generation is enabled.",
            "readOnly": true,
            "type": "boolean"
          },
          "last_updated_time": {
            "description": "Timestamp of the last account modification in RFC3339 format",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "metadata": {
            "description": "User provided account metadata",
            "type": "object"
          },
          "nickname": {
            "description": "User provided account nickname",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/account_status"
          },
          "swift_code": {
            "description": "SWIFT code",
            "maxLength": 11,
            "minLength": 8,
            "type": "string"
          }
        },
        "type": "object"
      },
      "account_charge_secured": {
        "allOf": [
          {
            "properties": {
              "account_template_id": {
                "description": "The account template used to create this account (if any).\nOn creation, if not specified:\n    * `account_type` is *required*.\n    * If there is a single account template of the correct type,\n      that account template is automatically used.\n    * Otherwise, the request is an error.\n",
                "format": "uuid",
                "type": "string"
              },
              "is_system_auto_pay_enabled": {
                "default": false,
                "description": "A flag to indicate whether auto payments are enabled.",
                "type": "boolean"
              },
              "note": {
                "description": "Add an optional note when creating or updating an account. A note is required when updating the status to or from SUSPENDED",
                "type": "string",
                "writeOnly": true
              },
              "security": {
                "$ref": "#/components/schemas/security"
              },
              "spend_control_ids": {
                "$ref": "#/components/schemas/spend_control_ids"
              }
            },
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/rails_charge_secured"
          },
          {
            "$ref": "#/components/schemas/account_base"
          }
        ],
        "description": "Account representing a secured charge account, e.g. for use in a Smart Charge Card offering.\n",
        "type": "object"
      },
      "account_charge_unsecured": {
        "allOf": [
          {
            "properties": {
              "account_template_id": {
                "description": "The account template used to create this account (if any).\nOn creation, if not specified:\n    * `account_type` is *required*.\n    * If there is a single account template of the correct type,\n      that account template is automatically used.\n    * Otherwise, the request is an error.\n",
                "format": "uuid",
                "type": "string"
              },
              "balance_ceiling": {
                "$ref": "#/components/schemas/balance_ceiling"
              },
              "balance_floor": {
                "$ref": "#/components/schemas/balance_floor"
              },
              "credit_limit": {
                "description": "The credit limit for this charge unsecured account in cents. Minimum is 0.\n",
                "example": 2500,
                "format": "int64",
                "minimum": 0,
                "type": "integer"
              },
              "minimum_payment": {
                "$ref": "#/components/schemas/minimum_payment_full"
              },
              "note": {
                "description": "Add an optional note when creating or updating an account. A note is required when updating the status to or from SUSPENDED",
                "type": "string",
                "writeOnly": true
              },
              "spend_control_ids": {
                "$ref": "#/components/schemas/spend_control_ids"
              }
            },
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/account_base"
          },
          {
            "$ref": "#/components/schemas/rails_charge_unsecured"
          }
        ],
        "description": "Account representing a charge unsecured account.",
        "type": "object"
      },
      "account_closure_payment_method": {
        "description": "Payment method for the final payment if the account being closed carries a balance.\n",
        "enum": [
          "ACH",
          "BANK_DRAFT",
          "INTERNAL_TRANSFER_TO_CUSTOMER_ACCOUNT",
          "INTERNAL_TRANSFER_TO_INTERNAL_ACCOUNT"
        ],
        "nullable": true,
        "type": "string"
      },
      "account_closure_reason": {
        "description": "The enumerated reason for closing the account. This is a required field when closing an account; the given value will be validated against the caller's permissions.\n",
        "enum": [
          "BANK_REQUEST_FRAUD",
          "BANK_REQUEST_INACTIVITY",
          "BANK_REQUEST_REDEEMED_OR_REINSTATED_REPOSSESSION",
          "BANK_REQUEST_REGULATORY_REASONS",
          "CUSTOMER_REQUEST_CREDIT_CARD_LOST_OR_STOLEN",
          "CUSTOMER_REQUEST_REFINANCE",
          "CUSTOMER_REQUEST_TRANSFER",
          "CUSTOMER_REQUEST_VOLUNTARILY_SURRENDERED",
          "PROGRAM_SHUT_DOWN_BANK",
          "PROGRAM_SHUT_DOWN_FINTECH"
        ],
        "example": "BANK_REQUEST_REGULATORY_REASONS",
        "type": "string"
      },
      "account_closure_request": {
        "description": "Account closing details when attempting to close an account and status is being changed to `IN_CLOSING`.",
        "properties": {
          "destination_id": {
            "description": "internal/external/customer account ID, depending on payment_method",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "payment_method": {
            "$ref": "#/components/schemas/account_closure_payment_method"
          },
          "reason": {
            "$ref": "#/components/schemas/account_closure_reason"
          },
          "reason_details": {
            "description": "Additional details about the reason for closing the account",
            "type": "string"
          }
        },
        "required": [
          "reason",
          "reason_details"
        ],
        "type": "object"
      },
      "account_closure_response": {
        "description": "Account closing details when attempting to close an account and status is being changed to `IN_CLOSING`.",
        "properties": {
          "cases": {
            "description": "Cases associated with the account closure",
            "items": {
              "$ref": "#/components/schemas/case"
            },
            "type": "array"
          },
          "destination_id": {
            "description": "internal/external/customer account ID, depending on payment_method",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "payment_method": {
            "$ref": "#/components/schemas/account_closure_payment_method"
          },
          "reason": {
            "$ref": "#/components/schemas/account_closure_reason"
          },
          "reason_details": {
            "description": "Additional details about the reason for closing the account",
            "type": "string"
          },
          "validation_responses": {
            "items": {
              "$ref": "#/components/schemas/account_closure_validation_response"
            },
            "type": "array"
          }
        },
        "required": [
          "destination_id",
          "payment_method",
          "reason",
          "reason_details"
        ],
        "type": "object"
      },
      "account_closure_update_request": {
        "description": "Account closing details when attempting to close an account and status is being changed to `IN_CLOSING`.",
        "properties": {
          "destination_id": {
            "description": "internal/external/customer account ID, depending on payment_method",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "payment_method": {
            "$ref": "#/components/schemas/account_closure_payment_method"
          }
        },
        "type": "object"
      },
      "account_closure_validation_response": {
        "description": "Account closure validation response",
        "properties": {
          "details": {
            "type": "object"
          },
          "message": {
            "description": "Validation message",
            "example": "Cards decoupled from account",
            "type": "string"
          },
          "name": {
            "description": "Name",
            "example": "cards",
            "type": "string"
          },
          "validated": {
            "description": "Validation result",
            "example": true,
            "type": "boolean"
          }
        },
        "required": [
          "details",
          "message",
          "name",
          "validated"
        ],
        "type": "object"
      },
      "account_creation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/account"
          },
          {
            "properties": {
              "manual_account_number": {
                "description": "Manually supplied account number. Providing your own account number must be agreed upon by the bank and Synctera ahead of time. This number must not contain the institution or transit number.",
                "maxLength": 50,
                "pattern": "^[0-9]{7,12}$",
                "type": "string"
              },
              "relationships": {
                "description": "List of the relationship for this account to the parties, Primary account holders are inferred for accounts of type general ledger and should not be provided in this request.",
                "items": {
                  "$ref": "#/components/schemas/account_relationship"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "account_depository": {
        "allOf": [
          {
            "properties": {
              "account_template_id": {
                "description": "The account template used to create this account (if any).\nOn creation, if not specified:\n    * `account_type` is *required*.\n    * If there is a single account template of the correct type,\n      that account template is automatically used.\n    * Otherwise, the request is an error.\n",
                "format": "uuid",
                "type": "string"
              },
              "balance_ceiling": {
                "$ref": "#/components/schemas/balance_ceiling"
              },
              "balance_floor": {
                "$ref": "#/components/schemas/balance_floor"
              },
              "fee_product_ids": {
                "description": "A list of fee account products that the current account associates with.",
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "interest_product_id": {
                "description": "An interest account product that the current account associates with.\n",
                "format": "uuid",
                "type": "string"
              },
              "note": {
                "description": "Add an optional note when creating or updating an account. A note is required when updating the status to or from SUSPENDED",
                "type": "string",
                "writeOnly": true
              },
              "overdraft_limit": {
                "deprecated": true,
                "description": "This field is unused and will be removed in a future API version.\n",
                "format": "int64",
                "minimum": 0,
                "type": "integer"
              },
              "spend_control_ids": {
                "$ref": "#/components/schemas/spend_control_ids"
              },
              "spending_limits": {
                "$ref": "#/components/schemas/spending_limits"
              }
            }
          },
          {
            "$ref": "#/components/schemas/rails_depository"
          },
          {
            "$ref": "#/components/schemas/account_base"
          }
        ],
        "description": "Account representing either a checking or saving account.",
        "type": "object"
      },
      "account_general_ledger": {
        "allOf": [
          {
            "properties": {
              "account_template_id": {
                "description": "The account template used to create this account (if any).\nOn creation, if not specified:\n    * `account_type` is *required*.\n    * If there is a single account template of the correct type,\n      that account template is automatically used.\n    * Otherwise, the request is an error.\n",
                "format": "uuid",
                "type": "string"
              },
              "general_ledger_type": {
                "$ref": "#/components/schemas/general_ledger_type"
              },
              "note": {
                "description": "Add an optional note when creating or updating an account. A note is required when updating the status to or from SUSPENDED",
                "type": "string",
                "writeOnly": true
              }
            },
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/rails_general_ledger"
          },
          {
            "$ref": "#/components/schemas/account_base"
          }
        ],
        "description": "Account representing a general ledger (vs a customer account).\n\nIn production, general ledger accounts can only be created or updated by a Synctera administrator.\n\nGeneral ledger accounts are in Alpha status, and cannot yet be created. We may make breaking changes.\n",
        "type": "object"
      },
      "account_generic_response": {
        "properties": {
          "access_status": {
            "$ref": "#/components/schemas/account_access_status"
          },
          "access_status_last_updated_time": {
            "description": "Timestamp of the last modification of the access_status. RFC3339 format.",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "account_closure": {
            "$ref": "#/components/schemas/account_closure_response"
          },
          "account_number": {
            "description": "Account number",
            "maxLength": 50,
            "readOnly": true,
            "type": "string"
          },
          "account_number_masked": {
            "description": "The response will contain the bank fintech ID (3 or 6 digits) plus the last 4 digits, with the digits in between replaced with * characters. Shadow mode account numbers will not be masked.",
            "example": "123*****6789",
            "maxLength": 50,
            "readOnly": true,
            "type": "string"
          },
          "account_purpose": {
            "description": "Purpose of the account",
            "example": "This account for the account holder's salary deposit.",
            "type": "string"
          },
          "account_template_id": {
            "description": "The account template used to create this account (if any).\nOn creation, if not specified:\n    * `account_type` is *required*.\n    * If there is a single account template of the correct type,\n      that account template is automatically used.\n    * Otherwise, the request is an error.\n",
            "format": "uuid",
            "type": "string"
          },
          "account_type": {
            "$ref": "#/components/schemas/account_type"
          },
          "application_id": {
            "description": "The application ID for this account.\n",
            "format": "uuid",
            "type": "string"
          },
          "auto_payment_period": {
            "description": "The number of days past the billing period to initiate an auto payment. Only applicable for accounts with type `CHARGE_SECURED`, where the account holder has opted in for auto payment functionality. This value must be lower than or equal the `grace_period` setting on the account. If this value is 0, the auto payment will happen on the same day as the statement is generated. Auto payment only occurs if regular payments are not received on time.\n",
            "example": 20,
            "maximum": 28,
            "minimum": 0,
            "type": "integer"
          },
          "balance_ceiling": {
            "$ref": "#/components/schemas/balance_ceiling"
          },
          "balance_floor": {
            "$ref": "#/components/schemas/balance_floor"
          },
          "balances": {
            "description": "A list of balances for account based on different type",
            "items": {
              "$ref": "#/components/schemas/balance"
            },
            "readOnly": true,
            "type": "array"
          },
          "bank_account_id": {
            "description": "Identifier of the bank side account that this account is a part of",
            "readOnly": true,
            "type": "string"
          },
          "bank_routing": {
            "description": "Bank routing number",
            "maxLength": 9,
            "readOnly": true,
            "type": "string"
          },
          "billing_period": {
            "$ref": "#/components/schemas/billing_period"
          },
          "business_ids": {
            "description": "A list of the business IDs of the account holders.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "close_date": {
            "description": "The account close date. This is the bank's posting date when the account resource's status was changed to CLOSED or CHARGED_OFF.",
            "format": "date",
            "readOnly": true,
            "type": "string"
          },
          "creation_time": {
            "description": "Account creation timestamp in RFC3339 format",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "credit_limit": {
            "description": "The credit limit for this line of credit account in cents. Minimum is 0.\n",
            "example": 2500,
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "currency": {
            "description": "Account currency or account settlement currency. ISO 4217 alphabetic currency code. Default USD",
            "example": "USD",
            "pattern": "^[A-Z]{3}$",
            "type": "string"
          },
          "customer_ids": {
            "description": "A list of the customer IDs of the account holders.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "customer_type": {
            "$ref": "#/components/schemas/customer_type"
          },
          "days_past_due": {
            "description": "The number of days since the account went past due on their minimum payments.",
            "type": "integer"
          },
          "exchange_rate_type": {
            "description": "Exchange rate type",
            "example": "M, INTERBANK, CUST",
            "maxLength": 10,
            "type": "string"
          },
          "fee_product_ids": {
            "description": "A list of fee account products that the current account associates with.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "funds_ownership": {
            "$ref": "#/components/schemas/funds_ownership"
          },
          "general_ledger_category": {
            "$ref": "#/components/schemas/general_ledger_category"
          },
          "general_ledger_type": {
            "$ref": "#/components/schemas/general_ledger_type"
          },
          "grace_period": {
            "description": "The number of days past the billing period to allow for payment before it is considered due. This directly infers the due date for a payment. The default will be set to 21 days.\n",
            "example": 21,
            "maximum": 28,
            "minimum": 21,
            "type": "integer"
          },
          "iban": {
            "description": "International bank account number",
            "maxLength": 34,
            "type": "string"
          },
          "id": {
            "description": "Account ID",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "in_closing_date": {
            "description": "The account in-closing date. This is the bank's posting date when the account resource's status was changed to IN_CLOSING.",
            "format": "date",
            "readOnly": true,
            "type": "string"
          },
          "interest_product_id": {
            "description": "An interest account product that the current account associates with.",
            "format": "uuid",
            "type": "string"
          },
          "is_account_pool": {
            "description": "Account is investment (variable balance) account or a multi-balance account pool. Default false",
            "type": "boolean"
          },
          "is_ach_enabled": {
            "description": "A flag to indicate whether ACH transactions are enabled.",
            "readOnly": true,
            "type": "boolean"
          },
          "is_card_enabled": {
            "description": "A flag to indicate whether card transactions are enabled.",
            "readOnly": true,
            "type": "boolean"
          },
          "is_eft_ca_enabled": {
            "description": "A flag to indicate whether EFT Canada transactions are enabled.",
            "readOnly": true,
            "type": "boolean"
          },
          "is_external_card_enabled": {
            "description": "A flag to indicate whether external card transactions are enabled.",
            "readOnly": true,
            "type": "boolean"
          },
          "is_p2p_enabled": {
            "description": "A flag to indicate whether P2P transactions are enabled.",
            "readOnly": true,
            "type": "boolean"
          },
          "is_sar_enabled": {
            "description": "A flag to indicate whether SAR generation is enabled.",
            "readOnly": true,
            "type": "boolean"
          },
          "is_security": {
            "description": "A flag to indicate whether this account is being used as security for another account.",
            "readOnly": true,
            "type": "boolean"
          },
          "is_synctera_pay_enabled": {
            "description": "A flag to indicate whether Synctera Pay transactions are enabled.",
            "readOnly": true,
            "type": "boolean"
          },
          "is_system_auto_pay_enabled": {
            "description": "A flag to indicate whether auto pay feature is enabled.",
            "type": "boolean"
          },
          "is_wire_enabled": {
            "description": "A flag to indicate whether wire transactions are enabled.",
            "readOnly": true,
            "type": "boolean"
          },
          "last_updated_time": {
            "description": "Timestamp of the last account modification in RFC3339 format",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "metadata": {
            "description": "User provided account metadata",
            "type": "object"
          },
          "minimum_payment": {
            "$ref": "#/components/schemas/minimum_payment"
          },
          "nickname": {
            "description": "User provided account nickname",
            "type": "string"
          },
          "open_date": {
            "description": "The account open date. This is the bank's posting date when the account resource was created.",
            "format": "date",
            "readOnly": true,
            "type": "string"
          },
          "overdraft_limit": {
            "deprecated": true,
            "description": "This field is unused and will be removed in a future API version.\n",
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "restrictions": {
            "$ref": "#/components/schemas/account_restrictions"
          },
          "security": {
            "$ref": "#/components/schemas/security"
          },
          "spend_control_ids": {
            "$ref": "#/components/schemas/spend_control_ids"
          },
          "spending_limits": {
            "$ref": "#/components/schemas/spending_limits"
          },
          "status": {
            "$ref": "#/components/schemas/account_status"
          },
          "stop_payments": {
            "items": {
              "$ref": "#/components/schemas/stop_payment"
            },
            "readOnly": true,
            "type": "array"
          },
          "swift_code": {
            "description": "SWIFT code",
            "maxLength": 11,
            "minLength": 8,
            "type": "string"
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          },
          "vendor_info": {
            "$ref": "#/components/schemas/vendor_info"
          }
        },
        "type": "object"
      },
      "account_id": {
        "description": "The unique identifier of an account",
        "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
        "format": "uuid",
        "type": "string"
      },
      "account_identifiers": {
        "properties": {
          "iban": {
            "description": "The IBAN of the account. Value may be masked, in which case only the last four digits are returned.\n",
            "example": "LI4476584648937N59B00",
            "type": "string"
          },
          "number": {
            "description": "The unique identifier of the account. Value may be masked, in which case only the last four digits are returned.\n",
            "example": "78277121",
            "type": "string"
          }
        },
        "required": [
          "number"
        ],
        "title": "Identifiers for the account",
        "type": "object"
      },
      "account_line_of_credit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/rails_loc"
          },
          {
            "properties": {
              "account_template_id": {
                "description": "The account template used to create this account (if any).\nOn creation, if not specified:\n    * `account_type` is *required*.\n    * If there is a single account template of the correct type,\n      that account template is automatically used.\n    * Otherwise, the request is an error.\n",
                "format": "uuid",
                "type": "string"
              },
              "credit_limit": {
                "description": "The credit limit for this line of credit account in cents. Minimum is 0.\n",
                "example": 2500,
                "format": "int64",
                "minimum": 0,
                "type": "integer"
              },
              "grace_period": {
                "description": "The number of days past the billing period to allow for payment before it is considered due. This directly infers the due date for a payment. The default will be set to 21 days.\n",
                "example": 21,
                "maximum": 28,
                "minimum": 21,
                "type": "integer"
              },
              "interest_product_id": {
                "description": "An interest account product that the current account associates with. The account product must have its calculation_method set to COMPOUNDED_DAILY.\n",
                "format": "uuid",
                "type": "string"
              },
              "minimum_payment": {
                "$ref": "#/components/schemas/minimum_payment_partial"
              },
              "note": {
                "description": "Add an optional note when creating or updating an account. A note is required when updating the status to or from SUSPENDED",
                "type": "string",
                "writeOnly": true
              }
            },
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/account_base"
          }
        ],
        "description": "Account representing a line of credit account.",
        "type": "object"
      },
      "account_list": {
        "allOf": [
          {
            "properties": {
              "accounts": {
                "description": "Array of Accounts",
                "items": {
                  "$ref": "#/components/schemas/account_generic_response"
                },
                "type": "array"
              }
            },
            "required": [
              "accounts"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "account_product": {
        "discriminator": {
          "mapping": {
            "FEE": "#/components/schemas/fee",
            "INTEREST": "#/components/schemas/interest"
          },
          "propertyName": "product_type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/interest"
          },
          {
            "$ref": "#/components/schemas/fee"
          }
        ],
        "type": "object"
      },
      "account_product_list": {
        "allOf": [
          {
            "$ref": "#/components/schemas/paginated_response"
          },
          {
            "properties": {
              "account_products": {
                "description": "Array of account products",
                "items": {
                  "$ref": "#/components/schemas/account_product"
                },
                "type": "array"
              }
            },
            "required": [
              "account_products"
            ],
            "type": "object"
          }
        ]
      },
      "account_relationship": {
        "description": "The relationship of the account and the customer/business. Either customer_id OR business_id must be specified, but not both.",
        "properties": {
          "business_id": {
            "description": "Business associated with the current account. One of business_id or customer_id must be specified.",
            "format": "uuid",
            "type": "string"
          },
          "created_at": {
            "description": "Date and time when this association was created.",
            "format": "date-time",
            "type": "string"
          },
          "customer_id": {
            "description": "Personal customer associated with the current account. One of customer_id or business_id must be specified.",
            "format": "uuid",
            "type": "string"
          },
          "deleted_at": {
            "description": "Date and time when this association was deleted.",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "ID of account relationship",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "person_id": {
            "deprecated": true,
            "description": "Person associated with the current account. This attribute is deprecated and will be removed in a future API version. Use customer_id instead.",
            "format": "uuid",
            "type": "string"
          },
          "relationship_type": {
            "$ref": "#/components/schemas/account_relationship_type"
          },
          "updated_at": {
            "description": "Date and time when this association was last updated.",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "relationship_type"
        ],
        "title": "Account Relationship",
        "type": "object"
      },
      "account_relationship_type": {
        "description": "Relationship type",
        "enum": [
          "ACCOUNT_HOLDER",
          "AUTHORIZED_SIGNER",
          "AUTHORIZED_USER",
          "JOINT_ACCOUNT_HOLDER",
          "PRIMARY_ACCOUNT_HOLDER"
        ],
        "type": "string"
      },
      "account_restrictions": {
        "description": "Conditions that restrict the use of the account.",
        "properties": {
          "is_account_out_of_area": {
            "description": "A flag to indicate whether any of the account holders of the account are out of the supported countries. Can only be set by the Synctera platform.\n",
            "type": "boolean"
          },
          "is_delinquent": {
            "description": "A flag to indicate whether a credit account is greater than 30 days past due on minimum payments. Delinquent accounts will be unable to spend until overdue amount is paid. Can only be set by the Synctera platform.\n",
            "type": "boolean"
          },
          "is_past_due": {
            "description": "A flag to indicate whether a credit account is past due on minimum payments. Can only be set by the Synctera platform.\n",
            "type": "boolean"
          },
          "is_revoked": {
            "description": "A flag to indicates whether a credit account has been revoked (greater than 90 days past due). Revoked accounts will be unable to spend and no longer accrue interest. Can only be set by the Synctera platform.\n",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "account_revolving_credit_secured": {
        "allOf": [
          {
            "$ref": "#/components/schemas/rails_revolving_credit_secured"
          },
          {
            "properties": {
              "account_template_id": {
                "description": "The account template used to create this account (if any).\nOn creation, if not specified:\n    * `account_type` is *required*.\n    * If there is a single account template of the correct type,\n      that account template is automatically used.\n    * Otherwise, the request is an error.\n",
                "format": "uuid",
                "type": "string"
              },
              "balance_ceiling": {
                "$ref": "#/components/schemas/balance_ceiling"
              },
              "balance_floor": {
                "$ref": "#/components/schemas/balance_floor"
              },
              "credit_limit": {
                "description": "The credit limit for this revolving credit secured account in cents. Minimum is 0.\n",
                "example": 2500,
                "format": "int64",
                "minimum": 0,
                "type": "integer"
              },
              "note": {
                "description": "Add an optional note when creating or updating an account. A note is required when updating the status to or from SUSPENDED",
                "type": "string",
                "writeOnly": true
              },
              "security": {
                "$ref": "#/components/schemas/security"
              },
              "spend_control_ids": {
                "$ref": "#/components/schemas/spend_control_ids"
              },
              "vendor_info": {
                "$ref": "#/components/schemas/vendor_info"
              }
            },
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/account_base"
          }
        ],
        "description": "Account representing a secured revolving credit account.",
        "type": "object"
      },
      "account_revolving_credit_unsecured": {
        "allOf": [
          {
            "properties": {
              "account_template_id": {
                "description": "The account template used to create this account (if any).\nOn creation, if not specified:\n    * `account_type` is *required*.\n    * If there is a single account template of the correct type,\n      that account template is automatically used.\n    * Otherwise, the request is an error.\n",
                "format": "uuid",
                "type": "string"
              },
              "balance_ceiling": {
                "$ref": "#/components/schemas/balance_ceiling"
              },
              "balance_floor": {
                "$ref": "#/components/schemas/balance_floor"
              },
              "credit_limit": {
                "description": "The credit limit for this revolving credit unsecured account in cents. Minimum is 0.\n",
                "example": 2500,
                "format": "int64",
                "minimum": 0,
                "type": "integer"
              },
              "note": {
                "description": "Add an optional note when creating or updating an account. A note is required when updating the status to or from SUSPENDED",
                "type": "string",
                "writeOnly": true
              },
              "spend_control_ids": {
                "$ref": "#/components/schemas/spend_control_ids"
              },
              "vendor_info": {
                "$ref": "#/components/schemas/vendor_info"
              }
            },
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/account_base"
          },
          {
            "$ref": "#/components/schemas/rails_revolving_credit_unsecured"
          }
        ],
        "description": "Account representing an unsecured revolving credit account.",
        "type": "object"
      },
      "account_routing": {
        "properties": {
          "ach_routing_number": {
            "description": "The routing number used for US ACH payments. Only appears if `bank_countries` contains `US`. Value may be masked, in which case only the last four digits are returned.\n",
            "example": "756392185",
            "type": "string"
          },
          "bank_address": {
            "$ref": "#/components/schemas/address"
          },
          "bank_countries": {
            "description": "The countries that this bank operates the account in",
            "items": {
              "example": "US",
              "type": "string"
            },
            "type": "array"
          },
          "bank_name": {
            "description": "The name of the bank managing the account",
            "example": "Chase",
            "type": "string"
          },
          "correspondent_bank_details": {
            "description": "The details of the correspondent banks for the account.\n",
            "items": {
              "$ref": "#/components/schemas/correspondent_bank_details"
            },
            "nullable": true,
            "type": "array"
          },
          "eft_ca_routing_number": {
            "description": "> 🚧 Alpha > This is an Alpha property. Feedback from the community is welcome. We may make breaking changes to this property.\nThe 9 digit routing number used for EFT CA payments, identifying a Canadian bank. The format is 0xxxyyyyy where xxx is the institution number and yyyyy is the transit number. On write, Synctera will store the entire routing number; on read, we only return the last 4 characters. Value may be masked, in which case only the last four digits are returned.\n",
            "example": "02101140",
            "type": "string"
          },
          "eft_routing_number": {
            "deprecated": true,
            "description": "The routing number used for EFT payments, identifying a Canadian bank, consisting of the institution number and the branch number. Only appears if `bank_countries` contains `CA`. Value may be masked, in which case only the last four digits are returned. This attribute is deprecated and will be removed in a future API version. Use eft_ca_routing_number instead.\n",
            "example": "02101140",
            "type": "string"
          },
          "network": {
            "$ref": "#/components/schemas/external_account_network"
          },
          "swift_code": {
            "description": "The SWIFT code for the bank. Value may be masked, in which case only the last four characters are returned.\n",
            "example": "CHASUS3AXXX",
            "type": "string"
          },
          "wire_routing_number": {
            "description": "The routing number used for domestic wire payments. Only appears if `bank_countries` contains `US`. Value may be masked, in which case only the last four digits are returned.\n",
            "example": "756392185",
            "type": "string"
          }
        },
        "required": [
          "bank_countries",
          "bank_name"
        ],
        "title": "Routing information for the account",
        "type": "object"
      },
      "account_status": {
        "description": "The status of the account.\n\n| Status | Description | Transactable |\n|------|-----------|-----|\n| ACCOUNT_NEVER_ACTIVE | Account was never activated by the customer | N |\n| ACCOUNT_NOT_DESIRED | A credit account was created for a customer, but the customer did not accept the account | N |\n| ACTIVATED_NOT_DISBURSED | A credit account was created for the customer, but the funds have not been paid out or used | N |\n| ACTIVE_OR_DISBURSED | The account is active and transactable | Y |\n| APPLICATION_SUBMITTED | Deprecated status | N |\n| AWAITING_FIXING | Account is awaiting fixing | N |\n| CHARGED_OFF | The account has been charged off and is closed | N |\n| CLOSED | Accounts must be zeroed out before being closed.  Closed accounts cannot transact | N |\n| DELINQUENT | Synctera will update a credit account to delinquent if the customer has not paid within their expected billing cycle | N |\n| FAILED_KYC | We were unable to verify the identity of the account holder: they have not passed know-your-customer (KYC) checks | N |\n| IN_CLOSING | The account is in the process of being closed. An account with the IN_CLOSING status may only be updated to CLOSED. Updates to other statuses are prohibited. | N |\n| RESTRICTED | Synctera will update accounts to restricted of the account holder has not successfully passed KYC | N |\n| SUSPENDED | Account has been suspected of fraudulent activity and is blocked from further transactions | N |\n",
        "enum": [
          "ACCOUNT_NEVER_ACTIVE",
          "ACCOUNT_NOT_DESIRED",
          "ACTIVATED_NOT_DISBURSED",
          "ACTIVE_OR_DISBURSED",
          "APPLICATION_SUBMITTED",
          "AWAITING_FIXING",
          "CHARGED_OFF",
          "CLOSED",
          "DELINQUENT",
          "FAILED_KYC",
          "IN_CLOSING",
          "RESTRICTED",
          "SUSPENDED"
        ],
        "title": "Account Status",
        "type": "string"
      },
      "account_summary": {
        "properties": {
          "account_number": {
            "description": "Account number",
            "type": "string"
          },
          "account_status": {
            "description": "Account Status",
            "type": "string"
          },
          "account_type": {
            "description": "The type of the account. In lead mode, this always takes the value of the template. If not specified in shadow mode, CHECKING will be assumed.\n",
            "type": "string"
          },
          "balance_ceiling": {
            "properties": {
              "balance": {
                "description": "Maximum balance in the account's currency. Unit in cents.",
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "balance_floor": {
            "properties": {
              "balance": {
                "description": "Minimum balance in the account's currency. Unit in cents.",
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "creation_time": {
            "description": "Account creation time",
            "format": "date-time",
            "type": "string"
          },
          "currency": {
            "description": "Account currency or account settlement currency. ISO 4217 alphabetic currency code. Default USD",
            "example": "USD",
            "pattern": "^[A-Z]{3}$",
            "type": "string"
          },
          "customer_type": {
            "description": "Customer type",
            "type": "string"
          },
          "financial_institution": {
            "$ref": "#/components/schemas/financial_institution"
          },
          "id": {
            "description": "The unique identifier of the account the statement belongs to",
            "format": "uuid",
            "type": "string"
          },
          "last_updated_time": {
            "description": "Account last modification time",
            "format": "date-time",
            "type": "string"
          },
          "nickname": {
            "description": "User provided account nickname",
            "type": "string"
          }
        },
        "title": "Account Summary",
        "type": "object"
      },
      "account_template": {
        "properties": {
          "application_type": {
            "$ref": "#/components/schemas/application_type"
          },
          "description": {
            "description": "User provided account template description",
            "type": "string"
          },
          "id": {
            "description": "Generated ID for the template",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_enabled": {
            "description": "Whether this template can be used for account creation",
            "type": "boolean"
          },
          "name": {
            "description": "Unique account template name",
            "type": "string"
          },
          "template": {
            "$ref": "#/components/schemas/template_fields"
          }
        },
        "required": [
          "is_enabled",
          "name",
          "template"
        ],
        "type": "object"
      },
      "account_template_response": {
        "properties": {
          "application_type": {
            "$ref": "#/components/schemas/application_type"
          },
          "description": {
            "description": "Account template description",
            "type": "string"
          },
          "id": {
            "description": "Generated ID for the template",
            "format": "uuid",
            "type": "string"
          },
          "is_enabled": {
            "description": "Whether this template can be used for account creation",
            "type": "boolean"
          },
          "name": {
            "description": "Unique account template name",
            "type": "string"
          },
          "template": {
            "$ref": "#/components/schemas/template_fields_generic_response"
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          }
        },
        "required": [
          "is_enabled",
          "name",
          "template"
        ],
        "type": "object"
      },
      "account_type": {
        "description": "The type of the account. In lead mode, this always takes the value of the template. If not\nspecified in shadow mode, CHECKING will be assumed. Below mentioned are the account types:\n* SAVING: Savings account\n* CHECKING: Checking account\n* PREPAID: Prepaid account\n* LINE_OF_CREDIT: Line of Credit account\n* CHARGE_SECURED: Secured Charge account, e.g. for use in a Smart Charge Card offering\n* CHARGE_UNSECURED: (alpha) Unsecured Charge account\n* REVOLVING_CREDIT_SECURED: Secured Revolving Credit account\n* REVOLVING_CREDIT_UNSECURED: Unsecured Revolving Credit account\n* GENERAL_LEDGER: General Ledger account (alpha - cannot yet be created). In production, these can only be created or updated by a Synctera administrator.\n",
        "enum": [
          "CHARGE_SECURED",
          "CHARGE_UNSECURED",
          "CHECKING",
          "GENERAL_LEDGER",
          "LINE_OF_CREDIT",
          "PREPAID",
          "REVOLVING_CREDIT_SECURED",
          "REVOLVING_CREDIT_UNSECURED",
          "SAVING"
        ],
        "title": "Account Type",
        "type": "string"
      },
      "account_verification": {
        "description": "Information about the account verification process. If the account has not been verified, this will be null.\n",
        "discriminator": {
          "mapping": {
            "FINICITY": "#/components/schemas/finicity_account_verification",
            "MANUAL": "#/components/schemas/manual_account_verification",
            "PLAID": "#/components/schemas/plaid_account_verification"
          },
          "propertyName": "vendor"
        },
        "nullable": true,
        "oneOf": [
          {
            "$ref": "#/components/schemas/plaid_account_verification"
          },
          {
            "$ref": "#/components/schemas/finicity_account_verification"
          },
          {
            "$ref": "#/components/schemas/manual_account_verification"
          }
        ],
        "title": "Information about the account verification process",
        "type": "object"
      },
      "accrual_payout_schedule": {
        "enum": [
          "MONTHLY",
          "NONE"
        ],
        "type": "string"
      },
      "ach_instruction": {
        "properties": {
          "request": {
            "$ref": "#/components/schemas/outgoing_ach_request"
          },
          "type": {
            "enum": [
              "ACH"
            ],
            "type": "string"
          }
        },
        "required": [
          "request",
          "type"
        ],
        "type": "object"
      },
      "ach_request_hold_data": {
        "nullable": true,
        "properties": {
          "amount": {
            "type": "integer"
          },
          "duration": {
            "example": 2,
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "amount",
          "duration"
        ],
        "type": "object"
      },
      "ach_return_simulation_request": {
        "description": "Simulate receiving an ACH return",
        "properties": {
          "ach_id": {
            "description": "ID of an outgoing ACH transfer to be returned.",
            "example": "23a37f14-16eb-461d-9331-b78182adbad4",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "ach_id"
        ],
        "title": "Incoming ACH return simulation request",
        "type": "object"
      },
      "ach_simulation_response": {
        "type": "object"
      },
      "ach_transaction_simulation_request": {
        "description": "Simulate receiving an ACH transaction",
        "properties": {
          "account_number": {
            "description": "Number of the receiving account",
            "example": "123638791329",
            "type": "string"
          },
          "amount": {
            "description": "Amount to transfer in cents (e.g. 100 = $1). Generates a prenote if set to 0.",
            "example": 607,
            "maximum": 9999999999,
            "minimum": 0,
            "type": "integer"
          },
          "dc_sign": {
            "description": "The type of transaction (debit or credit) in relation to the receiving account. A credit is a transfer in and a debit is a transfer pulling money out of the receiving account.",
            "enum": [
              "credit",
              "debit"
            ],
            "example": "debit",
            "type": "string"
          },
          "effective_date": {
            "description": "Effective date of the transaction. Transactions with the current date or date in the past are posted immediately. Future-dated transactions are scheduled to be posted on the chosen date.",
            "example": "2022-03-18",
            "format": "date",
            "type": "string"
          }
        },
        "required": [
          "account_number",
          "amount",
          "dc_sign",
          "effective_date"
        ],
        "title": "Incoming ACH transaction simulation request",
        "type": "object"
      },
      "action": {
        "properties": {
          "data": {
            "type": "object"
          },
          "message": {
            "type": "string"
          },
          "timestamp": {
            "format": "date-time"
          }
        },
        "required": [
          "data",
          "message",
          "timestamp"
        ],
        "type": "object"
      },
      "add_accounts_request": {
        "properties": {
          "account_identifiers": {
            "$ref": "#/components/schemas/add_accounts_request_account_identifiers"
          },
          "account_owner_names": {
            "description": "The names of the account owners.",
            "items": {
              "example": "Jane Smith",
              "minLength": 1,
              "type": "string"
            },
            "minItems": 1,
            "type": "array"
          },
          "business_id": {
            "description": "The identifier for the business customer associated with this external account. Exactly one of `business_id` or `customer_id` must be specified.\n",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "currency": {
            "description": "ISO 4217 alphabetic currency code",
            "example": "USD",
            "pattern": "^[A-Z]{3}$",
            "type": "string"
          },
          "customer_id": {
            "description": "The identifier for the personal customer associated with this external account. Exactly one of `customer_id` or `business_id` must be specified.\n",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "customer_type": {
            "$ref": "#/components/schemas/ext_account_customer_type"
          },
          "metadata": {
            "description": "User-supplied metadata",
            "type": "object"
          },
          "nickname": {
            "description": "A user-meaningful name for the account",
            "example": "Vacation savings",
            "minLength": 1,
            "type": "string"
          },
          "routing_identifiers": {
            "$ref": "#/components/schemas/add_accounts_request_routing_identifiers"
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          },
          "type": {
            "description": "The type of the account",
            "enum": [
              "CHECKING",
              "CRYPTO_WALLET",
              "OTHER_BANK_ACCOUNT",
              "SAVINGS",
              "WALLET"
            ],
            "type": "string"
          },
          "vendor_account_id": {
            "description": "The ID of the vendor account, will be empty for MANUAL vendor",
            "example": "blgvvBlXw3cq5GMPwqB6s6q4dLKB9WcVqGDGo",
            "minLength": 1,
            "type": "string"
          },
          "verification": {
            "$ref": "#/components/schemas/account_verification"
          }
        },
        "required": [
          "account_identifiers",
          "account_owner_names",
          "customer_type",
          "routing_identifiers",
          "type"
        ],
        "type": "object"
      },
      "add_accounts_request_account_identifiers": {
        "description": "The identifiers for the account. At least one of `number` or `iban` must be specified. Account number or IBAN can be specified for international accounts. For domestic accounts, only account number is required.\n",
        "properties": {
          "iban": {
            "description": "The IBAN of the account. On write, Synctera will store the entire IBAN number; on read, we only return the last 4 characters.\n",
            "example": "LI4476584648937N59B00",
            "minLength": 1,
            "type": "string"
          },
          "number": {
            "description": "The unique identifier of the account. On write, Synctera will store the entire account number; on read, we only return the last 4 characters.\n",
            "example": "78277121",
            "minLength": 1,
            "type": "string"
          }
        },
        "title": "Identifiers for the account",
        "type": "object"
      },
      "add_accounts_request_routing_identifiers": {
        "properties": {
          "ach_routing_number": {
            "description": "The routing number used for US ACH payments.\n",
            "example": "756392185",
            "minLength": 1,
            "type": "string"
          },
          "bank_countries": {
            "description": "The countries that this bank operates the account in",
            "items": {
              "example": "US",
              "type": "string"
            },
            "minItems": 1,
            "type": "array"
          },
          "bank_name": {
            "description": "The name of the bank managing the account",
            "example": "Chase",
            "minLength": 1,
            "type": "string"
          },
          "eft_ca_routing_number": {
            "description": "> 🚧 Alpha > This is an Alpha property. Feedback from the community is welcome. We may make breaking changes to this property.\nThe 9 digit routing number used for EFT CA payments, identifying a Canadian bank. The format is 0xxxyyyyy where xxx is the institution number and yyyyy is the transit number. On write, Synctera will store the entire routing number; on read, we only return the last 4 characters.\n",
            "example": "02101140",
            "maxLength": 9,
            "minLength": 9,
            "type": "string"
          },
          "international_wire_details": {
            "$ref": "#/components/schemas/international_wire_details"
          },
          "network": {
            "$ref": "#/components/schemas/external_account_network"
          },
          "wire_routing_number": {
            "description": "The routing number used for US domestic wire payments.\n",
            "example": "915075033",
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "bank_countries",
          "bank_name"
        ],
        "title": "Identifiers for the bank",
        "type": "object"
      },
      "add_vendor_account_failure": {
        "properties": {
          "reason": {
            "$ref": "#/components/schemas/add_vendor_accounts_error_reason"
          },
          "reason_description": {
            "description": "A human-readable message describing the reason for the failure.",
            "type": "string"
          },
          "vendor_account_id": {
            "description": "The vendor account ID for the account that failed. For Plaid, this is an `account_id`.\n",
            "example": "blgvvBlXw3cq5GMPwqB6s6q4dLKB9WcVqGDGo",
            "type": "string"
          },
          "vendor_error_message": {
            "description": "The display_message returned by the vendor. Only returned if reason is set to `PROVIDER_ERROR`. For Plaid, this is the `display_message`.\n",
            "type": "string"
          },
          "vendor_request_id": {
            "description": "A unique identifier for the request from the vendor, which can be used for troubleshooting. Only returned if reason is set to `PROVIDER_ERROR`.\n",
            "type": "string"
          }
        },
        "required": [
          "reason",
          "reason_description",
          "vendor_account_id"
        ],
        "type": "object"
      },
      "add_vendor_accounts_error_reason": {
        "description": "A machine-readable code describing the reason for the failure.",
        "enum": [
          "ACCOUNT_NOT_FOUND",
          "DUPLICATE_ACCOUNT",
          "FAILED_VERIFICATION",
          "PROVIDER_ERROR",
          "UNSUPPORTED_ACCOUNT_TYPE"
        ],
        "type": "string"
      },
      "add_vendor_accounts_request": {
        "properties": {
          "business_id": {
            "description": "The identifier for the business customer associated with this external account. Exactly one of `business_id` or `customer_id` must be specified.\n",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "customer_id": {
            "description": "The identifier for the personal customer associated with this external account. Exactly one of `customer_id` or `business_id` must be specified.\n",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "customer_type": {
            "$ref": "#/components/schemas/ext_account_customer_type"
          },
          "vendor": {
            "$ref": "#/components/schemas/external_account_vendor_values"
          },
          "vendor_access_token": {
            "description": "The token provided to link external accounts. For Plaid, this is their `access_token`.\n",
            "example": "access-sandbox-de3ce8ef-33f8-452c-a685-8671031fc0f6",
            "minLength": 1,
            "type": "string"
          },
          "vendor_account_ids": {
            "description": "The list of vendor account IDs that the customer chose to link. For Plaid, these are `account_id`s.\n",
            "items": {
              "description": "The Plaid account_id.",
              "example": "blgvvBlXw3cq5GMPwqB6s6q4dLKB9WcVqGDGo",
              "minLength": 1,
              "type": "string"
            },
            "minItems": 1,
            "type": "array"
          },
          "vendor_customer_id": {
            "description": "The identifier provided by the vendor for the customer associated with this external account.\n",
            "example": 123,
            "type": "string"
          },
          "verify_owner": {
            "default": false,
            "description": "If true, Synctera will attempt to verify that the external account owner is the same as the customer by comparing external account data to customer data. At least 2 of the following fields must match: name, phone number, email, address. Verification is disabled by default.\n",
            "type": "boolean"
          }
        },
        "required": [
          "customer_type",
          "vendor"
        ],
        "type": "object"
      },
      "add_vendor_accounts_response": {
        "properties": {
          "added_accounts": {
            "items": {
              "$ref": "#/components/schemas/external_account"
            },
            "type": "array"
          },
          "deleted_accounts": {
            "items": {
              "$ref": "#/components/schemas/external_account"
            },
            "type": "array"
          },
          "failed_accounts": {
            "items": {
              "$ref": "#/components/schemas/add_vendor_account_failure"
            },
            "type": "array"
          }
        },
        "required": [
          "added_accounts",
          "failed_accounts"
        ],
        "type": "object"
      },
      "additional_data": {
        "description": "Contains additional information about the relationship.",
        "properties": {
          "title": {
            "description": "The professional role or position the person holds at the related organization.",
            "enum": [
              "DIRECTOR",
              "FOUNDER",
              "OFFICER"
            ],
            "type": "string"
          }
        },
        "required": [
          "title"
        ],
        "type": "object"
      },
      "additional_owner_data": {
        "description": "Contains additional information about the relationship.",
        "properties": {
          "percent_ownership": {
            "description": "Percentage ownership of the related business.",
            "example": 35.75,
            "exclusiveMinimum": true,
            "format": "double",
            "maximum": 100,
            "minimum": 0,
            "type": "number"
          }
        },
        "required": [
          "percent_ownership"
        ],
        "type": "object"
      },
      "address": {
        "properties": {
          "address_line_1": {
            "description": "Street address line 1",
            "example": "100 Main St.",
            "type": "string"
          },
          "address_line_2": {
            "description": "Street address line 2",
            "example": "Suite 99",
            "type": "string"
          },
          "address_type": {
            "description": "Specifies the address type.\n",
            "enum": [
              "BILLING",
              "LEGAL",
              "OPERATING",
              "OTHER",
              "SHIPPING"
            ],
            "example": "SHIPPING",
            "readOnly": true,
            "type": "string"
          },
          "city": {
            "description": "City",
            "example": "New York",
            "type": "string"
          },
          "country_code": {
            "description": "ISO-3166-1 Alpha-2 country code",
            "example": "US",
            "pattern": "^[A-Z]{2}$",
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "is_registered_agent": {
            "description": "Indicates whether an address is a registered agent. Omitted if the address is not a registered agent.",
            "example": true,
            "type": "boolean"
          },
          "nickname": {
            "description": "A nickname for the address. This is used to identify the address in the UI.\n",
            "example": "Home",
            "type": "string"
          },
          "postal_code": {
            "description": "Postal code.\nFor US, formats of 12345 or 12345-1234 are accepted.\nFor CA, formats of A1A 1A1 or A1A1A1 (regardless of case) are accepted, and will be converted to A1A 1A1 format.\n",
            "example": "28620",
            "type": "string"
          },
          "state": {
            "description": "State, region, province, or prefecture.\nThis is the ISO-3166-2 subdivision code, excluding the country prefix.\nFor example, TX for Texas USA or TAM for Tamaulipas Mexico.\nIts length varies by country, e.g. 2 characters for US, 3 for MX.\n",
            "example": "NY",
            "type": "string"
          }
        },
        "required": [
          "address_line_1",
          "country_code"
        ],
        "type": "object"
      },
      "address1": {
        "properties": {
          "address_line_1": {
            "description": "Street address line 1",
            "example": "100 Main St.",
            "maxLength": 100,
            "type": "string"
          },
          "address_line_2": {
            "description": "Street address line 2",
            "example": "Suite 99",
            "maxLength": 100,
            "type": "string"
          },
          "city": {
            "description": "City",
            "example": "New York",
            "type": "string"
          },
          "country_code": {
            "description": "ISO-3166-1 Alpha-2 country code",
            "example": "US",
            "type": "string"
          },
          "postal_code": {
            "description": "Postal code",
            "example": "49633",
            "type": "string"
          },
          "state": {
            "description": "State, region, province, or prefecture",
            "example": "NY",
            "type": "string"
          }
        },
        "required": [
          "address_line_1",
          "city",
          "country_code",
          "postal_code",
          "state"
        ],
        "type": "object"
      },
      "address2": {
        "properties": {
          "address_line_1": {
            "type": "string"
          },
          "address_line_2": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "country_code": {
            "type": "string"
          },
          "postal_code": {
            "type": "string"
          },
          "state": {
            "type": "string"
          }
        },
        "title": "Address",
        "type": "object"
      },
      "address3": {
        "properties": {
          "address_line_1": {
            "description": "street address",
            "example": "321 Main St",
            "type": "string"
          },
          "address_line_2": {
            "description": "street address",
            "example": "Apt 34",
            "type": "string"
          },
          "city": {
            "description": "city",
            "example": "Chicago",
            "type": "string"
          },
          "country_code": {
            "description": "country code",
            "example": "US",
            "type": "string"
          },
          "postal_code": {
            "description": "postal code",
            "example": "60622",
            "type": "string"
          },
          "state": {
            "description": "state",
            "example": "IL",
            "type": "string"
          }
        },
        "title": "Address",
        "type": "object"
      },
      "address_base": {
        "properties": {
          "address_line_1": {
            "description": "Street address line 1",
            "example": "100 Main St.",
            "type": "string"
          },
          "address_line_2": {
            "description": "Street address line 2",
            "example": "Suite 99",
            "type": "string"
          },
          "city": {
            "description": "City",
            "example": "New York",
            "type": "string"
          },
          "country_code": {
            "description": "ISO-3166-1 Alpha-2 country code",
            "example": "US",
            "pattern": "^[A-Z]{2}$",
            "type": "string"
          },
          "is_active": {
            "description": "Whether the address is active or not",
            "example": true,
            "type": "boolean"
          },
          "is_registered_agent": {
            "description": "Indicates whether an address is a registered agent. Omitted if the address is not a registered agent.",
            "example": true,
            "type": "boolean"
          },
          "nickname": {
            "description": "A nickname for the address. This is used to identify the address in the UI.\n",
            "example": "Home",
            "type": "string"
          },
          "postal_code": {
            "description": "Postal code.\nFor US, formats of 12345 or 12345-1234 are accepted.\nFor CA, formats of A1A 1A1 or A1A1A1 (regardless of case) are accepted, and will be converted to A1A 1A1 format.\n",
            "example": "28620",
            "type": "string"
          },
          "state": {
            "description": "State, region, province, or prefecture.\nThis is the ISO-3166-2 subdivision code, excluding the country prefix.\nFor example, TX for Texas USA or TAM for Tamaulipas Mexico.\nIts length varies by country, e.g. 2 characters for US, 3 for MX.\n",
            "example": "NY",
            "type": "string"
          }
        },
        "type": "object"
      },
      "address_lines": {
        "properties": {
          "address_line_1": {
            "description": "address line 1 from wire file",
            "readOnly": true,
            "type": "string"
          },
          "address_line_2": {
            "description": "address line 2 from wire file",
            "readOnly": true,
            "type": "string"
          },
          "address_line_3": {
            "description": "address line 3 from wire file",
            "readOnly": true,
            "type": "string"
          }
        },
        "title": "Address Lines",
        "type": "object"
      },
      "address_patch": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/address_base"
          }
        ]
      },
      "address_post": {
        "allOf": [
          {
            "properties": {
              "address_type": {
                "description": "Specifies the address type.\n",
                "enum": [
                  "BILLING",
                  "LEGAL",
                  "OPERATING",
                  "OTHER",
                  "SHIPPING"
                ],
                "example": "SHIPPING",
                "type": "string"
              },
              "business_id": {
                "description": "The identifier for the business customer associated with address.\n",
                "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
                "format": "uuid",
                "type": "string"
              },
              "customer_id": {
                "description": "The identifier for the personal customer associated with address.\n",
                "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
                "format": "uuid",
                "type": "string"
              }
            },
            "required": [
              "address_line_1",
              "address_type",
              "city",
              "country_code",
              "state"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/address_base"
          }
        ]
      },
      "address_response": {
        "allOf": [
          {
            "$ref": "#/components/schemas/address_response_base"
          },
          {
            "$ref": "#/components/schemas/address"
          }
        ]
      },
      "address_response_base": {
        "properties": {
          "business_id": {
            "description": "The identifier for the business customer associated with address.\n",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "creation_date": {
            "description": "Date and time when the address was created.",
            "example": "2019-01-01T00:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "customer_id": {
            "description": "The identifier for the personal customer associated with address.\n",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "is_active": {
            "description": "Whether the address is active or not",
            "example": true,
            "type": "boolean"
          },
          "last_updated_time": {
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "creation_date",
          "id",
          "is_active",
          "last_updated_time"
        ],
        "type": "object"
      },
      "addresses_list": {
        "allOf": [
          {
            "properties": {
              "addresses": {
                "description": "Array of Addresses",
                "items": {
                  "$ref": "#/components/schemas/address_response"
                },
                "type": "array"
              }
            },
            "required": [
              "addresses"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "adhoc_verification_request": {
        "description": "Basic identifying information about the person being verified.\n",
        "properties": {
          "payee_id": {
            "description": "Synctera party (non-customer) who is receiving money from a customer (the payer)",
            "format": "uuid",
            "type": "string"
          },
          "payer_id": {
            "description": "Synctera customer who is sending money to a non-customer (the payee)",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "payee_id",
          "payer_id"
        ],
        "type": "object"
      },
      "adhoc_verification_response": {
        "properties": {
          "id": {
            "description": "Unique ID for this verification result.",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "matching_watchlists": {
            "description": "list of watchlists that the subject of the request matched\n",
            "items": {
              "enum": [
                "US_OFAC"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "result": {
            "$ref": "#/components/schemas/verification_result"
          },
          "vendor_info": {
            "$ref": "#/components/schemas/vendor_info4"
          }
        },
        "required": [
          "id",
          "matching_watchlists",
          "result"
        ],
        "type": "object"
      },
      "apple_digital_wallet_provision_request": {
        "properties": {
          "certificates": {
            "description": "Base64-encoded leaf and sub-CA certificates provided by Apple. The first element of the array should be the leaf certificate, followed by the sub-CA.",
            "items": {
              "description": "Array of Base64 encoded certificates from Apple.",
              "type": "string"
            },
            "type": "array"
          },
          "device_type": {
            "$ref": "#/components/schemas/device_type"
          },
          "nonce": {
            "description": "One-time-use nonce provided by Apple for security purposes.",
            "type": "string"
          },
          "nonce_signature": {
            "description": "Apple-provided signature to the nonce.",
            "type": "string"
          },
          "provisioning_app_version": {
            "$ref": "#/components/schemas/provisioning_app_version"
          }
        },
        "required": [
          "certificates",
          "device_type",
          "nonce",
          "nonce_signature",
          "provisioning_app_version"
        ],
        "type": "object"
      },
      "apple_digital_wallet_provision_response": {
        "properties": {
          "activation_data": {
            "type": "string"
          },
          "card_id": {
            "$ref": "#/components/schemas/card_id"
          },
          "created_time": {
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          },
          "encrypted_pass_data": {
            "type": "string"
          },
          "ephemeral_public_key": {
            "type": "string"
          },
          "last_modified_time": {
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "application_type": {
        "description": "The type of the application to require.\n* CREDIT: Credit application\n* LINE_OF_CREDIT: (Deprecated) Line of credit application (if provided, this will be converted to a CREDIT type in the response)\n* RESTRICTED_ACCOUNT: restricted account application\n",
        "enum": [
          "CREDIT",
          "LINE_OF_CREDIT",
          "RESTRICTED_ACCOUNT"
        ],
        "title": "Application Type",
        "type": "string"
      },
      "auth_request_model": {
        "properties": {
          "amount": {
            "description": "The amount of the transaction in the smallest whole denomination of the applicable currency (eg. For USD use cents)",
            "type": "integer"
          },
          "card_acceptor": {
            "$ref": "#/components/schemas/card_acceptor_model"
          },
          "card_id": {
            "format": "uuid",
            "type": "string"
          },
          "card_options": {
            "$ref": "#/components/schemas/card_options"
          },
          "cash_back_amount": {
            "type": "integer"
          },
          "is_pre_auth": {
            "default": false,
            "type": "boolean"
          },
          "mid": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "network_fees": {
            "items": {
              "$ref": "#/components/schemas/network_fee_model"
            },
            "type": "array"
          },
          "pin": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "transaction_options": {
            "$ref": "#/components/schemas/transaction_options"
          }
        },
        "required": [
          "amount",
          "card_id",
          "mid"
        ],
        "type": "object"
      },
      "authenticate_3ds_request": {
        "description": "Details for an External Card Transfer 3-D Secure Authentication request",
        "properties": {
          "challenge_jwt": {
            "description": "The JWT recieved from the 3DS challenge",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the 3DS authentication",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "challenge_jwt",
          "id"
        ],
        "type": "object"
      },
      "authenticate_3ds_response": {
        "description": "Details for an External Card Transfer 3-D Secure Authentication response",
        "properties": {
          "id": {
            "description": "The unique identifier of the 3DS authentication",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "status": {
            "description": "Status of the 3DS authentication",
            "enum": [
              "FAILED",
              "SUCCESS"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "status"
        ],
        "type": "object"
      },
      "authorization_advice_model": {
        "properties": {
          "amount": {
            "description": "The amount of the transaction in the smallest whole denomination of the applicable currency (eg. For USD use cents)",
            "type": "integer"
          },
          "network_fees": {
            "items": {
              "$ref": "#/components/schemas/network_fee_model"
            },
            "type": "array"
          },
          "original_transaction_id": {
            "format": "uuid",
            "type": "string"
          },
          "transaction_options": {
            "$ref": "#/components/schemas/transaction_options"
          }
        },
        "required": [
          "amount",
          "original_transaction_id"
        ],
        "type": "object"
      },
      "auto_payment_period": {
        "description": "The number of days past the billing period to initiate an auto payment. Only applicable for accounts with type `CHARGE_SECURED`, where the account holder has opted in for auto payment functionality. This value must be lower than or equal the `grace_period` setting on the account. If this value is 0, the auto payment will happen on the same day as the statement is generated. Auto payment only occurs if regular payments are not received on time.\n",
        "example": 20,
        "maximum": 28,
        "minimum": 0,
        "type": "integer"
      },
      "balance": {
        "properties": {
          "balance": {
            "description": "balance in ISO 4217 minor currency units. Unit in cents.",
            "example": 2399,
            "format": "int64",
            "readOnly": true,
            "type": "integer"
          },
          "type": {
            "$ref": "#/components/schemas/balance_type"
          }
        },
        "required": [
          "balance",
          "type"
        ],
        "type": "object"
      },
      "balance_ceiling": {
        "properties": {
          "balance": {
            "description": "Maximum balance in the account's currency. Unit in cents.",
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "linked_account_id": {
            "description": "ID of linked backing account for just-in-time (JIT) funding of transactions to maintain the balance ceiling\n",
            "format": "uuid",
            "type": "string"
          },
          "overflow_account_id": {
            "deprecated": true,
            "description": "ID of linked backing account for just-in-time (JIT) funding of transactions to maintain the balance ceiling\nThis attribute is a deprecated alias for linked_account_id.\n",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "balance"
        ],
        "type": "object"
      },
      "balance_floor": {
        "properties": {
          "balance": {
            "description": "Minimum balance in the account's currency. Unit in cents.",
            "format": "int64",
            "type": "integer"
          },
          "linked_account_id": {
            "description": "ID of linked backing account for just-in-time (JIT) funding of transactions to maintain the balance floor\n",
            "format": "uuid",
            "type": "string"
          },
          "overdraft_account_id": {
            "deprecated": true,
            "description": "ID of linked backing account for just-in-time (JIT) funding of transactions to maintain the balance floor\nThis attribute is a deprecated alias for linked_account_id.\n",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "balance"
        ],
        "type": "object"
      },
      "balance_inquiry_request_model": {
        "properties": {
          "account_type": {
            "enum": [
              "checking",
              "credit",
              "savings"
            ],
            "type": "string"
          },
          "card_acceptor": {
            "$ref": "#/components/schemas/card_acceptor_model"
          },
          "card_id": {
            "format": "uuid",
            "type": "string"
          },
          "mid": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "network_fees": {
            "items": {
              "$ref": "#/components/schemas/network_fee_model"
            },
            "type": "array"
          },
          "pin": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "account_type",
          "card_acceptor",
          "card_id",
          "mid"
        ],
        "type": "object"
      },
      "balance_type": {
        "description": "* `ACCOUNT_BALANCE`: The posted balance of the account. For a banking account, e.g.\n  `CHECKING` or `SAVING`, this is a measure of the sum of credits minus debits for all\n  posted transactions. For a lending account, e.g. `CHARGE_SECURED` or `LINE_OF_CREDIT`,\n  this is a measure of the sum of debits minus credits for all posted transactions. This\n  value can be negative.\n\n* `AVAILABLE_BALANCE`: The available balance of the account, which is the amount available\n  to spend, or the spending power. For a banking account, e.g. `CHECKING` or `SAVING`, this\n  is a measure of the account balance minus any pending debits. For an unsecured lending\n  account, e.g. `CHARGE_UNSECURED` or `LINE_OF_CREDIT`, this is a measure of available\n  credit, which is its credit limit minus the account balance, minus any pending debits.\n  For a `CHARGE_SECURED` account, it equals the `AVAILABLE_BALANCE` of the linked\n  security account. This value will never be negative.\n\n* `ACCRUED_INTEREST_MTD`: The amount of accrued but unposted interest. This value may\n  fluctuate, as new transactions can affect interest amounts. Treat accrued interest as\n  pending for the billing month until it is posted at the end of the billing period.\n\n* `PAYMENTS_RECEIVED_MTD`: The amount of payment received to date for the billing month.\n",
        "enum": [
          "ACCOUNT_BALANCE",
          "ACCRUED_INTEREST_MTD",
          "AVAILABLE_BALANCE",
          "PAYMENTS_RECEIVED_MTD"
        ],
        "type": "string"
      },
      "ban_status": {
        "description": "(beta) Ban status of the person. One of the following:\n* `ALLOWED` – person is not banned or suspended\n* `SUSPENDED` - person is manually suspended due to fraud\n* `BANNED` – person is banned due to matching ban rules\nNote: changing the ban status to or from BANNED can only be performed by the Synctera platform based on ban rules.\n",
        "enum": [
          "ALLOWED",
          "BANNED",
          "SUSPENDED"
        ],
        "example": "ALLOWED",
        "type": "string"
      },
      "barcode": {
        "description": "The barcode associated with a card",
        "example": 10044461864615598000,
        "pattern": "\\d{20}",
        "type": "string"
      },
      "base": {
        "properties": {
          "addresses": {
            "description": "All of the customer's addresses",
            "items": {
              "$ref": "#/components/schemas/address"
            },
            "readOnly": true,
            "type": "array"
          },
          "classifications": {
            "$ref": "#/components/schemas/classifications"
          },
          "compliance_restrictions": {
            "description": "The types of compliance that the business needs to adhere to\n* `LICENSED_CANNABIS` – A type of compliance restriction where the business would need a cannabis license in order to operate.\n",
            "items": {
              "enum": [
                "LICENSED_CANNABIS"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "creation_time": {
            "description": "The date and time the resource was created.",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "customer_active": {
            "description": "The date and time this business became a bank customer.",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "ein": {
            "description": "U.S. Employer Identification Number (EIN) for this business, in the format xx-xxxxxxx.",
            "example": "12-3456789",
            "type": "string"
          },
          "email": {
            "description": "Business's email.",
            "example": "alice@example.com",
            "type": "string"
          },
          "entity_name": {
            "description": "Business's legal name.",
            "example": "Apex Corporation",
            "type": "string"
          },
          "formation_date": {
            "description": "Date the business was legally registered in RFC 3339 full-date format (YYYY-MM-DD).",
            "example": "2000-01-01",
            "format": "date",
            "type": "string"
          },
          "formation_state": {
            "description": "U.S. state where the business is legally registered (2-letter abbreviation).",
            "example": "NY",
            "type": "string"
          },
          "has_accounts": {
            "$ref": "#/components/schemas/has_accounts"
          },
          "id": {
            "description": "Business's unique identifier.",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_customer": {
            "$ref": "#/components/schemas/is_customer"
          },
          "last_updated_time": {
            "description": "The date and time the resource was last updated.",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "legal_address": {
            "$ref": "#/components/schemas/legal_address"
          },
          "metadata": {
            "$ref": "#/components/schemas/metadata"
          },
          "phone_number": {
            "description": "Business's phone number with country code in E.164 format. Must have a valid country code. Area code and local phone number are not validated.",
            "example": "+14374570680",
            "pattern": "^\\+[1-9]\\d{1,14}$",
            "type": "string"
          },
          "status": {
            "description": "Status of the business. One of the following:\n* `PROSPECT` – a potential customer, used for information-gathering and disclosures.\n* `ACTIVE` –  is an integrator defined status.  Integrators should set a business to active if they believe the person to be qualified for conducting business.  Synctera will combine this status with other statuses such a verification to determine if the business is eligible for specific actions such as initiating transactions or issuing a card.\n* `FROZEN` – business's actions are blocked for security, legal, or other reasons.\n* `SANCTION` – business is on a sanctions list and should be carefully monitored.\n* `DISSOLVED` – an inactive status indicating a business entity has filed articles of dissolution or a certificate of termination to terminate its existence.\n* `CANCELLED` – an inactive status indicating that a business entity has filed a cancellation or has failed to file its periodic report after notice of forfeiture of its rights to do business.\n* `SUSPENDED` – an inactive status indicating that the business entity has lost the right to operate in it's registered jurisdiction.\n* `MERGED` – an inactive status indicating that the business entity has terminated existence by merging into another entity.\n* `INACTIVE` – an inactive status indicating that the business entity is no longer active.\n* `CONVERTED` – An inactive status indicating that the business entity has been converted to another type of business entity in the same jurisdiction.\n",
            "enum": [
              "ACTIVE",
              "CANCELLED",
              "CONVERTED",
              "DISSOLVED",
              "FROZEN",
              "INACTIVE",
              "MERGED",
              "PROSPECT",
              "SANCTION",
              "SUSPENDED"
            ],
            "type": "string"
          },
          "structure": {
            "description": "Business's legal structure.",
            "enum": [
              "CORPORATION",
              "LLC",
              "NON_PROFIT",
              "OTHER",
              "PARTNERSHIP",
              "SOLE_PROPRIETORSHIP",
              "S_CORPORATION"
            ],
            "example": "CORPORATION",
            "type": "string"
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          },
          "trade_names": {
            "description": "All registered 'doing business as' (DBA) or trade names for this business.",
            "example": [
              "Apex",
              "Apex LLC",
              "CorporationID#77231"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "verification_last_run": {
            "description": "Date and time KYB verification was last run on the business.",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "verification_status": {
            "$ref": "#/components/schemas/verification_status"
          },
          "website": {
            "description": "Business's website.",
            "example": "https://example.com",
            "type": "string"
          }
        },
        "type": "object"
      },
      "base_account_verification": {
        "properties": {
          "creation_time": {
            "description": "The time at which verification was first completed.",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          },
          "last_updated_time": {
            "description": "The time at which verification was last updated.",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "description": "The status of verification",
            "enum": [
              "UNVERIFIED",
              "VERIFIED"
            ],
            "type": "string"
          },
          "vendor": {
            "description": "The vendor used for verifying the account",
            "enum": [
              "FINICITY",
              "MANUAL",
              "PLAID"
            ],
            "type": "string"
          }
        },
        "required": [
          "status",
          "vendor"
        ],
        "title": "Information about account verification",
        "type": "object"
      },
      "base_card": {
        "allOf": [
          {
            "properties": {
              "account_id": {
                "description": "The ID of the account to which the card will be linked",
                "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
                "format": "uuid",
                "type": "string"
              },
              "business_id": {
                "description": "The business ID associated with this card. If no customer_id is supplied, a card can still be issued to a business, but cannot be activated or used until a customer is assigned via the PATCH /cards/{card_id} endpoint.",
                "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
                "format": "uuid",
                "type": "string"
              },
              "card_product_id": {
                "description": "The card product to which the card is attached",
                "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
                "format": "uuid",
                "type": "string"
              },
              "creation_time": {
                "description": "The timestamp representing when the card issuance request was made",
                "example": "2010-05-06T12:23:34.321Z",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "customer_id": {
                "description": "The ID of the customer to whom the card will be issued. If a business_id is passed, but a customer_id not passed at the time of card creation the card cannot be activated or used for spend until it's assigned to a human customer via the PATCH /cards/{card_id} endpoint. If no business_id is passed, a customer_id is required.",
                "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
                "format": "uuid",
                "type": "string"
              },
              "emboss_name": {
                "$ref": "#/components/schemas/emboss_name"
              },
              "expiration_month": {
                "example": "06",
                "readOnly": true,
                "type": "string"
              },
              "expiration_time": {
                "description": "The timestamp representing when the card would expire at",
                "example": "2010-05-06T12:23:34.321Z",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "expiration_year": {
                "example": "25",
                "readOnly": true,
                "type": "string"
              },
              "id": {
                "description": "Card ID",
                "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
                "format": "uuid",
                "readOnly": true,
                "type": "string"
              },
              "is_pin_set": {
                "default": false,
                "description": "indicates whether a pin has been set on the card",
                "example": true,
                "readOnly": true,
                "type": "boolean"
              },
              "last_four": {
                "description": "The last 4 digits of the card PAN",
                "example": "1234",
                "readOnly": true,
                "type": "string"
              },
              "last_modified_time": {
                "description": "The timestamp representing when the card was last modified at",
                "example": "2010-05-06T12:23:34.321Z",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "metadata": {
                "$ref": "#/components/schemas/card_metadata"
              },
              "reissue_reason": {
                "description": "This is the reason the card needs to be reissued, if any. The reason determines several behaviours:\n  - whether or not the new card will use the same PAN as the original card\n  - the old card will be terminated and if so, when it will be terminated\n\nReason                 | Same PAN | Terminate Old Card\n---------------------- | -------- | ------------------\nEXPIRATION             | yes      | on activation\nLOST                   | no       | immediately\nSTOLEN                 | no       | immediately\nDAMAGED                | yes      | on activation\nVIRTUAL_TO_PHYSICAL(*) | yes      | on activation\nPRODUCT_CHANGE         | yes      | on activation\nNAME_CHANGE(**)        | yes      | on activation\nAPPEARANCE             | yes      | on activation\n\n(*) VIRTUAL_TO_PHYSICAL is deprecated. Please use PRODUCT_CHANGE whenever reissuing from one\ncard product to another, including from a virtual product to a physical product.\n\n(**) NAME_CHANGE is deprecated. Please use APPEARANCE whenever reissuing in order to change the\nappearance of a card, such as the printed name or custom image.\n\nFor all reasons, the new card will use the same PIN as the original card and digital wallet tokens will\nreassigned to the new card\n",
                "enum": [
                  "APPEARANCE",
                  "DAMAGED",
                  "EXPIRATION",
                  "LOST",
                  "NAME_CHANGE",
                  "PRODUCT_CHANGE",
                  "STOLEN",
                  "VIRTUAL_TO_PHYSICAL"
                ],
                "type": "string"
              },
              "reissued_from_id": {
                "description": "When reissuing a card, specify the card to be replaced here. When getting a card's details, if this card was issued as a reissuance of another card, this ID refers to the card was replaced. If this field is set, then reissue_reason must also be set.\n",
                "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
                "format": "uuid",
                "type": "string"
              },
              "reissued_to_id": {
                "description": "If this card was reissued, this ID refers to the card that replaced it.",
                "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
                "format": "uuid",
                "readOnly": true,
                "type": "string"
              },
              "timestamp_pin_set": {
                "description": "Time when the PIN was last set or changed.",
                "example": "2010-05-06T12:23:34.321Z",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "type": {
                "$ref": "#/components/schemas/card_type"
              }
            },
            "required": [
              "form"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/card_format"
          }
        ]
      },
      "base_customer": {
        "properties": {
          "addresses": {
            "description": "All of the customer's addresses",
            "items": {
              "$ref": "#/components/schemas/address"
            },
            "readOnly": true,
            "type": "array"
          },
          "ban_status": {
            "$ref": "#/components/schemas/ban_status"
          },
          "classifications": {
            "$ref": "#/components/schemas/classifications"
          },
          "creation_time": {
            "description": "The date and time the resource was created.",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "email": {
            "description": "Customer's email",
            "example": "alice@example.com",
            "type": "string"
          },
          "has_accounts": {
            "$ref": "#/components/schemas/has_accounts"
          },
          "id": {
            "description": "Customer unique identifier",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "kyc_exempt": {
            "description": "Customer's KYC exemption",
            "readOnly": true,
            "type": "boolean"
          },
          "kyc_last_run": {
            "description": "Date and time KYC was last run on the customer",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "kyc_status": {
            "$ref": "#/components/schemas/customer_kyc_status"
          },
          "last_updated_time": {
            "description": "The date and time the resource was last updated.",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "legal_address": {
            "$ref": "#/components/schemas/legal_address"
          },
          "metadata": {
            "description": "User-supplied metadata. Do not use to store PII.",
            "type": "object"
          },
          "middle_name": {
            "description": "Customer's middle name",
            "example": "Anne",
            "type": "string"
          },
          "note": {
            "description": "Add an optional note when creating or updating a customer. A note is required when updating a customers's ban_status between SUSPENDED and ALLOWED.",
            "type": "string",
            "writeOnly": true
          },
          "phone_number": {
            "description": "Customer's mobile phone number with country code in E.164 format. Must have a valid country code. Area code and local phone number are not validated.",
            "example": "+14374570680",
            "pattern": "^\\+[1-9]\\d{1,14}$",
            "type": "string"
          },
          "related_customers": {
            "deprecated": true,
            "description": "Customer's relationships with other accounts eg. guardian. This property is no longer supported. Setting it will return an error.",
            "items": {
              "$ref": "#/components/schemas/relationship"
            },
            "type": "array"
          },
          "shipping_address": {
            "$ref": "#/components/schemas/shipping_address"
          },
          "ssn": {
            "description": "Customer's full tax ID eg SSN formatted with hyphens. This optional parameter is required when running KYC on a customer. Input must match the pattern ^\\d{3}-\\d{2}-\\d{4}$. The response contains the last 4 digits only (e.g. 6789).",
            "example": "123-45-6789",
            "type": "string"
          },
          "ssn_source": {
            "$ref": "#/components/schemas/ssn_source"
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          }
        },
        "type": "object"
      },
      "base_disclosure": {
        "properties": {
          "acknowledging_person_id": {
            "description": "Unique ID for the person acknowledging the disclosure. Applicable for disclosures where the person acknowledging is different from the subject of the disclosure. Required for OWNER_CERTIFICATION disclosures.",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "business_id": {
            "$ref": "#/components/schemas/business_id1"
          },
          "creation_time": {
            "description": "The date and time the resource was created.",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "disclosure_date": {
            "description": "Date and time the disclosure was made.",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          },
          "event_type": {
            "description": "Describes how the disclosure was shown and what the user did as a result. One of the following:\n* `DISPLAYED` —\n    The document was made visible to the user,\n    but they did not interact with it.\n\n* `VIEWED` —\n    The document was made visible to the user,\n    and they interacted enough to see the whole document (e.g. scrolled to the bottom).\n\n* `ACKNOWLEDGED` —\n    The document was made visible to the user,\n    and they took positive action to confirm that they have read and accepted the document.",
            "enum": [
              "ACKNOWLEDGED",
              "DISPLAYED",
              "VIEWED"
            ],
            "example": "ACKNOWLEDGED",
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "last_updated_time": {
            "description": "The date and time the resource was last updated.",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/metadata"
          },
          "person_id": {
            "$ref": "#/components/schemas/person_id"
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          },
          "type": {
            "$ref": "#/components/schemas/disclosure_type"
          },
          "version": {
            "$ref": "#/components/schemas/version"
          }
        },
        "type": "object"
      },
      "base_person": {
        "properties": {
          "ban_status": {
            "$ref": "#/components/schemas/ban_status"
          },
          "chosen_name": {
            "description": "Person's chosen name.",
            "example": "Annie",
            "type": "string"
          },
          "creation_time": {
            "description": "The date and time the resource was created.",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "customer_active": {
            "description": "The date and time this person became a bank customer.",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "dob": {
            "description": "Person's date of birth in RFC 3339 full-date format (YYYY-MM-DD). Must be on or after 1900-01-01 and before current date.",
            "example": "2000-01-01",
            "format": "date",
            "type": "string"
          },
          "email": {
            "description": "Person's email.",
            "example": "alice@example.com",
            "type": "string"
          },
          "first_name": {
            "description": "Person's first name.",
            "example": "Jane",
            "type": "string"
          },
          "has_accounts": {
            "$ref": "#/components/schemas/has_accounts"
          },
          "id": {
            "description": "Person's unique identifier.",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_customer": {
            "$ref": "#/components/schemas/is_customer"
          },
          "is_user": {
            "$ref": "#/components/schemas/is_user"
          },
          "last_name": {
            "description": "Person's last name.",
            "example": "Smith",
            "type": "string"
          },
          "last_updated_time": {
            "description": "The date and time the resource was last updated.",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "legal_address": {
            "$ref": "#/components/schemas/legal_address"
          },
          "metadata": {
            "$ref": "#/components/schemas/metadata"
          },
          "middle_name": {
            "description": "Person's middle name.",
            "example": "Anne",
            "type": "string"
          },
          "phone_number": {
            "description": "Person's mobile phone number with country code in E.164 format. Must have a valid country code. Area code and local phone number are not validated",
            "example": "+14374570680",
            "pattern": "^\\+[1-9]\\d{1,14}$",
            "type": "string"
          },
          "shipping_address": {
            "$ref": "#/components/schemas/shipping_address"
          },
          "ssn": {
            "description": "Person's full tax ID eg SSN formatted with hyphens. The response contains the last 4 digits only (e.g. 6789).",
            "example": "123-45-6789",
            "type": "string"
          },
          "ssn_source": {
            "$ref": "#/components/schemas/ssn_source"
          },
          "status": {
            "$ref": "#/components/schemas/person_status"
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          },
          "verification_last_run": {
            "description": "Date and time KYC verification was last run on the person.",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "verification_status": {
            "$ref": "#/components/schemas/verification_status"
          }
        },
        "type": "object"
      },
      "base_statement": {
        "allOf": [
          {
            "$ref": "#/components/schemas/statement_summary"
          },
          {
            "properties": {
              "account_summary": {
                "$ref": "#/components/schemas/account_summary"
              },
              "authorized_signer": {
                "items": {
                  "$ref": "#/components/schemas/person"
                },
                "readOnly": true,
                "type": "array"
              },
              "closing_balance": {
                "description": "The account balance at the end of the statement period, in ISO 4217 minor currency units.",
                "format": "int64",
                "type": "integer"
              },
              "customer_service_details": {
                "$ref": "#/components/schemas/customer_service_details"
              },
              "disclosure": {
                "type": "string"
              },
              "joint_account_holders": {
                "items": {
                  "$ref": "#/components/schemas/person"
                },
                "readOnly": true,
                "type": "array"
              },
              "opening_balance": {
                "description": "The account balance at the start of the statement period, in ISO 4217 minor currency units.",
                "format": "int64",
                "type": "integer"
              },
              "primary_account_holder_business": {
                "$ref": "#/components/schemas/business1"
              },
              "primary_account_holder_personal": {
                "$ref": "#/components/schemas/person"
              },
              "transactions": {
                "deprecated": true,
                "description": "This attribute is deprecated and will be removed in a future API version. Use `GET /v0/statements/{statement_id}/transactions` instead.\n",
                "items": {
                  "$ref": "#/components/schemas/transaction"
                },
                "type": "array"
              },
              "transactions_omitted": {
                "description": "Only appears in `statement.created` webhook payloads. Indicates that the `transactions` attribute was emptied due to webhook size constraints. If this attribute returns `true`, you may use  `GET /v0/statements/{statement_id}/transactions` to retrieve the full list.\n",
                "type": "boolean"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "base_template_fields": {
        "properties": {
          "account_type": {
            "$ref": "#/components/schemas/account_type"
          },
          "bank_account_id": {
            "description": "The bank account ID for this account. This is a unique identifier for the bank side account that this Synctera account belongs to. This field can be auto filled if only one bank account of the appropriate type exist for the tenant of concern.\n",
            "format": "uuid",
            "type": "string"
          },
          "bank_country": {
            "description": "Bank country of the account. ISO 3166-1 Alpha-2 or Alpha-3 country code.",
            "example": "US",
            "pattern": "^[A-Z]{2,3}$",
            "type": "string"
          },
          "currency": {
            "description": "Account currency. ISO 4217 alphabetic currency code",
            "example": "USD",
            "pattern": "^[A-Z]{3}$",
            "type": "string"
          }
        },
        "required": [
          "account_type",
          "bank_country",
          "currency"
        ],
        "type": "object"
      },
      "billing_address": {
        "properties": {
          "address": {
            "type": "string"
          },
          "compressed_zip": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "zip": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "billing_frequency": {
        "description": "The frequency of billing cycles. Along with the start date, this will determine the start and end of each cycle.\n",
        "enum": [
          "ANNUALLY",
          "BI_WEEKLY",
          "DAILY",
          "MONTHLY",
          "SEMI_MONTHLY",
          "WEEKLY"
        ],
        "type": "string"
      },
      "billing_period": {
        "description": "The scheme for determining an account's billing period.\n",
        "properties": {
          "frequency": {
            "$ref": "#/components/schemas/billing_frequency"
          },
          "start_date": {
            "description": "The first day of the first billing cycle for this account. For a monthly billing cycle, this would determine the day of the month each billing cycle will start on. Note that, although this is returned as a UTC timestamp, the date always corresponds to the bank's calendar, and therefore the time and timezone should be ignored.\n",
            "example": "2022-01-01T00:00:00Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "frequency",
          "start_date"
        ],
        "type": "object"
      },
      "bin_prefix": {
        "description": "The BIN number that prefixes a card PAN (first 6 or 8 digits)",
        "example": 123456,
        "pattern": "^(\\d{6}|\\d{8})$",
        "type": "string"
      },
      "business": {
        "allOf": [
          {
            "required": [
              "is_customer",
              "status"
            ]
          },
          {
            "$ref": "#/components/schemas/base"
          }
        ],
        "description": "Represents a business customer.",
        "type": "object"
      },
      "business1": {
        "properties": {
          "creation_time": {
            "format": "date-time",
            "type": "string"
          },
          "ein": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "entity_name": {
            "type": "string"
          },
          "formation_date": {
            "format": "date",
            "type": "string"
          },
          "formation_state": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "last_updated_time": {
            "format": "date-time",
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "structure": {
            "type": "string"
          },
          "trade_names": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "verification_last_run": {
            "format": "date-time",
            "type": "string"
          },
          "verification_status": {
            "type": "string"
          }
        },
        "title": "Business",
        "type": "object"
      },
      "business_business_owner_relationship": {
        "allOf": [
          {
            "$ref": "#/components/schemas/patch_business_business_owner_relationship"
          },
          {
            "required": [
              "additional_data",
              "from_business_id",
              "to_business_id"
            ]
          }
        ],
        "description": "Denotes the relationship between specified businesses.",
        "type": "object"
      },
      "business_id": {
        "description": "The unique identifier of a business",
        "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
        "format": "uuid",
        "type": "string"
      },
      "business_id1": {
        "description": "Unique ID for the business. Exactly one of `business_id` or `person_id` must be set.\n",
        "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
        "format": "uuid",
        "type": "string"
      },
      "business_id2": {
        "description": "Unique ID for the business. Exactly one of `business_id` or `person_id` must be set.\n",
        "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
        "format": "uuid",
        "type": "string"
      },
      "business_id3": {
        "description": "Unique ID for the business. Exactly one of `business_id` or `person_id` must be set.\n",
        "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
        "format": "uuid",
        "type": "string"
      },
      "business_id4": {
        "description": "Unique ID for the business. Exactly one of `business_id` or `person_id` must be set.\n",
        "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
        "format": "uuid",
        "type": "string"
      },
      "business_id5": {
        "description": "Unique ID for the business. Exactly one of `business_id` or `person_id` must be set.\n",
        "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
        "format": "uuid",
        "type": "string"
      },
      "business_id6": {
        "description": "Unique ID for the business. Exactly one of `business_id` or `person_id` must be set.\n",
        "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
        "format": "uuid",
        "type": "string"
      },
      "business_list": {
        "allOf": [
          {
            "$ref": "#/components/schemas/paginated_response"
          },
          {
            "properties": {
              "businesses": {
                "description": "Array of businesses.",
                "items": {
                  "$ref": "#/components/schemas/business"
                },
                "type": "array"
              }
            },
            "required": [
              "businesses"
            ],
            "type": "object"
          }
        ]
      },
      "bypass_errors": {
        "enum": [
          "IMPROPER_ACCOUNT_ACCESS_STATUS",
          "IMPROPER_ACCOUNT_CUSTOMER_RELATIONSHIP",
          "IMPROPER_ACCOUNT_STATUS",
          "IMPROPER_ANCESTOR_ACCOUNT_ACCESS_STATUS",
          "IMPROPER_ANCESTOR_ACCOUNT_STATUS",
          "IMPROPER_CUSTOMER_STATUS",
          "IMPROPER_CUSTOMER_VERIFICATION_STATUS",
          "IMPROPER_PARTNER_LIFECYCLE_STATUS",
          "IMPROPER_PARTNER_VERIFICATION_STATUS",
          "PARTNER_RAIL_NOT_ENABLED",
          "SUSPECTED_FRAUD"
        ],
        "type": "string"
      },
      "bypass_risk_errors": {
        "description": "Allow bypassing risk engine errors.",
        "type": "boolean"
      },
      "bypassable_errors": {
        "enum": [
          "ACCOUNT_CLOSED",
          "ACCOUNT_OWNER_WATCHLIST",
          "BALANCE_VIOLATION",
          "DURATION_CONFLICT",
          "EXTERNAL_ACCOUNT_NOT_ACTIVE",
          "EXTERNAL_ACCOUNT_NOT_VERIFIED",
          "EXTERNAL_ACH_DISABLED_FOR_TENANT",
          "FRAUD_DETECTED",
          "IMPROPER_ACCOUNT_ACCESS_STATUS",
          "IMPROPER_ACCOUNT_CUSTOMER_RELATIONSHIP",
          "IMPROPER_ACCOUNT_STATUS",
          "IMPROPER_ANCESTOR_ACCOUNT_ACCESS_STATUS",
          "IMPROPER_ANCESTOR_ACCOUNT_STATUS",
          "IMPROPER_CUSTOMER_STATUS",
          "IMPROPER_CUSTOMER_VERIFICATION_STATUS",
          "IMPROPER_PARTNER_LIFECYCLE_STATUS",
          "IMPROPER_PARTNER_VERIFICATION_STATUS",
          "INSUFFICIENT_FUNDS",
          "PARTIAL_HOLDS_DISABLED",
          "PARTNER_RAIL_NOT_ENABLED"
        ],
        "type": "string"
      },
      "bypassable_errors1": {
        "enum": [
          "ACCOUNT_CLOSED",
          "ACCOUNT_OWNER_WATCHLIST",
          "BALANCE_VIOLATION",
          "IMPROPER_ACCOUNT_ACCESS_STATUS",
          "IMPROPER_ACCOUNT_CUSTOMER_RELATIONSHIP",
          "IMPROPER_ACCOUNT_STATUS",
          "IMPROPER_ANCESTOR_ACCOUNT_ACCESS_STATUS",
          "IMPROPER_ANCESTOR_ACCOUNT_STATUS",
          "IMPROPER_CUSTOMER_STATUS",
          "IMPROPER_CUSTOMER_VERIFICATION_STATUS",
          "IMPROPER_PARTNER_LIFECYCLE_STATUS",
          "IMPROPER_PARTNER_VERIFICATION_STATUS",
          "INSUFFICIENT_FUNDS",
          "SPEND_CONTROL_VIOLATION",
          "SUSPECTED_FRAUD"
        ],
        "type": "string"
      },
      "calculation_method": {
        "enum": [
          "COMPOUNDED_DAILY",
          "COMPOUNDED_MONTHLY"
        ],
        "type": "string"
      },
      "card_acceptor_model": {
        "example": {
          "address": "address",
          "city": "city",
          "country": "country",
          "ecommerce_security_level_indicator": "ecommerce_security_level_indicator",
          "mcc": "mcc",
          "name": "name",
          "partial_approval_capable": false,
          "state": "state",
          "zip": "zip"
        },
        "properties": {
          "address": {
            "maxLength": 255,
            "type": "string"
          },
          "city": {
            "maxLength": 40,
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "ecommerce_security_level_indicator": {
            "type": "string"
          },
          "mcc": {
            "maxLength": 5,
            "type": "string"
          },
          "name": {
            "maxLength": 50,
            "type": "string"
          },
          "partial_approval_capable": {
            "default": false,
            "type": "boolean"
          },
          "state": {
            "description": "Two-Letter USPS State Abbreviation",
            "pattern": "\\b(A[KLRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])\\b",
            "type": "string"
          },
          "zip": {
            "maxLength": 10,
            "type": "string"
          }
        },
        "type": "object"
      },
      "card_activation_request": {
        "properties": {
          "activation_code": {
            "description": "An activation code provided with the card required to prove possession of the card",
            "type": "string"
          },
          "customer_id": {
            "description": "The ID of the customer for which card is being activated",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "activation_code",
          "customer_id"
        ],
        "type": "object"
      },
      "card_brand": {
        "description": "The brand of a card product",
        "enum": [
          "MASTERCARD",
          "VISA"
        ],
        "type": "string"
      },
      "card_category": {
        "description": "The category of the card",
        "enum": [
          "COMMERCIAL",
          "CONSUMER"
        ],
        "type": "string"
      },
      "card_change": {
        "description": "Card change details",
        "properties": {
          "change_type": {
            "$ref": "#/components/schemas/change_type"
          },
          "channel": {
            "$ref": "#/components/schemas/change_channel"
          },
          "id": {
            "description": "Unique token",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "memo": {
            "$ref": "#/components/schemas/card_status_reason_memo"
          },
          "reason": {
            "$ref": "#/components/schemas/card_status_reason_code"
          },
          "state": {
            "$ref": "#/components/schemas/card_change_state"
          },
          "updated_at": {
            "description": "Date of change",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "updated_by": {
            "description": "ID of user who initiated the change, if done via Synctera Admin System",
            "type": "string"
          }
        },
        "required": [
          "change_type",
          "channel",
          "id",
          "state",
          "updated_at",
          "updated_by"
        ],
        "type": "object"
      },
      "card_change_state": {
        "description": "Card status",
        "oneOf": [
          {
            "$ref": "#/components/schemas/card_status"
          },
          {
            "$ref": "#/components/schemas/card_pin_status"
          },
          {
            "$ref": "#/components/schemas/card_fulfillment_status"
          }
        ]
      },
      "card_changes_list": {
        "allOf": [
          {
            "properties": {
              "changes": {
                "description": "List of changes in descending chronological order",
                "items": {
                  "$ref": "#/components/schemas/card_change"
                },
                "type": "array"
              }
            },
            "required": [
              "changes"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "card_edit_request": {
        "properties": {
          "card_status": {
            "$ref": "#/components/schemas/card_status_request"
          },
          "customer_id": {
            "description": "The ID of the customer to whom the card will be issued",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "emboss_name": {
            "$ref": "#/components/schemas/emboss_name"
          },
          "memo": {
            "$ref": "#/components/schemas/card_status_reason_memo"
          },
          "metadata": {
            "$ref": "#/components/schemas/card_metadata"
          },
          "reason": {
            "$ref": "#/components/schemas/card_status_reason_code"
          }
        },
        "type": "object"
      },
      "card_format": {
        "properties": {
          "form": {
            "description": "PHYSICAL or VIRTUAL.",
            "enum": [
              "PHYSICAL",
              "VIRTUAL"
            ],
            "type": "string"
          }
        },
        "required": [
          "form"
        ],
        "type": "object"
      },
      "card_fulfillment_provider": {
        "description": "card fulfillment provider for physical cards",
        "enum": [
          "ARROWEYE",
          "GD"
        ],
        "type": "string"
      },
      "card_fulfillment_status": {
        "description": "The status indicating the state of the card issuance",
        "enum": [
          "DIGITALLY_PRESENTED",
          "ISSUED",
          "ORDERED",
          "REISSUED",
          "REJECTED",
          "REORDERED",
          "SHIPPED"
        ],
        "type": "string"
      },
      "card_id": {
        "description": "The unique identifier of a card",
        "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
        "format": "uuid",
        "type": "string"
      },
      "card_image_details": {
        "properties": {
          "card_product_id": {
            "$ref": "#/components/schemas/card_product_id"
          },
          "customer_id": {
            "$ref": "#/components/schemas/customer_id1"
          },
          "id": {
            "$ref": "#/components/schemas/card_image_id"
          },
          "rejection_memo": {
            "type": "string"
          },
          "rejection_reason": {
            "$ref": "#/components/schemas/card_image_rejection_reason"
          },
          "status": {
            "$ref": "#/components/schemas/card_image_status"
          }
        },
        "required": [
          "card_product_id",
          "customer_id",
          "id",
          "status"
        ]
      },
      "card_image_details_list": {
        "allOf": [
          {
            "properties": {
              "images": {
                "description": "Array of image details",
                "items": {
                  "$ref": "#/components/schemas/card_image_details"
                },
                "type": "array"
              }
            },
            "required": [
              "images"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "card_image_id": {
        "description": "The unique identifier of a card image",
        "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
        "format": "uuid",
        "type": "string"
      },
      "card_image_mode": {
        "description": "The image mode of a card product.\nIf the card product supports custom card images, this value determines how the images will be handled during card issuance.\nREQUIRED means that cards issued with this card product must have the ID of an image that has been uploaded. Note that the image does not necessarily have to have been approved prior to the issuance request. This mode is currently disabled.\nREQUIRED_APPROVED_FIRST means that cards issued with this card product must have the ID of an image that has been uploaded and approved.\n",
        "enum": [
          "REQUIRED",
          "REQUIRED_APPROVED_FIRST"
        ],
        "type": "string"
      },
      "card_image_rejection_reason": {
        "description": "The category of reason that a card image was rejected",
        "enum": [
          "BRANDED",
          "COPYRIGHT",
          "INAPPROPRIATE",
          "OTHER",
          "PROMOTIONAL",
          "TRADEMARK"
        ],
        "type": "string"
      },
      "card_image_status": {
        "description": "The status of a custom card image",
        "enum": [
          "APPROVED",
          "NOT_UPLOADED",
          "REJECTED",
          "UNREVIEWED"
        ],
        "type": "string"
      },
      "card_issuance_request": {
        "discriminator": {
          "mapping": {
            "PHYSICAL": "#/components/schemas/physical_card_issuance_request",
            "VIRTUAL": "#/components/schemas/virtual_card_issuance_request"
          },
          "propertyName": "form"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/virtual_card_issuance_request"
          },
          {
            "$ref": "#/components/schemas/physical_card_issuance_request"
          }
        ],
        "type": "object"
      },
      "card_list_response": {
        "allOf": [
          {
            "$ref": "#/components/schemas/paginated_response"
          },
          {
            "properties": {
              "cards": {
                "description": "Array of Cards",
                "items": {
                  "$ref": "#/components/schemas/card_response"
                },
                "type": "array"
              }
            },
            "required": [
              "cards"
            ],
            "type": "object"
          }
        ]
      },
      "card_metadata": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Additional data to include in the request structured as key-value pairs",
        "type": "object"
      },
      "card_options": {
        "properties": {
          "billing_address": {
            "$ref": "#/components/schemas/billing_address"
          },
          "card_present": {
            "default": false,
            "type": "boolean"
          },
          "cvv": {
            "maxLength": 3,
            "type": "string"
          },
          "expiration": {
            "maxLength": 4,
            "minLength": 4,
            "type": "string"
          }
        },
        "type": "object"
      },
      "card_pin_status": {
        "description": "The status of the card PIN",
        "enum": [
          "CHANGED",
          "SET"
        ],
        "readOnly": true,
        "type": "string"
      },
      "card_product": {
        "allOf": [
          {
            "properties": {
              "active": {
                "description": "Indicates whether the Card Product is active",
                "type": "boolean"
              },
              "bin_country": {
                "$ref": "#/components/schemas/country_code"
              },
              "bypass_risk_errors": {
                "$ref": "#/components/schemas/bypass_risk_errors"
              },
              "card_brand": {
                "$ref": "#/components/schemas/card_brand"
              },
              "card_category": {
                "$ref": "#/components/schemas/card_category"
              },
              "card_fulfillment_country": {
                "$ref": "#/components/schemas/country_code"
              },
              "card_fulfillment_provider": {
                "$ref": "#/components/schemas/card_fulfillment_provider"
              },
              "card_program_id": {
                "description": "Card Program ID",
                "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
                "format": "uuid",
                "type": "string"
              },
              "card_type": {
                "$ref": "#/components/schemas/card_program_type"
              },
              "color": {
                "description": "Color code for dynamic card elements such as PAN and card holder name",
                "pattern": "^[0-9A-F]{6}$",
                "type": "string"
              },
              "creation_time": {
                "description": "The timestamp representing when the Card Product was created",
                "example": "2010-05-06T12:23:34.321Z",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "cross_border_enabled": {
                "$ref": "#/components/schemas/cross_border_enabled"
              },
              "digital_wallet_tokenization": {
                "$ref": "#/components/schemas/digital_wallet_tokenization"
              },
              "end_date": {
                "description": "The time when the Card Product is decommissioned",
                "example": "2050-06-07T21:32:43.321Z",
                "format": "date-time",
                "type": "string"
              },
              "id": {
                "description": "Card Product ID",
                "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
                "format": "uuid",
                "readOnly": true,
                "type": "string"
              },
              "image": {
                "description": "Indicates whether or not there is an overlay image of the card product available",
                "type": "boolean"
              },
              "image_mode": {
                "$ref": "#/components/schemas/card_image_mode"
              },
              "issue_without_kyc": {
                "description": "Allow issuing cards on this product without requiring KYC",
                "type": "boolean"
              },
              "l2l3_enabled": {
                "$ref": "#/components/schemas/l2l3_enabled"
              },
              "last_modified_time": {
                "description": "The timestamp representing when the Card Product was last modified",
                "example": "2010-05-06T12:23:34.321Z",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "name": {
                "description": "The name of the Card Product",
                "maxLength": 40,
                "minLength": 1,
                "type": "string"
              },
              "notification_language": {
                "$ref": "#/components/schemas/notification_language"
              },
              "orientation": {
                "description": "Card orientation",
                "enum": [
                  "HORIZONTAL",
                  "VERTICAL"
                ],
                "type": "string"
              },
              "package_id": {
                "description": "Card fulfillment provider’s package ID",
                "maxLength": 50,
                "minLength": 1,
                "type": "string"
              },
              "physical_card_format": {
                "$ref": "#/components/schemas/physical_card_format"
              },
              "return_address": {
                "$ref": "#/components/schemas/shipping"
              },
              "start_date": {
                "description": "The time when the Card Product goes live",
                "example": "2010-05-06T12:23:34.321Z",
                "format": "date-time",
                "type": "string"
              },
              "txn_enhancer": {
                "$ref": "#/components/schemas/txn_enhancer"
              }
            },
            "required": [
              "active",
              "card_program_id",
              "name",
              "start_date"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/card_format"
          }
        ],
        "description": "Card Product"
      },
      "card_product_id": {
        "description": "The unique identifier of a cards product",
        "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
        "format": "uuid",
        "type": "string"
      },
      "card_product_list_response": {
        "allOf": [
          {
            "properties": {
              "card_products": {
                "description": "Array of Card Products",
                "items": {
                  "$ref": "#/components/schemas/card_product_response"
                },
                "type": "array"
              }
            },
            "required": [
              "card_products"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "card_product_response": {
        "allOf": [
          {
            "$ref": "#/components/schemas/card_product"
          },
          {
            "properties": {
              "three_ds_policy": {
                "$ref": "#/components/schemas/three_ds_policy"
              }
            },
            "required": [
              "three_ds_policy"
            ],
            "type": "object"
          }
        ],
        "required": [
          "active",
          "card_program_id",
          "creation_time",
          "digital_wallet_tokenization",
          "end_date",
          "form",
          "id",
          "last_modified_time",
          "name",
          "start_date",
          "three_ds_policy"
        ]
      },
      "card_program_type": {
        "description": "The type of the card program and BIN. This includes CREDIT and PREPAID as a way to use these types of products prior to v1 being available. Until v1 card program and BIN APIs are available you can create CREDIT and PREPAID BINs and card programs using the v1 API. Note that dealing with CREDIT and PREPAID cards requires the v1 API.",
        "enum": [
          "CREDIT",
          "DEBIT",
          "PREPAID"
        ],
        "type": "string"
      },
      "card_response": {
        "discriminator": {
          "mapping": {
            "PHYSICAL": "#/components/schemas/physical_card_response",
            "VIRTUAL": "#/components/schemas/virtual_card_response"
          },
          "propertyName": "form"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/virtual_card_response"
          },
          {
            "$ref": "#/components/schemas/physical_card_response"
          }
        ]
      },
      "card_status": {
        "description": "The status indicating the card lifecycle state",
        "enum": [
          "ACTIVE",
          "IMAGE_PENDING",
          "IMAGE_REJECTED",
          "PENDING",
          "REJECTED",
          "SUSPENDED",
          "TERMINATED",
          "UNACTIVATED"
        ],
        "type": "string"
      },
      "card_status_object": {
        "description": "The status of the card",
        "properties": {
          "card_status": {
            "$ref": "#/components/schemas/card_status"
          },
          "memo": {
            "$ref": "#/components/schemas/card_status_reason_memo"
          },
          "pending_reasons": {
            "$ref": "#/components/schemas/card_status_pending_reasons"
          },
          "status_reason": {
            "$ref": "#/components/schemas/card_status_reason_code"
          }
        },
        "required": [
          "card_status"
        ],
        "title": "Status",
        "type": "object"
      },
      "card_status_pending_reasons": {
        "description": "reasons why the card status is PENDING",
        "properties": {
          "is_waiting_for_bulk_shipment": {
            "description": "The card is to be shipping as part of a bulk shipment but that bulk shipment has not yet been released.\n",
            "type": "boolean"
          },
          "is_waiting_for_image": {
            "description": "The card has a custom image and either that image hasn't yet been uploaded and approved or the card has not yet been processed by the periodic daily custom card image processing task.\n",
            "type": "boolean"
          },
          "is_waiting_for_pin": {
            "description": "The card requires a PIN to be set before it can be issued (refer to the pin_issuance_policy of the related card product). The PIN has not yet been set and not enough time has passed to use a random PIN (if applicable).\n",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "card_status_reason_code": {
        "description": "The reason for the card status\n\nCode | Description\n--- | ---\nNEW | Card activated\nREQ | Requested by you\nINA | Dormant\nUNK | Invalid shipping address\nNEG | Negative account balance\nREV | Account under review\nSUS | Suspicious activity\nOUT | Activity outside program parameters\nFRD | Confirmed fraud\nMAT | Matched with an OFAC list\nLOS | Card reported lost\nCLO | Card was cloned\nCOM | Account or card was compromised\nTMP | Awaiting customer confirmation\nPRC | Initiated by Processor\nISS | Initiated by Issuer\nEXP | Card expired\nKYC | Failed KYC\nINF | Information was validated\nACT | Account activity was validated\nAUX | Initiated by a third party\nPIN | PIN try limit reached\nSTO | Card reported stolen\nADD | Address issue\nNAM | Name issue\nSSN | SSN issue\nDOB | DOB issue\nEML | Email issue\nPHO | Phone issue\nFUL | Account/fulfillment mismatch\nOTH | Other\n",
        "enum": [
          "ACT",
          "ADD",
          "AUX",
          "CLO",
          "COM",
          "DOB",
          "EML",
          "EXP",
          "FRD",
          "FUL",
          "INA",
          "INF",
          "ISS",
          "KYC",
          "LOS",
          "MAT",
          "NAM",
          "NEG",
          "NEW",
          "OTH",
          "OUT",
          "PHO",
          "PIN",
          "PRC",
          "REQ",
          "REV",
          "SSN",
          "STO",
          "SUS",
          "TMP",
          "UNK"
        ],
        "type": "string"
      },
      "card_status_reason_memo": {
        "description": "Additional details about the reason for the status change",
        "maxLength": 255,
        "type": "string"
      },
      "card_status_request": {
        "description": "The status indicating the card lifecycle state",
        "enum": [
          "ACTIVE",
          "SUSPENDED",
          "TERMINATED"
        ],
        "type": "string"
      },
      "card_type": {
        "description": "The type of the card program and BIN",
        "enum": [
          "DEBIT",
          "PREPAID"
        ],
        "type": "string"
      },
      "card_widget_url_response": {
        "description": "A URL for activate card and set pin widgets",
        "properties": {
          "url": {
            "format": "uri",
            "type": "string"
          }
        },
        "type": "object"
      },
      "case": {
        "properties": {
          "case_id": {
            "description": "Case ID",
            "type": "string"
          },
          "case_reason": {
            "description": "Case Reason",
            "type": "string"
          }
        },
        "required": [
          "case_id",
          "case_reason"
        ],
        "type": "object"
      },
      "cash_authorization_base": {
        "properties": {
          "amount": {
            "description": "Transfer amount in cents",
            "example": 10000,
            "format": "int64",
            "minimum": 1,
            "type": "integer"
          },
          "authorization_type": {
            "$ref": "#/components/schemas/cash_authorization_type"
          },
          "destination_account_id": {
            "description": "The UUID of the Synctera account resource that is the destination of the transfer.\n",
            "example": "fccb4a46-1261-4e91-b622-73b5b946183d",
            "format": "uuid",
            "type": "string"
          },
          "order_date": {
            "description": "The date the cash order was placed with cash distribution provider",
            "format": "date",
            "type": "string"
          }
        },
        "required": [
          "amount",
          "authorization_type",
          "destination_account_id",
          "order_date"
        ]
      },
      "cash_authorization_post": {
        "description": "Cash Authorization post",
        "discriminator": {
          "mapping": {
            "CASH_ORDER": "#/components/schemas/cash_order_authorization_post"
          },
          "propertyName": "authorization_type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/cash_order_authorization_post"
          }
        ],
        "type": "object"
      },
      "cash_authorization_response": {
        "description": "Cash authorization response",
        "discriminator": {
          "mapping": {
            "CASH_ORDER": "#/components/schemas/cash_order_authorization_response"
          },
          "propertyName": "authorization_type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/cash_order_authorization_response"
          }
        ],
        "title": "Cash Authorization Response",
        "type": "object"
      },
      "cash_authorization_response_list": {
        "allOf": [
          {
            "$ref": "#/components/schemas/paginated_response"
          },
          {
            "properties": {
              "authorizations": {
                "description": "Array of authorizations.",
                "items": {
                  "$ref": "#/components/schemas/cash_authorization_response"
                },
                "type": "array"
              }
            },
            "required": [
              "authorizations"
            ],
            "type": "object"
          }
        ]
      },
      "cash_authorization_type": {
        "enum": [
          "CASH_ORDER",
          "DEPOSIT"
        ],
        "type": "string"
      },
      "cash_base": {
        "description": "Cash transfer",
        "properties": {
          "amount": {
            "description": "Transfer amount in cents",
            "example": 10000,
            "format": "int64",
            "minimum": 1,
            "type": "integer"
          },
          "dc_sign": {
            "description": "Debit or credit sign",
            "enum": [
              "CREDIT",
              "DEBIT"
            ],
            "example": "DEBIT",
            "type": "string"
          },
          "source_data": {
            "description": "Additional information to be added to the transfer",
            "type": "object"
          }
        },
        "required": [
          "amount",
          "dc_sign"
        ],
        "title": "Cash Transfer",
        "type": "object"
      },
      "cash_list": {
        "allOf": [
          {
            "$ref": "#/components/schemas/paginated_response"
          },
          {
            "properties": {
              "transfers": {
                "description": "Array of transfers.",
                "items": {
                  "$ref": "#/components/schemas/cash_response"
                },
                "type": "array"
              }
            },
            "required": [
              "transfers"
            ],
            "type": "object"
          }
        ]
      },
      "cash_network_status": {
        "description": "The network status of the transfer in the Synctera platform.\n",
        "enum": [
          "PENDING",
          "POSTED",
          "RETURNED",
          "REVERSED"
        ],
        "example": "POSTED",
        "type": "string"
      },
      "cash_order_authorization_patch": {
        "description": "Request body to patch a cash order authorization",
        "properties": {
          "account_number": {
            "description": "The account number of the client business the cash order is for. Known as \"Location ID\" in the cash order CSV files.\n",
            "type": "string"
          },
          "authorization_type": {
            "$ref": "#/components/schemas/cash_authorization_type"
          },
          "client_name": {
            "description": "The name of the client business the cash order is for.",
            "example": "Cash-Based Brick and Mortar Store",
            "type": "string"
          },
          "order_date": {
            "description": "The date the cash order was placed with Empyreal",
            "format": "date",
            "type": "string"
          },
          "status": {
            "enum": [
              "CANCELLED"
            ],
            "type": "string"
          }
        },
        "required": [
          "authorization_type"
        ],
        "title": "Cash Order Authorization Patch",
        "type": "object"
      },
      "cash_order_authorization_post": {
        "allOf": [
          {
            "$ref": "#/components/schemas/cash_authorization_base"
          },
          {
            "description": "Create a cash order authorization",
            "title": "Cash Order Authorization"
          }
        ]
      },
      "cash_order_authorization_response": {
        "allOf": [
          {
            "$ref": "#/components/schemas/cash_authorization_base"
          },
          {
            "properties": {
              "account_number": {
                "description": "The account number of the client business the cash order is for. Known as \"Location ID\" in the cash order CSV files.\n",
                "type": "string"
              },
              "client_name": {
                "description": "The name of the client business the cash order is for.",
                "example": "Cash-Based Brick and Mortar Store",
                "type": "string"
              },
              "hold_id": {
                "description": "ID of the hold created for this authorization",
                "format": "uuid",
                "type": "string"
              },
              "id": {
                "description": "ID of the transfer",
                "format": "uuid",
                "type": "string"
              },
              "originating_account_id": {
                "description": "The UUID of the Synctera account resource originating the transfer.\n",
                "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
                "format": "uuid",
                "type": "string"
              },
              "status": {
                "enum": [
                  "CANCELLED",
                  "COMPLETE",
                  "EXPIRED",
                  "PENDING"
                ],
                "type": "string"
              },
              "tenant": {
                "$ref": "#/components/schemas/tenant_id"
              }
            },
            "required": [
              "account_number",
              "client_name",
              "hold_id",
              "id",
              "originating_account_id",
              "status",
              "tenant"
            ]
          }
        ]
      },
      "cash_patch": {
        "allOf": [
          {
            "properties": {
              "destination_account_id": {
                "description": "The UUID of the Synctera account resource that is the destination of the transfer for incoming transfers. This can only be updated if the transfer is suspended.\n",
                "example": "fccb4a46-1261-4e91-b622-73b5b946183d",
                "format": "uuid",
                "type": "string"
              },
              "source_data": {
                "description": "Additional information to be added to the transfer",
                "type": "object"
              },
              "status": {
                "enum": [
                  "CANCELLED"
                ],
                "type": "string"
              }
            }
          }
        ],
        "description": "Properties for updating a transfer",
        "title": "Cash Transfer Patch",
        "type": "object"
      },
      "cash_response": {
        "allOf": [
          {
            "$ref": "#/components/schemas/cash_base"
          },
          {
            "properties": {
              "client_bank_account": {
                "description": "The bank account of the client.",
                "example": 123456789,
                "type": "string"
              },
              "client_name": {
                "description": "The name of the client.",
                "example": "Fintech A",
                "type": "string"
              },
              "customer_id": {
                "description": "The UUID of the Synctera customer resource that is the originator of the transfer.\n",
                "example": "46fec39e-e776-4571-bf90-d0e1d15172fe",
                "type": "string"
              },
              "destination_account_id": {
                "description": "The UUID of the Synctera account that is the destination of the transfer. For a transfer originated by the Synctera platform, this will be an external account resource, while for a transfer originated by the external account, this account will be an account resource.\n",
                "example": "fccb4a46-1261-4e91-b622-73b5b946183d",
                "type": "string"
              },
              "destination_account_number": {
                "description": "The account number of the destination account.",
                "example": 1344012344,
                "format": "string",
                "type": "string"
              },
              "destination_account_owner_name": {
                "description": "The account owner name of the destination account.",
                "type": "string"
              },
              "effective_date": {
                "description": "The effective date of the transaction once it gets posted",
                "example": "2022-03-18",
                "format": "date",
                "type": "string"
              },
              "failed": {
                "description": "Whether the transfer failed or not.",
                "example": false,
                "type": "boolean"
              },
              "history": {
                "items": {
                  "$ref": "#/components/schemas/action"
                },
                "type": "array"
              },
              "id": {
                "description": "ID of the transfer",
                "format": "uuid",
                "type": "string"
              },
              "is_same_day": {
                "description": "Send the same day (use only is_same_day without specific effective_date).",
                "example": true,
                "type": "boolean"
              },
              "network_status": {
                "$ref": "#/components/schemas/cash_network_status"
              },
              "original_reference_id": {
                "description": "The original reference id of the transfer if it's a return.",
                "example": 123456788,
                "type": "string"
              },
              "originating_account_id": {
                "description": "The UUID of the Synctera account that is the origination of the transfer. For a transfer originated by the Synctera platform, this will be an account resource, while for a transfer originated by the external account, this will be an external account resource.\n",
                "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
                "type": "string"
              },
              "originating_account_number": {
                "description": "The account number of the originating account.",
                "example": 1961234745,
                "format": "string",
                "type": "string"
              },
              "originating_account_owner_name": {
                "description": "The account owner name of the origination account.",
                "type": "string"
              },
              "posting_date": {
                "description": "The posting date of the transaction once it gets posted",
                "example": "2022-03-18",
                "format": "date",
                "type": "string"
              },
              "reference_id": {
                "description": "The reference id of the transfer.",
                "example": 123456789,
                "type": "string"
              },
              "status": {
                "$ref": "#/components/schemas/cash_status"
              },
              "subtype": {
                "description": "The subtype of the transfer",
                "enum": [
                  "CASH_ORDER",
                  "CASH_ORDER_REVERSAL",
                  "DEPOSIT",
                  "DEPOSIT_REVERSAL"
                ],
                "example": "CASH_ORDER",
                "type": "string"
              },
              "suspended": {
                "description": "Whether the transfer is suspended or not.",
                "example": false,
                "type": "boolean"
              },
              "tenant_id": {
                "$ref": "#/components/schemas/tenant_id"
              },
              "transaction_id": {
                "description": "The related transaction id of the transfer.",
                "example": "45b5246f-ad97-4629-9aac-465b74a05505",
                "format": "uuid",
                "type": "string"
              }
            },
            "required": [
              "effective_date",
              "id",
              "is_same_day",
              "reference_id",
              "status",
              "subtype",
              "tenant_id"
            ]
          }
        ],
        "description": "Cash transfer",
        "title": "Cash Transfer Response",
        "type": "object"
      },
      "cash_status": {
        "description": "The status of the transfer in the Synctera platform. This is automatically set upon the creation of a transfer. To cancel a transfer, the current status must be 'INITIATED' or 'PENDING' and the request status set to 'CANCELLED'. To trigger a return, the current status must be 'POSTED' and the returned status will be set to 'RETURNED' if successful.\n",
        "enum": [
          "CANCELLED",
          "EXPIRED",
          "INITIATED",
          "PENDING",
          "POSTED"
        ],
        "example": "POSTED",
        "type": "string"
      },
      "change_channel": {
        "description": "How the change was submitted",
        "enum": [
          "ADMIN",
          "API",
          "FRAUD",
          "SYSTEM"
        ],
        "type": "string"
      },
      "change_type": {
        "description": "The category of card change",
        "enum": [
          "FULFILLMENT",
          "PIN",
          "STATUS"
        ],
        "type": "string"
      },
      "classification": {
        "description": "Specifies the classification of a party.\n",
        "enum": [
          "AUTHORIZED_USER",
          "BANK_CUSTOMER",
          "INACTIVE_BANK_CUSTOMER",
          "PROSPECT"
        ],
        "type": "string"
      },
      "classifications": {
        "description": "Specifies the classification of a party for banks. This may contain multiple values for a combined classifications list of customers.\n",
        "items": {
          "$ref": "#/components/schemas/classification"
        },
        "readOnly": true,
        "type": "array"
      },
      "clearing_model": {
        "example": {
          "amount": 80,
          "card_acceptor": {
            "address": "address",
            "city": "city",
            "country": "country",
            "ecommerce_security_level_indicator": "ecommerce_security_level_indicator",
            "mcc": "mcc",
            "name": "name",
            "partial_approval_capable": false,
            "state": "state",
            "zip": "zip"
          },
          "force_post": false,
          "is_refund": false,
          "mid": "mid",
          "network_fees": [
            {
              "amount": 123,
              "credit_debit": "C",
              "type": "ISSUER_FEE"
            },
            {
              "amount": 123,
              "credit_debit": "C",
              "type": "ISSUER_FEE"
            }
          ],
          "original_transaction_id": "original_transaction_id"
        },
        "properties": {
          "amount": {
            "description": "The amount of the transaction in the smallest whole denomination of the applicable currency (eg. For USD use cents)",
            "type": "integer"
          },
          "card_acceptor": {
            "$ref": "#/components/schemas/card_acceptor_model"
          },
          "force_post": {
            "default": false,
            "type": "boolean"
          },
          "is_refund": {
            "default": false,
            "type": "boolean"
          },
          "mid": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "network_fees": {
            "items": {
              "$ref": "#/components/schemas/network_fee_model"
            },
            "type": "array"
          },
          "original_transaction_id": {
            "description": "When you simulated a clearing the synchronous response would have included a `transaction.token`. That value should be used here.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "amount",
          "original_transaction_id"
        ],
        "type": "object"
      },
      "client_token": {
        "description": "A short-lived, one-time token used for accessing client PINs/PANs",
        "properties": {
          "client_token": {
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "type": "string"
          }
        },
        "title": "Client Token",
        "type": "object"
      },
      "content": {
        "description": "The note's text content.",
        "example": "Customer was frozen to investigate fraud.",
        "type": "string"
      },
      "correspondent_bank_details": {
        "properties": {
          "bank_address": {
            "$ref": "#/components/schemas/address"
          },
          "bank_name": {
            "description": "The name of the correspondent bank.\n",
            "example": "Bank of Greece",
            "minLength": 1,
            "type": "string"
          },
          "swift_code": {
            "description": "The SWIFT code (also known as BIC code) used for international payments.\n",
            "example": "BNGRGRAAXXX",
            "pattern": "^[A-Z]{6}[A-Z0-9]{2}([A-Z0-9]{3})?$",
            "type": "string"
          }
        },
        "required": [
          "bank_address",
          "bank_name",
          "swift_code"
        ],
        "title": "Correspondent bank details",
        "type": "object"
      },
      "country_code": {
        "description": "ISO-3166-1 Alpha-2 country code",
        "example": "US",
        "maxLength": 2,
        "minLength": 2,
        "type": "string"
      },
      "create_card_image_request": {
        "properties": {
          "card_product_id": {
            "$ref": "#/components/schemas/card_product_id"
          },
          "customer_id": {
            "$ref": "#/components/schemas/customer_id1"
          }
        },
        "required": [
          "card_product_id",
          "customer_id"
        ],
        "type": "object"
      },
      "create_edd_request": {
        "discriminator": {
          "mapping": {
            "ACCOUNT": "#/components/schemas/edd_account",
            "BUSINESS": "#/components/schemas/edd_business",
            "CUSTOMER": "#/components/schemas/edd_customer",
            "TRANSACTION": "#/components/schemas/edd_transaction"
          },
          "propertyName": "related_resource_type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/edd_account"
          },
          {
            "$ref": "#/components/schemas/edd_transaction"
          },
          {
            "$ref": "#/components/schemas/edd_business"
          },
          {
            "$ref": "#/components/schemas/edd_customer"
          }
        ]
      },
      "create_edd_response": {
        "discriminator": {
          "mapping": {
            "ACCOUNT": "#/components/schemas/edd_account_response",
            "BUSINESS": "#/components/schemas/edd_business_response",
            "CUSTOMER": "#/components/schemas/edd_customer_response",
            "TRANSACTION": "#/components/schemas/edd_transaction_response"
          },
          "propertyName": "related_resource_type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/edd_transaction_response"
          },
          {
            "$ref": "#/components/schemas/edd_account_response"
          },
          {
            "$ref": "#/components/schemas/edd_customer_response"
          },
          {
            "$ref": "#/components/schemas/edd_business_response"
          }
        ],
        "required": [
          "creation_time",
          "id"
        ]
      },
      "create_gateway_request": {
        "properties": {
          "active": {
            "default": true,
            "description": "Current status of the Authorization gateway",
            "type": "boolean"
          },
          "card_products": {
            "description": "List of Card Product unique identifiers that will utilize the Gateway",
            "items": {
              "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "custom_headers": {
            "$ref": "#/components/schemas/gateway_custom_headers"
          },
          "standin": {
            "$ref": "#/components/schemas/gateway_standin"
          },
          "url": {
            "description": "URL of the Authorization gateway",
            "format": "uri",
            "maxLength": 1000,
            "type": "string"
          }
        },
        "required": [
          "card_products",
          "url"
        ],
        "type": "object"
      },
      "cross_border_enabled": {
        "default": false,
        "description": "Enable/Disable cross border transaction - transaction will be automatically declined when merchant country is different than BIN country when disabled. Cross-Border transaction are disabled by default.\n",
        "type": "boolean"
      },
      "currency": {
        "description": "The currency in ISO 4217 format.",
        "example": "USD",
        "pattern": "^[A-Z]{3}$",
        "type": "string"
      },
      "currency_code": {
        "description": "ISO 4217  Alpha-3 currency code",
        "example": "USD",
        "maxLength": 3,
        "minLength": 3,
        "type": "string"
      },
      "customer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/base_customer"
          },
          {
            "properties": {
              "dob": {
                "description": "Customer's date of birth in RFC 3339 full-date format (YYYY-MM-DD). Must be on or after 1900-01-01 and before current date.",
                "example": "2000-01-01",
                "format": "date",
                "type": "string"
              },
              "first_name": {
                "description": "Customer's first name",
                "example": "Jane",
                "type": "string"
              },
              "last_name": {
                "description": "Customer's last name",
                "example": "Smith",
                "type": "string"
              },
              "status": {
                "description": "Customer's status",
                "enum": [
                  "ACTIVE",
                  "DECEASED",
                  "DENIED",
                  "DORMANT",
                  "ESCHEAT",
                  "FROZEN",
                  "INACTIVE",
                  "PROSPECT",
                  "SANCTION"
                ],
                "type": "string"
              }
            },
            "required": [
              "status"
            ]
          }
        ],
        "description": "Details of a customer",
        "title": "Customer",
        "type": "object"
      },
      "customer_id": {
        "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
        "format": "uuid",
        "type": "string"
      },
      "customer_id1": {
        "description": "The unique identifier of a customer",
        "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
        "format": "uuid",
        "type": "string"
      },
      "customer_in_body": {
        "discriminator": {
          "mapping": {
            "ACTIVE": "#/components/schemas/customer",
            "DECEASED": "#/components/schemas/customer",
            "DENIED": "#/components/schemas/customer",
            "DORMANT": "#/components/schemas/customer",
            "ESCHEAT": "#/components/schemas/customer",
            "FROZEN": "#/components/schemas/customer",
            "INACTIVE": "#/components/schemas/customer",
            "PROSPECT": "#/components/schemas/prospect",
            "SANCTION": "#/components/schemas/customer"
          },
          "propertyName": "status"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/customer"
          },
          {
            "$ref": "#/components/schemas/prospect"
          }
        ],
        "type": "object"
      },
      "customer_kyc_status": {
        "description": "Customer's KYC status",
        "enum": [
          "ACCEPTED",
          "PENDING",
          "PROVIDER_FAILURE",
          "PROVISIONAL",
          "REJECTED",
          "REVIEW",
          "UNVERIFIED"
        ],
        "readOnly": true,
        "type": "string"
      },
      "customer_list": {
        "allOf": [
          {
            "properties": {
              "customers": {
                "description": "Array of Customers",
                "items": {
                  "$ref": "#/components/schemas/customer_in_body"
                },
                "type": "array"
              }
            },
            "required": [
              "customers"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "customer_service_details": {
        "description": "The customer service details of the fintech partner, e.g. phone number, email address, etc.",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/address2"
          },
          "email": {
            "description": "The customer service email address",
            "type": "string"
          },
          "phone_number": {
            "description": "The customer service phone number",
            "type": "string"
          }
        },
        "title": "Customer Service Details",
        "type": "object"
      },
      "customer_type": {
        "description": "Customer type",
        "enum": [
          "BUSINESS",
          "PERSONAL"
        ],
        "readOnly": true,
        "title": "Customer Type",
        "type": "string"
      },
      "customer_verification": {
        "example": {
          "customer_consent": true,
          "customer_ip_address": "66.152.213.183"
        },
        "properties": {
          "customer_consent": {
            "description": "Whether this customer has consented to a KYC check.\n",
            "type": "boolean"
          },
          "customer_ip_address": {
            "description": "IP address of the customer being verified.",
            "example": "140.151.183.216",
            "type": "string"
          },
          "document_id": {
            "description": "The ID of the uploaded government-issued identification document provided by the Socure SDK.\n",
            "example": "1ab2c3de-fg45-6789-a01b-23c45678defg",
            "type": "string"
          },
          "verification_type": {
            "description": "List of possible checks to run on a customer. This is a legacy field that is now ignored.\n",
            "items": {
              "$ref": "#/components/schemas/kyc_verification_type"
            },
            "type": "array"
          }
        },
        "required": [
          "customer_consent"
        ],
        "title": "PersonVerification",
        "type": "object"
      },
      "customer_verification_result": {
        "description": "Verification result",
        "properties": {
          "id": {
            "description": "Unique ID for this verification result.",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "issues": {
            "deprecated": true,
            "description": "List of potential problems found. These are subject to change.\n",
            "items": {
              "example": "R186: Global Watchlist sources selected are correlated with the input identifiers",
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "raw_response": {
            "$ref": "#/components/schemas/raw_response"
          },
          "result": {
            "description": "The determination of this verification.",
            "enum": [
              "ACCEPTED",
              "PROVIDER_FAILURE",
              "PROVISIONAL",
              "REJECTED",
              "REVIEW"
            ],
            "example": "ACCEPTED",
            "type": "string"
          },
          "vendor_info": {
            "$ref": "#/components/schemas/verification_vendor_info"
          },
          "verification_time": {
            "description": "The date and time the verification was completed.",
            "format": "date-time",
            "type": "string"
          },
          "verification_type": {
            "$ref": "#/components/schemas/kyc_verification_type"
          }
        },
        "required": [
          "result",
          "verification_time",
          "verification_type"
        ],
        "title": "CustomerVerificationResult",
        "type": "object"
      },
      "customer_verification_result_list": {
        "allOf": [
          {
            "properties": {
              "verifications": {
                "description": "Array of verification results.",
                "items": {
                  "$ref": "#/components/schemas/customer_verification_result"
                },
                "type": "array"
              }
            },
            "required": [
              "verifications"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "customer_verify_response": {
        "allOf": [
          {
            "properties": {
              "kyc_status": {
                "$ref": "#/components/schemas/customer_kyc_status"
              },
              "verifications": {
                "description": "Array of verification results.",
                "items": {
                  "$ref": "#/components/schemas/customer_verification_result"
                },
                "type": "array"
              }
            },
            "required": [
              "kyc_status",
              "verifications"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "dc_sign": {
        "description": "The `dc_sign` represents the direction money was moved.",
        "enum": [
          "credit",
          "debit"
        ],
        "type": "string"
      },
      "delete_response": {
        "description": "Deleted object information",
        "properties": {
          "id": {
            "description": "Object ID",
            "format": "uuid",
            "type": "string"
          },
          "resource": {
            "description": "The resource name",
            "type": "string"
          }
        },
        "title": "Deleted Object",
        "type": "object"
      },
      "deposit": {
        "allOf": [
          {
            "properties": {
              "creation_time": {
                "example": "2010-05-06T12:23:34.321Z",
                "format": "date-time",
                "type": "string"
              },
              "date_captured": {
                "description": "Date the deposit was captured, in RFC 3339 format",
                "example": "2010-05-06T12:23:34.321Z",
                "format": "date-time",
                "type": "string"
              },
              "date_processed": {
                "description": "Date the deposit was processed, in RFC 3339 format",
                "example": "2010-05-06T12:23:34.321Z",
                "format": "date-time",
                "type": "string"
              },
              "deposit_amount": {
                "description": "Amount deposited in ISO 4217 minor currency units",
                "example": 12345,
                "type": "integer"
              },
              "id": {
                "description": "Remote Check Deposit ID",
                "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
                "format": "uuid",
                "type": "string"
              },
              "last_updated_time": {
                "example": "2010-05-06T12:23:34.321Z",
                "format": "date-time",
                "type": "string"
              },
              "ocr_account_number": {
                "description": "Account number of the issuer of the check, included if OCR is successful",
                "example": "123456789",
                "type": "string"
              },
              "ocr_check_number": {
                "description": "The unique check number for this check in the checkbook, included if OCR is successful and there is a check number on the check",
                "example": "001",
                "type": "string"
              },
              "ocr_routing_number": {
                "description": "Routing number of the issuing bank, included if OCR is successful",
                "example": "026009593",
                "type": "string"
              },
              "status": {
                "$ref": "#/components/schemas/deposit_status"
              },
              "transaction_id": {
                "description": "The ID of the transaction associated with this deposit",
                "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
                "format": "uuid",
                "type": "string"
              },
              "vendor_info": {
                "$ref": "#/components/schemas/vendor_info3"
              }
            },
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/deposit_request"
          }
        ],
        "description": "Deposit using remote deposit capture",
        "title": "Remote Check Deposit"
      },
      "deposit_get": {
        "allOf": [
          {
            "$ref": "#/components/schemas/deposit"
          },
          {
            "required": [
              "account_id",
              "back_image_id",
              "check_amount",
              "date_captured",
              "date_processed",
              "deposit_amount",
              "deposit_currency",
              "front_image_id",
              "id",
              "status"
            ]
          }
        ]
      },
      "deposit_list": {
        "allOf": [
          {
            "properties": {
              "deposits": {
                "description": "Array of  Remote Check Deposits",
                "items": {
                  "$ref": "#/components/schemas/deposit_get"
                },
                "type": "array"
              }
            },
            "required": [
              "deposits"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "deposit_post": {
        "allOf": [
          {
            "required": [
              "account_id",
              "back_image_id",
              "check_amount",
              "deposit_currency",
              "front_image_id"
            ]
          },
          {
            "$ref": "#/components/schemas/deposit_request"
          }
        ]
      },
      "deposit_request": {
        "description": "User provided request to submit an RDC",
        "properties": {
          "account_id": {
            "description": "The ID of the account",
            "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
            "format": "uuid",
            "type": "string"
          },
          "back_image_id": {
            "description": "ID of the uploaded image of the back of the check",
            "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
            "format": "uuid",
            "type": "string"
          },
          "business_id": {
            "$ref": "#/components/schemas/business_id5"
          },
          "check_amount": {
            "description": "Amount on check in ISO 4217 minor currency units",
            "example": 12345,
            "minimum": 1,
            "type": "integer"
          },
          "deposit_currency": {
            "description": "ISO 4217 currency code for the deposit amount",
            "example": "USD",
            "type": "string"
          },
          "front_image_id": {
            "description": "ID of the uploaded image of the front of the check",
            "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
            "format": "uuid",
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/metadata"
          },
          "person_id": {
            "$ref": "#/components/schemas/person_id1"
          }
        },
        "title": "Remote Check Deposit Request",
        "type": "object"
      },
      "deposit_status": {
        "description": "The status of the deposit",
        "enum": [
          "FAILED",
          "MANUAL_POST_REJECTED",
          "PENDING",
          "REJECTED",
          "RETURNED",
          "SUBMITTED"
        ],
        "type": "string"
      },
      "detail": {
        "description": "An object containing information about an individual check performed.",
        "properties": {
          "category": {
            "description": "Machine-readable identifier to allow grouping details into subsets.\n\nChecks for the following categories should typcially be provided when onboarding personal customers:\n* `CIP` – Checks relating to a Customer Identification Program (CIP) including name, ID verification, and date of birth.\n* `ADDRESS` – Address check done either through a bureau or document verification.\n* `PHONE` – Phone checks, including verifying number and other correlation methods.\n* `EMAIL` – Email checks, including verifying email address and other correlation methods.\n* `FRAUD` – Checks relating to elements of fraud.\n* `SYNTHETIC` – Check relating to elements of synthetic identity.\n* `DEVICE` – Checks relating to elements of device risk. Can include SDK or IP screening.\n* `DOC_VERIFICATION` – Document Verification checks, where ID documents are submitted for verification, including liveness test, or other anti-forgery verification.\n* `SELFIE_CAPTURE` – Selfie capture check, including liveness test, or other anti-fake verification.\n* `SELFIE_DOCUMENT` – Check if selfie matches with photo on document.\n* `DOC_DETAILS` – Check if details on ID documents matches with supplied information.\n* `WATCHLIST` – Outcome from watchlist screenings (especially OFAC/SDN and other sanctions lists).\n\nChecks for the following categories should typcially be provided when onboarding businesses customers:\n* `BUSINESS_NAME` – Business name check done against a bureau.\n* `OFFICE_ADDRESS` – Address check done either through a bureau or document verification.\n* `SOS_FILINGS` – Findings from a Secretary of State (SOS) filings check.\n* `WEBSITE` – Business website check.\n* `TIN_MATCH` – Taxpayer Identification Number (TIN) check from tax bureau.\n* `BANKRUPTCIES` – Check for any bankruptcy filings.\n* `SOS_DOMESTIC` – Outcome from a Domestic Secretary of State (SOS) filings check\n* `LICENSE` – \n* `WATCHLIST` – Outcome from watchlist screenings (especially OFAC/SDN and other sanctions lists).\n\nIf you would like to provide additional information that doesn't fit with an existing category you may provide:\n* `OTHER` – A category for miscellaneous or uncategorized checks.\n",
            "enum": [
              "ADDRESS",
              "BANKRUPTCIES",
              "BUSINESS_NAME",
              "CIP",
              "DEVICE",
              "DOC_DETAILS",
              "DOC_VERIFICATION",
              "EMAIL",
              "FRAUD",
              "LICENSE",
              "OFFICE_ADDRESS",
              "OTHER",
              "PHONE",
              "SELFIE_CAPTURE",
              "SELFIE_DOCUMENT",
              "SOS_DOMESTIC",
              "SOS_FILINGS",
              "SYNTHETIC",
              "TIN_MATCH",
              "WATCHLIST",
              "WEBSITE"
            ],
            "type": "string"
          },
          "description": {
            "description": "Human-readable description explaining the individual check.",
            "example": "Email address is correlated with the individual's name",
            "type": "string"
          },
          "label": {
            "description": "Human-readable grouping describing the aspect of the customer's identity examined by this check.",
            "example": "Email",
            "readOnly": true,
            "type": "string"
          },
          "result": {
            "description": "The result of the individual check. One of the following:\n* `PASS` – the check passed contributing to a positive outcome (or accepted verification result).\n* `INFO` – the check returned neutral information which may or may not explain a negative result.\n* `WARN` – the check was inconclusive and might require review.\n* `FAIL` – the check failed and might result in a failing outcome (or rejected verification_result).\n",
            "enum": [
              "FAIL",
              "INFO",
              "PASS",
              "WARN"
            ],
            "example": "PASS",
            "type": "string"
          },
          "score": {
            "description": "An arbitrary floating point score value which may be used to contextualize the human readable description.",
            "example": 0.25,
            "format": "double",
            "type": "number"
          },
          "url": {
            "description": "A URL containing supporting information for this individual check.",
            "example": "http://example.com/additional-information",
            "type": "string"
          },
          "vendor_code": {
            "description": "Machine-readable description of the individual check. This field contains vendor-specific terms and may not be populated in all cases.",
            "example": "R940",
            "type": "string"
          }
        },
        "type": "object"
      },
      "details": {
        "description": "A list of individual checks done as part of the due diligence process for the verification type.\n",
        "items": {
          "$ref": "#/components/schemas/detail"
        },
        "type": "array"
      },
      "device_details": {
        "description": "Optionally provided browser device details, used as a fallback in case there is an issue with Device Data Collection. Note that minimal field validation is performed.",
        "properties": {
          "color_depth": {
            "description": "The device's color palette bit depth, in bits per pixel",
            "example": 24,
            "maximum": 99,
            "minimum": 1,
            "type": "integer"
          },
          "header": {
            "description": "The exact contents of the browser's HTTP accept headers",
            "example": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
            "type": "string"
          },
          "ip_address": {
            "description": "The device's IP address (either IPv4 or IPv6 formats are acceptable)",
            "example": "1.12.123.255",
            "type": "string"
          },
          "java_enabled": {
            "description": "If the browser has the ability to execute Java (value returned from `navigator.javaEnabled` property)",
            "type": "boolean"
          },
          "javascript_enabled": {
            "description": "If the browser has the ability to execute JavaScript (value returned from `navigator.javaScriptEnabled` property)",
            "type": "boolean"
          },
          "language": {
            "description": "The browser's language as defined in IETF BCP47",
            "example": "en-US",
            "type": "string"
          },
          "screen_height": {
            "description": "The total height of the device's screen, in pixels",
            "example": 1080,
            "maximum": 999999,
            "minimum": 1,
            "type": "integer"
          },
          "screen_width": {
            "description": "The total width of the device's screen, in pixels",
            "example": 1920,
            "maximum": 999999,
            "minimum": 1,
            "type": "integer"
          },
          "timezone": {
            "description": "The offset from UTC of the device's local timezone, in minutes",
            "example": -300,
            "maximum": 840,
            "minimum": -840,
            "type": "integer"
          },
          "user_agent": {
            "description": "The exact contents of the HTTP user agent header",
            "example": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36",
            "type": "string"
          }
        },
        "required": [
          "color_depth",
          "header",
          "ip_address",
          "java_enabled",
          "javascript_enabled",
          "language",
          "screen_height",
          "screen_width",
          "timezone",
          "user_agent"
        ],
        "type": "object"
      },
      "device_type": {
        "description": "The type of device into which the digital wallet token will be provisioned.",
        "enum": [
          "MOBILE_PHONE",
          "TABLET",
          "WATCH"
        ],
        "type": "string"
      },
      "digital_wallet_token_address_verification": {
        "properties": {
          "validate": {
            "example": false,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "digital_wallet_token_edit_request": {
        "properties": {
          "token_status": {
            "description": "The status indicating the digital wallet token lifecycle state",
            "enum": [
              "ACTIVE",
              "SUSPENDED",
              "TERMINATED"
            ],
            "type": "string"
          }
        },
        "required": [
          "token_status"
        ],
        "type": "object"
      },
      "digital_wallet_token_id": {
        "description": "The unique identifier of a digital wallet token",
        "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
        "format": "uuid",
        "type": "string"
      },
      "digital_wallet_token_response": {
        "properties": {
          "approved_time": {
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          },
          "card_id": {
            "description": "Card ID of the Digital wallet Token",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "device_id": {
            "description": "The user’s Android device ID; the device’s unique identifier.",
            "maxLength": 124,
            "type": "string"
          },
          "device_type": {
            "description": "Type of the device where the Digital Wallet Token is used in",
            "enum": [
              "APPLIANCE",
              "GAMING_DEVICE",
              "LAPTOP",
              "MOBILE_PHONE",
              "MOBILE_PHONE_OR_TABLET",
              "TABLET",
              "UNKNOWN",
              "VEHICLE",
              "WATCH"
            ],
            "type": "string"
          },
          "id": {
            "description": "Digital Wallet Token ID",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "last_modified_time": {
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          },
          "processor_data": {
            "description": "Raw data from processor.",
            "type": "object"
          },
          "removed_from_wallet_time": {
            "description": "The time that the token was removed from a wallet. Tokens make remain active after being removed from a wallet.",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          },
          "requested_time": {
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/digital_wallet_token_state"
          },
          "token_reference_id": {
            "description": "Unique identifier of the digital wallet token within the card network.",
            "type": "string"
          },
          "type": {
            "description": "Type of the Digital Wallet. Can be one of APPLE_PAY, ANDROID_PAY, SAMSUNG_PAY or something else when cards are added on file to a merchant.",
            "example": "APPLE_PAY",
            "type": "string"
          }
        },
        "type": "object"
      },
      "digital_wallet_token_state": {
        "description": "Current status of the Digital Wallet Token",
        "enum": [
          "ACTIVE",
          "REQUESTED",
          "REQUEST_DECLINED",
          "SUSPENDED",
          "TERMINATED"
        ],
        "type": "string"
      },
      "digital_wallet_tokenization": {
        "properties": {
          "card_art_id": {
            "description": "Specifies the digital wallet card art identifier for the card product.",
            "type": "string"
          },
          "provisioning_controls": {
            "$ref": "#/components/schemas/provisioning_controls"
          }
        },
        "type": "object"
      },
      "disclosure": {
        "allOf": [
          {
            "$ref": "#/components/schemas/base_disclosure"
          },
          {
            "required": [
              "disclosure_date",
              "event_type",
              "type",
              "version"
            ]
          }
        ],
        "description": "Represents a disclosure.",
        "type": "object"
      },
      "disclosure1": {
        "description": "Represents a disclosure",
        "properties": {
          "creation_time": {
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "event_type": {
            "enum": [
              "ACKNOWLEDGED",
              "DISPLAYED",
              "VIEWED"
            ],
            "example": "VIEWED",
            "type": "string"
          },
          "id": {
            "description": "Disclosure ID",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "last_updated_time": {
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "timestamp": {
            "description": "Date of disclosure",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          },
          "type": {
            "description": "Disclosure Type",
            "enum": [
              "ACH_AUTHORIZATION",
              "CARDHOLDER_AGREEMENT",
              "E_SIGN",
              "KYC_DATA_COLLECTION",
              "OWNER_CERTIFICATION",
              "PRIVACY_NOTICE",
              "REG_CC",
              "REG_DD",
              "REG_E",
              "SC_ACCOUNT_AGREEMENT",
              "SC_AUTO_PAYMENT",
              "SC_SECURITY_AGREEMENT",
              "TERMS_AND_CONDITIONS"
            ],
            "example": "REG_DD",
            "type": "string"
          },
          "version": {
            "description": "Disclosure Version",
            "example": "v1.1",
            "type": "string"
          }
        },
        "required": [
          "event_type",
          "timestamp",
          "type",
          "version"
        ],
        "title": "Disclosure",
        "type": "object"
      },
      "disclosure_list": {
        "allOf": [
          {
            "properties": {
              "disclosures": {
                "description": "Array of disclosures.",
                "items": {
                  "$ref": "#/components/schemas/disclosure"
                },
                "type": "array"
              }
            },
            "required": [
              "disclosures"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "disclosure_response": {
        "description": "Represents all customer disclosures",
        "properties": {
          "disclosures": {
            "description": "List of the customer's disclosures",
            "items": {
              "$ref": "#/components/schemas/disclosure1"
            },
            "type": "array"
          }
        },
        "title": "List of Customer Disclosures",
        "type": "object"
      },
      "disclosure_type": {
        "description": "Describes the regulatory requirement that triggered the disclosure. One of the following:\n* `ACH_AUTHORIZATION` –\n    [US] The ACH Authorization & Agreement Disclosure serves as a method of disclosing\n    and obtaining consent from a consumer to conduct ACH and pre-authorized\n    electronic transactions to and from their account. Record of obtaining this\n    consent should be retained, in accordance with Reg E, for no less than 2 years\n    from the date the disclosure was made to the consumer.\n\n* `DIRECT_BILLING_AUTHORIZATION` –\n    [US] Disclosure to certify that the user has authorized Synctera to initiate ACH debits/credits to the specified settlement account.\n\n* `CARDHOLDER_AGREEMENT` –\n    [US] The Cardholder Agreement is a legal document that details the terms of a card\n    agreement between either a consumer or a business, and the financial\n    institution that issues the card. The Agreement governs the use of the\n    account.\n\n    [CA] A legal document that details the terms of a customer’s use of a card and their relationship\n    with the issuing financial institution, Synctera (if applicable), and the Distributor\n    of the Card (the FinTech). The Agreement governs the customer’s use of the Card and the account,\n    including their rights and obligations.\n\n\n* `CARD_DISCLOSURE` – \n    [CA] Part of the Cardholder Agreement, the Disclosure highlights prescribed terms and\n    conditions that apply to the customer's use of the Card. The Disclosure can be \n    incorporated into the Agreement itself, but is often shown separately to ensure\n    clear understanding of the regulated terms.\n\n* `E_SIGN` –\n    [US] US law with rules around electronic agreements/documents/disclosures:\n    used to obtain consent from consumers to receive electronic communications\n    (agreements, disclosures, statements, etc) about their accounts.\n\n    [CA] In order for you to send customers regulatory notices, disclosures, and\n    documents electronically and to collect their consent electronically, customers\n    need to acknowledge an Electronic Consent form. This should happen first so the\n    disclosures that follow are acknowledged with the customer’s consent to do so electronically.\n\n* `KYC_DATA_COLLECTION` –\n    [US] Document advising the customer that you will collect their personal information\n    (name, date of birth, tax ID, etc.)\n    and will be validating their information against external data/documentation.\n\n* `PAD_AUTHORIZATION` – \n    [CA] You must record a customer's authorization prior to facilitating a pre-authorized\n    EFT debit transaction. This form records their authorization for you to facilitate \n    future EFTs from their account. This can be a sporadic or recurring PAD; if sporadic, \n    you need to confirm the customer's authorization prior to each future transaction.\n\n* `PRIVACY_NOTICE` –\n    [US] Document that tells customers what is done with their non-public information,\n    who it is shared with, how is is secured,\n    and how they can opt out of it being shared beyond Synctera.\n\n    [CA] It is a requirement for you to disclose to customers how you collect, use,\n    disclose, and store their personal information, including how information is shared\n    with third parties like Synctera, what their rights are, and how they can withdraw\n    their consent. You must collect explicit consent from customers to this notice.\n\n\n* `OWNER_CERTIFICATION` –\n    [US] Disclosure to certify that the beneficial owners of the business have been correctly entered.\n\n    [CA] Applicable to business customers only, this certifies that the beneficial owners of the business\n    have been correctly entered.\n\n* `REG_CC` –\n    [US] US regulation that implements the Expedited Funds Availability Act:\n    describes standards for when a financial institution\n    makes funds available in a deposit account.\n\n* `REG_DD` –\n    [US] US regulation that implements the Truth in Savings Act,\n    to inform customers about the terms and rules for a deposit account.\n\n* `REG_E` –\n    [US] US regulation that implements the Electronic Funds Transfer Act:\n    covers liability for electronic transactions,\n    disputes for fraudulent or unrecognized electronic transactions,\n    and consent for electronic debits from a consumer's account.\n\n* `TERMS_AND_CONDITIONS` –\n    [US] A detailed agreement between you and the consumer for the\n    structure, terms, fees, charges, rates of the product or service,\n    and the rules for the relationship between you and the consumer.\n\n* `SC_ACCOUNT_AGREEMENT` –\n    [US] A detailed agreement between you and the consumer for the\n    structure and terms of service for smart card accounts.\n\n* `SC_SECURITY_AGREEMENT` –\n    [US] A detailed agreement between you and the consumer for the\n    terms of service for smart card security account.\n\n* `SC_AUTO_PAYMENT` -\n    [US] A detailed agreement between you and the consumer for the\n    structure and terms of service for smart card auto repayment.",
        "enum": [
          "ACH_AUTHORIZATION",
          "CARDHOLDER_AGREEMENT",
          "CARD_DISCLOSURE",
          "DIRECT_BILLING_AUTHORIZATION",
          "E_SIGN",
          "KYC_DATA_COLLECTION",
          "OWNER_CERTIFICATION",
          "PAD_AUTHORIZATION",
          "PRIVACY_NOTICE",
          "REG_CC",
          "REG_DD",
          "REG_E",
          "SC_ACCOUNT_AGREEMENT",
          "SC_AUTO_PAYMENT",
          "SC_SECURITY_AGREEMENT",
          "TERMS_AND_CONDITIONS"
        ],
        "type": "string"
      },
      "document_deletion_reason": {
        "description": "An explanation why the file was deleted. You must set a document's deletion_reason before deleting it.",
        "type": "string"
      },
      "document_encryption": {
        "description": "Whether the file will be encrypted by the Synctera platform before storing. All documents containing PII must be encrypted.\n\nCreating and retrieving encrypted documents requires documents_encrypted:write and documents_encrypted:read permissions, respectively.\n\nIf encryption is not specified, a default will be chosen based on the document type. See the following table.\n\nDocument types with a default of REQUIRED must be encrypted. It is an error to explicitly set encryption to NOT_REQUIRED for these document types.\n\nDocument types with a default of NOT_REQUIRED may optionally be encrypted by explicitly setting encryption to REQUIRED.\n\n| Document Type | Default Encryption |\n|---------------|---------------------|\n| ADDRESS_VERIFICATION       | REQUIRED |\n| APPLICATION_DOCUMENTATION  | NOT_REQUIRED |\n| BILLING_DOCUMENT           | NOT_REQUIRED |\n| CHECK_IMAGE                | REQUIRED |\n| COMPANY_PROFILE_DOCUMENT   | NOT_REQUIRED |\n| COMPLIANCE_REPORT          | REQUIRED |\n| DATE_OF_BIRTH_VERIFICATION | REQUIRED |\n| FINANCIAL_FILE             | REQUIRED |\n| IDENTITY_DOCUMENTATION     | REQUIRED |\n| INCOME_DOCUMENTATION       | REQUIRED |\n| STATEMENT                  | NOT_REQUIRED |\n| STATEMENT_DISCLOSURE       | NOT_REQUIRED |\n| TAX_FORM                   | REQUIRED |\n| TERMS_OF_SERVICE           | NOT_REQUIRED |\n",
        "enum": [
          "NOT_REQUIRED",
          "REQUIRED"
        ],
        "type": "string"
      },
      "document_encryption_version_post": {
        "deprecated": true,
        "description": "Whether the file will be encrypted by the Synctera platform before storing. All documents containing PII must be encrypted.\nWhen creating a new document version, the encryption value must match the encryption value of the previous version. Due to this, we recommend that you omit this property when creating a new document version.\nThis property is deprecated and will be removed in a future release.\n",
        "enum": [
          "NOT_REQUIRED",
          "REQUIRED"
        ],
        "type": "string"
      },
      "document_list": {
        "allOf": [
          {
            "$ref": "#/components/schemas/paginated_response"
          },
          {
            "properties": {
              "documents": {
                "description": "Array of documents",
                "items": {
                  "$ref": "#/components/schemas/document_response"
                },
                "type": "array"
              }
            },
            "required": [
              "documents"
            ],
            "type": "object"
          }
        ]
      },
      "document_patch": {
        "properties": {
          "batch_id": {
            "description": "The ID of the batch that the document belongs to",
            "type": "string"
          },
          "deletion_reason": {
            "$ref": "#/components/schemas/document_deletion_reason"
          },
          "description": {
            "description": "A description of the document",
            "type": "string"
          },
          "name": {
            "description": "A user-friendly name for the document",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/document_type"
          }
        },
        "type": "object"
      },
      "document_post": {
        "properties": {
          "batch_id": {
            "description": "The ID of the batch that the document belongs to",
            "type": "string"
          },
          "description": {
            "description": "A description of the attached document",
            "type": "string"
          },
          "encryption": {
            "$ref": "#/components/schemas/document_encryption"
          },
          "file": {
            "description": "The file contents. The maximum file size is 32 MB.",
            "format": "binary",
            "type": "string"
          },
          "metadata": {
            "description": "Optional field to store additional information about the resource. Intended to be used by the integrator to store non-sensitive data. Since some API clients have trouble formatting multipart/form-data properties that are objects, this property is defined as a string formatted to contain the marshalled JSON object.\n",
            "example": "{\"key\": \"value\"}",
            "type": "string"
          },
          "name": {
            "description": "A user-friendly name for the document",
            "type": "string"
          },
          "related_resource_id": {
            "description": "The ID of the resource related to the document",
            "format": "uuid",
            "type": "string"
          },
          "related_resource_type": {
            "$ref": "#/components/schemas/related_resource_type"
          },
          "type": {
            "$ref": "#/components/schemas/document_type"
          }
        },
        "required": [
          "file"
        ],
        "type": "object"
      },
      "document_response": {
        "properties": {
          "available_versions": {
            "$ref": "#/components/schemas/document_versions"
          },
          "available_versions_info": {
            "$ref": "#/components/schemas/document_versions_info"
          },
          "batch_id": {
            "description": "The ID of the batch that the document belongs to",
            "type": "string"
          },
          "creation_time": {
            "description": "The date and time the resource was created",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "deletion_reason": {
            "$ref": "#/components/schemas/document_deletion_reason"
          },
          "description": {
            "description": "A description of the document",
            "type": "string"
          },
          "encryption": {
            "$ref": "#/components/schemas/document_encryption"
          },
          "file_name": {
            "description": "The file name of the document",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "description": "The unique identifier for this resource",
            "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "last_updated_time": {
            "description": "The date and time the resource was last updated",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/metadata"
          },
          "name": {
            "description": "A user-friendly name for the document",
            "type": "string"
          },
          "related_resource_id": {
            "description": "The ID of the resource related to the document",
            "format": "uuid",
            "type": "string"
          },
          "related_resource_type": {
            "$ref": "#/components/schemas/related_resource_type"
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          },
          "type": {
            "$ref": "#/components/schemas/document_type"
          },
          "version": {
            "$ref": "#/components/schemas/document_version"
          }
        },
        "type": "object"
      },
      "document_type": {
        "description": "The type of the document. The type can be changed after the document is created, except that a non-encrypted document cannot be changed to a type that requires encryption.\n",
        "enum": [
          "ADDRESS_VERIFICATION",
          "APPLICATION_DOCUMENTATION",
          "BILLING_DOCUMENT",
          "CHECK_IMAGE",
          "COMPANY_PROFILE_DOCUMENT",
          "COMPLIANCE_REPORT",
          "DATE_OF_BIRTH_VERIFICATION",
          "FINANCIAL_FILE",
          "IDENTITY_DOCUMENTATION",
          "INCOME_DOCUMENTATION",
          "STATEMENT",
          "STATEMENT_DISCLOSURE",
          "TAX_FORM",
          "TERMS_OF_SERVICE"
        ],
        "type": "string"
      },
      "document_version": {
        "description": "Positive integer representing the version of the document",
        "type": "integer"
      },
      "document_version_info": {
        "properties": {
          "creation_time": {
            "description": "The date and time the resource was created",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "file_name": {
            "description": "The file name of the document",
            "readOnly": true,
            "type": "string"
          },
          "last_updated_time": {
            "description": "The date and time the resource was last updated",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "version": {
            "$ref": "#/components/schemas/document_version"
          }
        },
        "type": "object"
      },
      "document_version_post": {
        "properties": {
          "description": {
            "description": "A description of the attached document",
            "type": "string"
          },
          "encryption": {
            "$ref": "#/components/schemas/document_encryption_version_post"
          },
          "file": {
            "description": "The file contents",
            "format": "binary",
            "type": "string"
          },
          "name": {
            "description": "A user-friendly name for the document",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/document_type"
          }
        },
        "required": [
          "file"
        ],
        "type": "object"
      },
      "document_versions": {
        "description": "All document versions",
        "items": {
          "type": "integer"
        },
        "type": "array"
      },
      "document_versions_info": {
        "description": "Metadata of all document versions",
        "items": {
          "$ref": "#/components/schemas/document_version_info"
        },
        "type": "array"
      },
      "edd_account": {
        "allOf": [
          {
            "$ref": "#/components/schemas/edd_base_report"
          }
        ]
      },
      "edd_account_response": {
        "allOf": [
          {
            "$ref": "#/components/schemas/edd_base_report"
          },
          {
            "$ref": "#/components/schemas/edd_base_response"
          }
        ],
        "required": [
          "creation_time",
          "id"
        ]
      },
      "edd_base_report": {
        "properties": {
          "additional_questions": {
            "description": "Additional questions regarding the related resource",
            "items": {
              "$ref": "#/components/schemas/question"
            },
            "type": "array"
          },
          "case_id": {
            "description": "The ID of the case related to this EDD record",
            "maximum": 100000000000,
            "minimum": 0,
            "type": "integer"
          },
          "reason": {
            "description": "The reason for this EDD record to be requested",
            "enum": [
              "CASE_REQUEST",
              "STANDARD_SUBMISSION"
            ],
            "type": "string"
          },
          "related_resource_id": {
            "description": "related resource UUID",
            "format": "uuid",
            "type": "string"
          },
          "related_resource_type": {
            "$ref": "#/components/schemas/related_resource_type1"
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          }
        },
        "required": [
          "reason",
          "related_resource_id",
          "related_resource_type"
        ],
        "title": "Edd",
        "type": "object"
      },
      "edd_base_response": {
        "properties": {
          "creation_time": {
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "deletion_time": {
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "description": "EDD record unique identifier",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "creation_time",
          "deletion_time",
          "id"
        ],
        "type": "object"
      },
      "edd_business": {
        "allOf": [
          {
            "description": "The business specific data of this EDD report",
            "properties": {
              "country": {
                "description": "ISO-3166-1 Alpha-2 country code",
                "example": "US",
                "pattern": "^[A-Z]{2}$",
                "type": "string"
              },
              "estimated_revenue": {
                "$ref": "#/components/schemas/estimated_revenue"
              },
              "industry_type": {
                "$ref": "#/components/schemas/industry_type"
              },
              "negative_news_findings": {
                "$ref": "#/components/schemas/negative_news_findings"
              },
              "recurring_wire_usage": {
                "description": "True if the customer is expected to send or receive wire transfers at a regular frequency.",
                "example": true,
                "type": "boolean"
              },
              "specific_involvement": {
                "$ref": "#/components/schemas/specific_involvement"
              },
              "transaction_volume": {
                "description": "Array of transaction volumes.",
                "items": {
                  "$ref": "#/components/schemas/transaction_volume"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/edd_base_report"
          }
        ]
      },
      "edd_business_response": {
        "allOf": [
          {
            "$ref": "#/components/schemas/edd_business"
          },
          {
            "$ref": "#/components/schemas/edd_base_response"
          }
        ],
        "required": [
          "creation_time",
          "id"
        ]
      },
      "edd_customer": {
        "allOf": [
          {
            "description": "The customer specific data of this EDD report",
            "properties": {
              "citizenship_countries": {
                "description": "List of countries where the related customer holds citizenship.",
                "items": {
                  "description": "ISO-3166-1 Alpha-2 country code",
                  "example": "US",
                  "pattern": "^[A-Z]{2}$",
                  "type": "string"
                },
                "type": "array"
              },
              "employment_type": {
                "description": "The type of employment.",
                "enum": [
                  "CONTRACTOR",
                  "FULL_TIME",
                  "INTERN",
                  "OTHER",
                  "PART_TIME",
                  "RETIRED",
                  "SELF_EMPLOYED",
                  "STUDENT",
                  "TEMPORARY",
                  "UNEMPLOYED",
                  "VOLUNTEER"
                ],
                "type": "string"
              },
              "income": {
                "$ref": "#/components/schemas/income"
              },
              "negative_news_findings": {
                "$ref": "#/components/schemas/negative_news_findings"
              },
              "occupation": {
                "description": "The occupation of the related resource.",
                "type": "string"
              },
              "occupation_industry": {
                "$ref": "#/components/schemas/industry_type"
              },
              "recurring_direct_deposit": {
                "description": "True if the customer is expected to use direct deposit at a regular frequency.",
                "example": true,
                "type": "boolean"
              },
              "residence_type": {
                "description": "The type of residence.",
                "enum": [
                  "OTHER",
                  "OWN",
                  "RENT"
                ],
                "type": "string"
              },
              "residential_expense": {
                "$ref": "#/components/schemas/residential_expense"
              },
              "source_of_wealth": {
                "description": "The sources of wealth for the customer.",
                "items": {
                  "$ref": "#/components/schemas/source_of_wealth"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/edd_base_report"
          }
        ]
      },
      "edd_customer_response": {
        "allOf": [
          {
            "$ref": "#/components/schemas/edd_customer"
          },
          {
            "$ref": "#/components/schemas/edd_base_response"
          }
        ],
        "required": [
          "creation_time",
          "id"
        ]
      },
      "edd_list": {
        "allOf": [
          {
            "properties": {
              "edd_reports": {
                "description": "Array of edd reports.",
                "items": {
                  "$ref": "#/components/schemas/create_edd_response"
                },
                "type": "array"
              }
            },
            "required": [
              "edd_reports"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "edd_transaction": {
        "allOf": [
          {
            "description": "The transaction specific data of this EDD report",
            "properties": {
              "source_of_funds": {
                "description": "The source of funds for the transaction.",
                "enum": [
                  "INVESTMENT",
                  "OTHER",
                  "SALARY",
                  "SALES"
                ],
                "type": "string"
              },
              "transaction_purpose": {
                "description": "The purpose of the transaction.",
                "example": "Phone bill",
                "type": "string"
              }
            },
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/edd_base_report"
          }
        ]
      },
      "edd_transaction_response": {
        "allOf": [
          {
            "$ref": "#/components/schemas/edd_transaction"
          },
          {
            "$ref": "#/components/schemas/edd_base_response"
          }
        ],
        "required": [
          "creation_time",
          "id"
        ]
      },
      "eft_ca_base": {
        "description": "EFT transfer specific to Canada",
        "properties": {
          "amount": {
            "description": "Transfer amount in cents",
            "example": 10000,
            "format": "int64",
            "minimum": 1,
            "type": "integer"
          },
          "customer_id": {
            "description": "The UUID of the Synctera customer resource that is the originator of the transfer.\n",
            "example": "46fec39e-e776-4571-bf90-d0e1d15172fe",
            "format": "uuid",
            "type": "string"
          },
          "dc_sign": {
            "description": "Debit or credit sign",
            "enum": [
              "CREDIT",
              "DEBIT"
            ],
            "example": "DEBIT",
            "type": "string"
          },
          "source_data": {
            "description": "Additional information to be added to the transfer",
            "type": "object"
          },
          "transaction_code": {
            "description": "The three digit transaction code that identifies the type of transaction. More information can be found here: https://www.payments.ca/sites/default/files/standard007eng.pdf.\n",
            "example": 304,
            "maximum": 3,
            "minimum": 3,
            "type": "string"
          }
        },
        "required": [
          "amount",
          "customer_id",
          "dc_sign",
          "transaction_code"
        ],
        "title": "Electronic Funds Transfer",
        "type": "object"
      },
      "eft_ca_create": {
        "allOf": [
          {
            "$ref": "#/components/schemas/eft_ca_base"
          },
          {
            "properties": {
              "destination_account_id": {
                "description": "The UUID of the Synctera external account resource that is the destination of the transfer. This external account represents the account on the destination bank's platform.\n",
                "example": "fccb4a46-1261-4e91-b622-73b5b946183d",
                "format": "uuid",
                "type": "string"
              },
              "destination_account_owner_name": {
                "description": "The official name of the account owner of the destination account.\n",
                "example": "Jane Joe",
                "type": "string"
              },
              "effective_date": {
                "description": "The effective date of the transaction once it gets posted",
                "example": "2022-03-18",
                "format": "date",
                "type": "string"
              },
              "is_same_day": {
                "description": "Send the same day (use only is_same_day without specific effective_date).",
                "example": true,
                "type": "boolean"
              },
              "originating_account_id": {
                "description": "The UUID of the Synctera account resource originating the transfer.\n",
                "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
                "format": "uuid",
                "type": "string"
              },
              "originating_account_owner_name": {
                "description": "The official name of the account owner of the originating account. This must exactly match one of the account_owner_names in the destination external account.\n",
                "example": "John Doe",
                "format": "string",
                "type": "string"
              }
            },
            "required": [
              "destination_account_id",
              "destination_account_owner_name",
              "originating_account_id",
              "originating_account_owner_name"
            ]
          }
        ],
        "description": "Properties for creating a transfer",
        "title": "Electronic Funds Transfer Post",
        "type": "object"
      },
      "eft_ca_list": {
        "allOf": [
          {
            "$ref": "#/components/schemas/paginated_response"
          },
          {
            "properties": {
              "transfers": {
                "description": "Array of transfers.",
                "items": {
                  "$ref": "#/components/schemas/eft_ca_response"
                },
                "type": "array"
              }
            },
            "required": [
              "transfers"
            ],
            "type": "object"
          }
        ]
      },
      "eft_ca_patch": {
        "allOf": [
          {
            "properties": {
              "source_data": {
                "description": "Additional information to be added to the transfer",
                "type": "object"
              },
              "status": {
                "enum": [
                  "CANCELLED"
                ],
                "type": "string"
              }
            }
          }
        ],
        "description": "Properties for updating a transfer",
        "title": "Electronic Funds Transfer Patch",
        "type": "object"
      },
      "eft_ca_response": {
        "allOf": [
          {
            "$ref": "#/components/schemas/eft_ca_base"
          },
          {
            "properties": {
              "destination_account_id": {
                "description": "The UUID of the Synctera account that is the destination of the transfer. For a transfer originated by the Synctera platform, this will be an external account resource, while for a transfer originated by the external account, this account will be an account resource.\n",
                "example": "fccb4a46-1261-4e91-b622-73b5b946183d",
                "format": "uuid",
                "type": "string"
              },
              "destination_account_number": {
                "description": "The account number of the destination account.",
                "example": 1344012344,
                "format": "string",
                "type": "string"
              },
              "destination_account_owner_name": {
                "description": "The account owner name of the destination account.",
                "type": "string"
              },
              "effective_date": {
                "description": "The effective date of the transaction once it gets posted",
                "example": "2022-03-18",
                "format": "date",
                "type": "string"
              },
              "failed": {
                "description": "Whether the transfer failed or not.",
                "example": false,
                "type": "boolean"
              },
              "history": {
                "items": {
                  "$ref": "#/components/schemas/action"
                },
                "type": "array"
              },
              "id": {
                "description": "ID of the transfer",
                "format": "uuid",
                "type": "string"
              },
              "is_same_day": {
                "description": "Send the same day (use only is_same_day without specific effective_date).",
                "example": true,
                "type": "boolean"
              },
              "network_status": {
                "description": "The network status of the transfer.",
                "enum": [
                  "PENDING",
                  "POSTED",
                  "RETURNED",
                  "REVERSED"
                ],
                "example": "PENDING",
                "type": "string"
              },
              "originating_account_id": {
                "description": "The UUID of the Synctera account that is the origination of the transfer. For a transfer originated by the Synctera platform, this will be an account resource, while for a transfer originated by the external account, this will be an external account resource.\n",
                "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
                "format": "uuid",
                "type": "string"
              },
              "originating_account_number": {
                "description": "The account number of the originating account.",
                "example": 1961234745,
                "format": "string",
                "type": "string"
              },
              "originating_account_owner_name": {
                "description": "The account owner name of the origination account.",
                "type": "string"
              },
              "posting_date": {
                "description": "The posting date of the transaction once it gets posted",
                "example": "2022-03-18",
                "format": "date",
                "type": "string"
              },
              "reference_id": {
                "description": "The reference id of the transfer.",
                "example": 123456789,
                "type": "string"
              },
              "status": {
                "$ref": "#/components/schemas/eft_ca_status"
              },
              "subtype": {
                "description": "The subtype of the transfer",
                "enum": [
                  "BULK_OUTGOING_CREDIT",
                  "BULK_OUTGOING_CREDIT_RETURN",
                  "BULK_OUTGOING_CREDIT_RETURN_REVERSAL",
                  "BULK_OUTGOING_CREDIT_REVERSAL",
                  "BULK_OUTGOING_DEBIT",
                  "BULK_OUTGOING_DEBIT_RETURN",
                  "BULK_OUTGOING_DEBIT_RETURN_REVERSAL",
                  "BULK_OUTGOING_DEBIT_REVERSAL",
                  "INCOMING_CREDIT",
                  "INCOMING_CREDIT_RETURN",
                  "INCOMING_CREDIT_RETURN_REVERSAL",
                  "INCOMING_CREDIT_REVERSAL",
                  "INCOMING_DEBIT",
                  "INCOMING_DEBIT_RETURN",
                  "INCOMING_DEBIT_RETURN_REVERSAL",
                  "INCOMING_DEBIT_REVERSAL",
                  "OUTGOING_CREDIT",
                  "OUTGOING_CREDIT_RETURN",
                  "OUTGOING_CREDIT_RETURN_REVERSAL",
                  "OUTGOING_CREDIT_REVERSAL",
                  "OUTGOING_DEBIT",
                  "OUTGOING_DEBIT_RETURN",
                  "OUTGOING_DEBIT_RETURN_REVERSAL",
                  "OUTGOING_DEBIT_REVERSAL"
                ],
                "example": "INCOMING_CREDIT",
                "type": "string"
              },
              "tenant_id": {
                "$ref": "#/components/schemas/tenant_id"
              },
              "transaction_id": {
                "description": "The related transaction id of the transfer.",
                "example": "45b5246f-ad97-4629-9aac-465b74a05505",
                "format": "uuid",
                "type": "string"
              }
            },
            "required": [
              "destination_account_id",
              "destination_account_number",
              "destination_account_owner_name",
              "effective_date",
              "id",
              "is_same_day",
              "originating_account_id",
              "originating_account_number",
              "originating_account_owner_name",
              "reference_id",
              "status",
              "subtype",
              "tenant_id"
            ]
          }
        ],
        "description": "EFT transfer specific to Canada",
        "title": "Electronic Funds Transfer Response",
        "type": "object"
      },
      "eft_ca_status": {
        "description": "The status of the transfer in the Synctera platform. This is automatically set upon the creation of a transfer. To cancel a transfer, the current status must be 'INITIATED' or 'PENDING' and the request status set to 'CANCELLED'. To trigger a return, the current status must be 'POSTED' and the returned status will be set to 'RETURNED' if successful.\n",
        "enum": [
          "CANCELLED",
          "EXPIRED",
          "INITIATED",
          "IN_SUSPENSE",
          "PENDING",
          "POSTED"
        ],
        "example": "POSTED",
        "type": "string"
      },
      "emboss_name": {
        "description": "The customer details to emboss on the card - Defaults to customer first and last name. Is limited to 21 characters. Valid characters are A-Z, a-z, 0-9, space ( ), period (.), comma (,), forward slash (/), hyphen (-), ampersand (&), single quote (').",
        "properties": {
          "line_1": {
            "description": "line 1",
            "example": "Jane Smith",
            "type": "string"
          },
          "line_2": {
            "description": "line 2",
            "example": "Acme Inc.",
            "type": "string"
          }
        },
        "required": [
          "line_1"
        ],
        "type": "object"
      },
      "enhanced_transaction_response": {
        "description": "Financial data that has been refined by cleansing, categorizing and adding metadata.\nFor example, inconsistencies in raw transaction data that were introduced via data aggregation are removed,  transactions are categorized into groups such as \"groceries\" or utilities\", and metadata (such as merchant  names or location and timing details) are added for clarity.",
        "type": "object"
      },
      "error": {
        "description": "Synctera error responses in API v0 follow [RFC 7807](https://datatracker.ietf.org/doc/html/rfc7807). Following that standard, the field for a machine-readable \"error code\" in API v0 is `type`.\nIn our future API v1, we are phasing out RFC 7807 and adopting a custom error format. That format will be documented in our API v1 spec. But you may see some v0 error responses with a machine-readable `code` field while we are making the transition from v0 to v1.",
        "properties": {
          "code": {
            "description": "An optional “sneak preview” of our future API v1 error responses. This is provided to give integrators a chance to work with our future error codes. Error codes for the same error may change between v0 and v1.",
            "example": "BAD_REQUEST_BODY",
            "type": "string"
          },
          "detail": {
            "description": "A human-readable string explaining this particular error.\n",
            "example": "missing required fields: first_name, dob",
            "type": "string"
          },
          "status": {
            "description": "the HTTP status code for this response",
            "example": 400,
            "type": "integer"
          },
          "title": {
            "description": "A human-readable string for this general category of error, which corresponds 1-to-1 with error types (`title` is the human-readable version of `type`). There can be multiple distinct titles for the same HTTP status code, and the same `title` can result in many different `detail` strings.\nThis field will be removed in API v1.\n",
            "example": "Bad Request Body",
            "type": "string"
          },
          "type": {
            "description": "A machine-readable string that identifies the error for programmatic use. This is a URI, i.e. a globally unique identifier. It is _not_ necessarily a URL, so do not expect it to resolve to a web page. You can use this whole string as an error code, or just everything after the last slash.\nThis field will be removed in API v1.\n",
            "example": "https://dev.synctera.com/errors/bad-request-body",
            "type": "string"
          }
        },
        "title": "Standard error response (RFC 7807 problem report)",
        "type": "object"
      },
      "estimated_revenue": {
        "description": "The estimated revenue of the business.",
        "properties": {
          "amount": {
            "description": "The amount earned at the specified frequency. For example, $112.35 USD is represented as 11235 cents).",
            "example": 1000,
            "type": "integer"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          },
          "frequency": {
            "$ref": "#/components/schemas/frequency"
          }
        },
        "type": "object"
      },
      "event": {
        "description": "Webhook event object",
        "properties": {
          "event_resource": {
            "description": "Json string of object associated with the event. For example, if your event is ACCOUNT.CREATED, You can refer to Acccount to parse the account event to obtain the ID, status etc.\n",
            "type": "string"
          },
          "event_resource_changed_fields": {
            "description": "Json string of object associated with the event related to a resource change. This only contains those fields that have value changed on the event, and the field values are prior to the resource change event.\n",
            "type": "string"
          },
          "event_time": {
            "description": "Timestamp of the current event raised",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "Unique event ID of the webhook request. Use event endpoints to get more event summary data",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "metadata": {
            "description": "Metadata that stored in the webhook subscription",
            "maxLength": 1024,
            "type": "string"
          },
          "resource_id": {
            "description": "The ID of the resource this event occurred on, if available.",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "response_history": {
            "description": "Response history of the webhook request",
            "items": {
              "$ref": "#/components/schemas/response_history_item"
            },
            "type": "array"
          },
          "status": {
            "description": "Current event status. Failing event will keep retry until it is purged.",
            "enum": [
              "FAILED",
              "RETRYING",
              "RUNNING",
              "SUCCESS"
            ],
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/event_type_explicit"
          },
          "url": {
            "description": "URL that the current event will be sent to",
            "maxLength": 1024,
            "type": "string"
          },
          "webhook_id": {
            "description": "Webhook the current event belongs to",
            "format": "uuid",
            "type": "string"
          }
        },
        "title": "Webhook event",
        "type": "object"
      },
      "event_list": {
        "allOf": [
          {
            "$ref": "#/components/schemas/paginated_response"
          },
          {
            "properties": {
              "event_list": {
                "description": "Array of events",
                "items": {
                  "$ref": "#/components/schemas/event"
                },
                "type": "array"
              }
            },
            "required": [
              "event_list"
            ],
            "type": "object"
          }
        ]
      },
      "event_trigger": {
        "description": "Webhook event object that will be returned after triggering the given event. Only id, type and event_time will have value.",
        "properties": {
          "event_resource": {
            "deprecated": true,
            "description": "Json string of object associated with the event. For example, if your event is ACCOUNT.CREATED, You can refer to Acccount to parse the account event to obtain the ID, status etc.\n",
            "type": "string"
          },
          "event_resource_changed_fields": {
            "deprecated": true,
            "description": "Json string of object associated with the event related to a resource change. This only contains those fields that have value changed on the event, and the field values are prior to the resource change event.\n",
            "type": "string"
          },
          "event_time": {
            "description": "Timestamp of the current event raised",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "Unique event ID of the webhook request. Use event endpoints to get more event summary data",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "metadata": {
            "deprecated": true,
            "description": "Metadata that stored in the webhook subscription",
            "maxLength": 1024,
            "type": "string"
          },
          "response_history": {
            "deprecated": true,
            "description": "Response history of the webhook request",
            "items": {
              "$ref": "#/components/schemas/response_history_item"
            },
            "type": "array"
          },
          "status": {
            "deprecated": true,
            "description": "Current event status. Failing event will keep retry until it is purged.",
            "enum": [
              "FAILED",
              "RETRYING",
              "RUNNING",
              "SUCCESS"
            ],
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/event_type_explicit"
          },
          "url": {
            "deprecated": true,
            "description": "URL that the current event will be sent to",
            "maxLength": 1024,
            "type": "string"
          },
          "webhook_id": {
            "deprecated": true,
            "description": "Webhook the current event belongs to",
            "format": "uuid",
            "type": "string"
          }
        },
        "title": "Webhook event trigger",
        "type": "object"
      },
      "event_type": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/event_type_wildcard"
          },
          {
            "$ref": "#/components/schemas/event_type_explicit"
          }
        ]
      },
      "event_type_explicit": {
        "description": "All the webhook event types",
        "enum": [
          "ACCOUNT.CREATED",
          "ACCOUNT.UPDATED",
          "ACH.INCOMING.FUTURE_DATED",
          "ADDRESS.CREATED",
          "ADDRESS.UPDATED",
          "APPLICATION.CREATED",
          "APPLICATION.UPDATED",
          "BUSINESS.CREATED",
          "BUSINESS.UPDATED",
          "BUSINESS.VERIFICATION_OUTCOME.UPDATED",
          "CARD.CREATED",
          "CARD.DIGITALWALLETTOKEN.CREATED",
          "CARD.DIGITALWALLETTOKEN.UPDATED",
          "CARD.IMAGE.UPDATED",
          "CARD.THREE_DS.AUTHENTICATION",
          "CARD.THREE_DS.DECISION",
          "CARD.UPDATED",
          "CASE.CREATED",
          "CASE.UPDATED",
          "CASH_PICKUP.CREATED",
          "CASH_PICKUP.UPDATED",
          "CREDIT_SCORE.CREATED",
          "CUSTOMER.CREATED",
          "CUSTOMER.KYC_OUTCOME.UPDATED",
          "CUSTOMER.UPDATED",
          "EXTERNAL_CARD.CREATED",
          "EXTERNAL_CARD.DELETED",
          "EXTERNAL_CARD.UPDATED",
          "EXTERNAL_CARD_TRANSFER.CREATED",
          "EXTERNAL_CARD_TRANSFER.UPDATED",
          "INTEREST.MONTHLY_PAYOUT",
          "INTERNAL_ACCOUNT.CREATED",
          "INTERNAL_ACCOUNT.UPDATED",
          "INTERNAL_TRANSFER.SUCCEEDED",
          "NOTE.CREATED",
          "NOTE.UPDATED",
          "PAYMENT_SCHEDULE.CREATED",
          "PAYMENT_SCHEDULE.PAYMENT.CREATED",
          "PAYMENT_SCHEDULE.UPDATED",
          "PERSON.CREATED",
          "PERSON.UPDATED",
          "PERSON.VERIFICATION_OUTCOME.UPDATED",
          "STATEMENT.CREATED",
          "TRANSACTION.PENDING.CREATED",
          "TRANSACTION.PENDING.UPDATED",
          "TRANSACTION.POSTED.CREATED",
          "TRANSACTION.POSTED.UPDATED"
        ],
        "type": "string"
      },
      "event_type_wildcard": {
        "enum": [
          "ACCOUNT.*",
          "ACH.*",
          "APPLICATION.*",
          "BUSINESS.*",
          "CARD.*",
          "CASE.*",
          "CASH_PICKUP.*",
          "CREDIT_SCORE.*",
          "CUSTOMER.*",
          "EXTERNAL_CARD.*",
          "EXTERNAL_CARD_TRANSFER.*",
          "INTEREST.*",
          "INTERNAL_TRANSFER.*",
          "NOTE.*",
          "PAYMENT_SCHEDULE.*",
          "PERSON.*",
          "STATEMENT.*",
          "TRANSACTION.*"
        ],
        "type": "string"
      },
      "ext_account_customer_type": {
        "description": "The type of customer in the external financial institution. _Not_ necessarily the customer type on Synctera's platform: a business customer might link to the owner's personal account at an external financial institution.\n",
        "enum": [
          "BUSINESS",
          "PERSONAL"
        ],
        "type": "string"
      },
      "external_account": {
        "properties": {
          "account_identifiers": {
            "$ref": "#/components/schemas/account_identifiers"
          },
          "account_owner_names": {
            "description": "The names of the account owners. Values may be masked, in which case the array will be empty.\n",
            "items": {
              "example": "Jane Smith",
              "type": "string"
            },
            "type": "array"
          },
          "business_id": {
            "description": "The identifier for the business customer associated with this external account. Exactly one of `business_id` or `customer_id` will be returned.\n",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "creation_time": {
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          },
          "currency": {
            "description": "ISO 4217 alphabetic currency code",
            "example": "USD",
            "pattern": "^[A-Z]{3}$",
            "type": "string"
          },
          "customer_id": {
            "description": "The identifier for the personal customer associated with this external account. Exactly one of `customer_id` or `business_id` will be returned.\n",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "deletion_time": {
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "External account unique identifier",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "last_updated_time": {
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          },
          "metadata": {
            "description": "User-supplied JSON format metadata.",
            "type": "object"
          },
          "name": {
            "description": "The official name of the account",
            "example": "Plaid Checking",
            "type": "string"
          },
          "nickname": {
            "description": "A user-meaningful name for the account",
            "example": "Vacation savings",
            "nullable": true,
            "type": "string"
          },
          "routing_identifiers": {
            "$ref": "#/components/schemas/account_routing"
          },
          "status": {
            "description": "The current state of the account",
            "enum": [
              "ACTIVE",
              "CLOSED",
              "DELETED",
              "INACTIVE"
            ],
            "type": "string"
          },
          "status_reason": {
            "description": "The reason for the status for the external account.",
            "type": "string"
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          },
          "type": {
            "description": "The type of the account",
            "enum": [
              "CHECKING",
              "CREDIT_CARD",
              "CRYPTO_WALLET",
              "INVESTMENT_529",
              "MONEY_MARKET",
              "OTHER",
              "OTHER_BANK_ACCOUNT",
              "SAVINGS",
              "WALLET"
            ],
            "type": "string"
          },
          "vendor_data": {
            "$ref": "#/components/schemas/external_account_vendor_data"
          },
          "vendor_info": {
            "$ref": "#/components/schemas/vendor_info1"
          },
          "verification": {
            "$ref": "#/components/schemas/account_verification"
          }
        },
        "required": [
          "account_identifiers",
          "account_owner_names",
          "creation_time",
          "id",
          "last_updated_time",
          "routing_identifiers",
          "status",
          "type",
          "verification"
        ],
        "title": "External account",
        "type": "object"
      },
      "external_account_access_token": {
        "properties": {
          "business_id": {
            "description": "The identifier for the business customer associated with this external account. Exactly one of `business_id` or `customer_id` must be specified.\n",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "customer_id": {
            "description": "The identifier for the personal customer associated with this external account. Exactly one of `customer_id` or `business_id` must be specified.\n",
            "format": "uuid",
            "type": "string"
          },
          "request_id": {
            "description": "A unique identifier for the request, which can be used for troubleshooting",
            "readOnly": true,
            "type": "string"
          },
          "vendor_access_token": {
            "description": "The access token associated with the Item data is being requested for.",
            "readOnly": true,
            "type": "string"
          },
          "vendor_customer_id": {
            "description": "An alias for `customer_id` (deprecated).",
            "format": "uuid",
            "type": "string",
            "x-status": "deprecated"
          },
          "vendor_institution_id": {
            "description": "The ID of the institution the access token is requested for\n",
            "minLength": 1,
            "type": "string"
          },
          "vendor_public_token": {
            "description": "The user's public token obtained from successful link login.\n",
            "type": "string"
          }
        },
        "required": [
          "vendor_institution_id",
          "vendor_public_token"
        ],
        "type": "object"
      },
      "external_account_balance": {
        "properties": {
          "available": {
            "description": "The amount of funds available to be withdrawn from the account, as determined\nby the financial institution.\n\nThis is an integer in the minor currency unit (e.g. cents): 1025 means $10.25.\n",
            "example": 1025,
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "creation_time": {
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          },
          "currency": {
            "description": "ISO 4217 alphabetic currency code",
            "example": "USD",
            "type": "string"
          },
          "current": {
            "description": "For a `DEPOSITORY` account, this is the total amount of funds in the account.\n\nFor a `CREDIT` account, this is the amount owing. If negative, the lender\nowes the account holder.\n\nThis is an integer in the minor currency unit (e.g. cents):\n-2500 means $25.00 owed to the account holder.\n",
            "example": -2500,
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "last_updated_time": {
            "description": "The last time Synctera has fetched this balance from a vendor",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          },
          "last_updated_time_vendor": {
            "description": "Vendor timestamp of when the balance was last updated on the vendor side",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          },
          "limit": {
            "description": "For `DEPOSITORY` accounts, this is the pre-arranged overdraft limit, commonly\nused in Europe. In North America this is typically not set for depository accounts.\n\nFor `CREDIT` accounts, this is the credit limit on the account.\n\nThis is an integer in the minor currency unit (e.g. cents): 10000 means $100.00\n",
            "example": 10000,
            "format": "int64",
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "transactions_last_updated_time": {
            "description": "The last time Synctera has fetched transactions from a vendor",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "currency"
        ],
        "title": "External Account Balance",
        "type": "object"
      },
      "external_account_language": {
        "description": "The language that corresponds to the link token. For Plaid, see their [documentation](https://plaid.com/docs/api/tokens/#link-token-create-request-language) for a list of allowed values.\n",
        "enum": [
          "DE",
          "EN",
          "ES",
          "FR",
          "NL"
        ],
        "type": "string"
      },
      "external_account_link_token": {
        "properties": {
          "business_id": {
            "description": "The identifier for the business customer associated with this external account. Exactly one of `business_id` or `customer_id` must be specified.\n",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "client_name": {
            "description": "The name of your application, as it should be displayed in Link. Maximum length of 30 characters.",
            "type": "string"
          },
          "country_codes": {
            "description": "Country codes in the ISO-3166-1 alpha-2 country code standard.",
            "items": {
              "enum": [
                "CA",
                "US"
              ],
              "type": "string"
            },
            "minItems": 1,
            "type": "array"
          },
          "customer_id": {
            "description": "The identifier for the personal customer associated with this external account. Exactly one of `customer_id` or `business_id` must be specified.\n",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "expiration": {
            "description": "The expiration date for the link_token. Expires in 4 hours.",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "language": {
            "$ref": "#/components/schemas/external_account_language"
          },
          "link_customization_name": {
            "description": "The name of the Link customization from the Plaid Dashboard to be applied to Link. If not specified, the default customization will be used. When using a Link customization, the language in the customization must match the language selected via the language parameter, and the countries in the customization should match the country codes selected via country_codes.\n",
            "type": "string"
          },
          "link_token": {
            "description": "A link_token, which can be supplied to Link in order to initialize it and receive a public_token, which can be exchanged for an access_token.\n",
            "readOnly": true,
            "type": "string"
          },
          "redirect_uri": {
            "description": "A URI indicating the destination where a user should be forwarded after completing the Link flow; used to support OAuth authentication flows when launching Link in the browser or via a webview.\n",
            "type": "string"
          },
          "request_id": {
            "description": "A unique identifier for the request, which can be used for troubleshooting.",
            "readOnly": true,
            "type": "string"
          },
          "sdk_type": {
            "default": "WEB",
            "description": "Describes the environment of the client code running a vendor-supplied SDK",
            "enum": [
              "ANDROID",
              "IOS",
              "WEB"
            ],
            "type": "string"
          },
          "type": {
            "description": "The type of the link token. DEPOSITORY for checking and savings accounts, CREDIT for credit card type accounts, INVESTMENT for investment accounts, and MICRO_DEPOSIT for depository accounts with support for micro-deposits verification.",
            "enum": [
              "CREDIT",
              "DEPOSITORY",
              "INVESTMENT",
              "MICRO_DEPOSIT"
            ],
            "type": "string"
          },
          "vendor_access_token": {
            "description": "The access token associated with the Item data is being requested for.",
            "type": "string"
          },
          "vendor_institution_id": {
            "description": "The ID of the institution the access token is requested for. If present the link token will be created in an update mode.\n",
            "minLength": 1,
            "type": "string"
          },
          "verify_owner": {
            "default": false,
            "description": "If true, Synctera will attempt to verify that the external account owner is the same as the customer by comparing external account data to customer data. At least 2 of the following fields must match: name, phone number, email, address. Verification is disabled by default.\n",
            "type": "boolean"
          }
        },
        "required": [
          "client_name",
          "country_codes",
          "language",
          "type"
        ],
        "type": "object"
      },
      "external_account_network": {
        "description": "The infrastructure or network governing the transfer of assets for your account.",
        "enum": [
          "ALGORAND",
          "AVALANCHE",
          "BITCOIN",
          "CARDANO",
          "CIRCLE",
          "EOS",
          "ETHEREUM",
          "OTHER",
          "POLKADOT",
          "SOLANA",
          "TRON"
        ],
        "type": "string"
      },
      "external_account_transaction": {
        "properties": {
          "amount": {
            "description": "Transaction amount. Number in cents. E.g. 1000 represents $10.00",
            "format": "int64",
            "type": "integer"
          },
          "authorized_date": {
            "description": "Date that the transaction is authorized. ISO 8601 format ( YYYY-MM-DD ).",
            "format": "date",
            "nullable": true,
            "type": "string"
          },
          "category": {
            "description": "Category of the transaction",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "check_number": {
            "description": "Check number of the transaction. This field will be null if not a check transaction.",
            "type": "string"
          },
          "currency": {
            "description": "ISO 4217 alphabetic currency code",
            "example": "USD",
            "type": "string"
          },
          "date": {
            "description": "For pending transactions, this represents the date of the transaction occurred; for posted transactions, this represents the date of the transaction posted. ISO 8601 format ( YYYY-MM-DD ).\n",
            "format": "date",
            "type": "string"
          },
          "is_pending": {
            "description": "Indicates the transaction is pending or unsettled if true.",
            "type": "boolean"
          },
          "merchant_name": {
            "description": "Merchant name of the transaction",
            "example": "Fancy store",
            "type": "string"
          },
          "payment_channel": {
            "description": "channel used to make a payment",
            "enum": [
              "IN_STORE",
              "ONLINE",
              "OTHER"
            ],
            "type": "string",
            "x-enumDescriptions": {
              "IN_STORE": "In store transaction.",
              "ONLINE": "Online transaction.",
              "OTHER": "Transactions that relate to banks, e.g. fees or deposits."
            }
          },
          "payment_method": {
            "description": "Transfer type of the transaction, e.g. ACH",
            "type": "string"
          },
          "transaction_id": {
            "description": "case-sensitive transaction ID",
            "type": "string"
          },
          "transaction_type": {
            "description": "type of the transaction",
            "type": "string"
          }
        },
        "type": "object"
      },
      "external_account_transaction_refresh_response": {
        "properties": {
          "transactions_synced": {
            "description": "Number of transactions synced for the access token associated with this external account.\n",
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "transactions_synced"
        ],
        "type": "object"
      },
      "external_account_vendor_data": {
        "properties": {
          "account_number_mask": {
            "description": "The last alphanumeric characters of an account's official account number. Note that the mask may be non-unique between accounts, and it may also not match the mask that the bank displays to the user.\n",
            "type": "string"
          },
          "institution_id": {
            "description": "The ID of the institution external account belongs",
            "type": "string"
          }
        },
        "type": "object"
      },
      "external_account_vendor_values": {
        "description": "The vendor selected for the operation.\n",
        "enum": [
          "FINICITY",
          "PLAID"
        ],
        "type": "string"
      },
      "external_accounts_list": {
        "allOf": [
          {
            "properties": {
              "external_accounts": {
                "description": "Array of external accounts",
                "items": {
                  "$ref": "#/components/schemas/external_account"
                },
                "type": "array"
              }
            },
            "required": [
              "external_accounts"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "external_accounts_transaction_list": {
        "properties": {
          "transactions": {
            "description": "Array of transactions of a given external account",
            "items": {
              "$ref": "#/components/schemas/external_account_transaction"
            },
            "type": "array"
          }
        },
        "required": [
          "transactions"
        ],
        "type": "object"
      },
      "external_card_list_response": {
        "allOf": [
          {
            "properties": {
              "external_cards": {
                "description": "Array of External Cards",
                "items": {
                  "$ref": "#/components/schemas/external_card_response"
                },
                "type": "array"
              }
            },
            "required": [
              "external_cards"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "external_card_product_type": {
        "description": "Product type",
        "enum": [
          "CREDIT",
          "DEBIT",
          "PREPAID"
        ],
        "type": "string"
      },
      "external_card_request": {
        "properties": {
          "business_id": {
            "$ref": "#/components/schemas/business_id"
          },
          "customer_id": {
            "$ref": "#/components/schemas/customer_id1"
          },
          "name": {
            "description": "The cardholder name",
            "example": "Jean Valjean",
            "type": "string"
          },
          "token": {
            "description": "The token that was returned via tokenization iframe",
            "type": "string"
          }
        },
        "required": [
          "customer_id",
          "name",
          "token"
        ],
        "type": "object"
      },
      "external_card_response": {
        "properties": {
          "bin": {
            "description": "Bank Identification Number",
            "type": "string"
          },
          "created_time": {
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          },
          "currency": {
            "$ref": "#/components/schemas/currency_code"
          },
          "customer_id": {
            "$ref": "#/components/schemas/customer_id1"
          },
          "expiration_month": {
            "example": "06",
            "readOnly": true,
            "type": "string"
          },
          "expiration_year": {
            "example": "25",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "description": "External card ID",
            "type": "string"
          },
          "issuer": {
            "description": "Name of issuing financial institution",
            "type": "string"
          },
          "last_four": {
            "description": "The last 4 digits of the card PAN",
            "example": "1234",
            "readOnly": true,
            "type": "string"
          },
          "last_modified_time": {
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "description": "The cardholder name",
            "example": "Jean Valjean",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/external_card_status"
          },
          "verifications": {
            "$ref": "#/components/schemas/external_card_verifications"
          }
        },
        "required": [
          "currency",
          "customer_id",
          "expiration_month",
          "expiration_year",
          "id",
          "last_four",
          "name",
          "status"
        ],
        "type": "object"
      },
      "external_card_status": {
        "description": "Status of an External Card",
        "enum": [
          "ACTIVE",
          "SUSPENDED"
        ],
        "type": "string"
      },
      "external_card_update_request": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/external_card_status"
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "external_card_verifications": {
        "description": "Verify card passed AVS and CVV checks and if it able to perform PUSH/PULL transfers.",
        "properties": {
          "address_verification_result": {
            "description": "Address verification results\n\nStatus | Description\n--- | ---\nVERIFIED | AVS verified\nNOT_VERIFIED | AVS not verified\nADDRESS_MISMATCH | ZIP code match, address no match\nZIP_MISMATCH | Address match, ZIP code no match\nADDRESS_AND_ZIP_MISMATCH | Address and ZIP code no match\n",
            "enum": [
              "ADDRESS_AND_ZIP_MISMATCH",
              "ADDRESS_MISMATCH",
              "NOT_VERIFIED",
              "VERIFIED",
              "ZIP_MISMATCH"
            ],
            "type": "string"
          },
          "cvv2_result": {
            "description": "Card Verification Value results\n\nStatus | Description\n--- | ---\nVERIFIED | CVV and expiration date verified\nNOT_VERIFIED | CVV and expiration date not verified\nCVV_MISMATCH | Either CVV or expiration date does not match\nNOT_SUPPORTED | Issuer does not participate in CVV2 service\n",
            "enum": [
              "CVV_MISMATCH",
              "NOT_SUPPORTED",
              "NOT_VERIFIED",
              "VERIFIED"
            ],
            "type": "string"
          },
          "name_verification_result": {
            "description": "Issuer cardholder name verification result with Account Name Inquiry (ANI) service\nThe result of verifying the cardholder name against the name on file at the issuing institution.\nIf this fails, it means the issuing institution has a different person's name on file as the cardholder.\n\nStatus | Description\n--- | ---\nVERIFIED | ANI Name verified\nNOT_VERIFIED | ANI Name not verified\nNOT_SUPPORTED | Issuer does not participate in ANI service\nNAME_MISMATCH | ANI Name does not match\n",
            "enum": [
              "NAME_MISMATCH",
              "NOT_SUPPORTED",
              "NOT_VERIFIED",
              "VERIFIED"
            ],
            "type": "string"
          },
          "pull_details": {
            "$ref": "#/components/schemas/pull_details"
          },
          "pull_enabled": {
            "description": "Indicates if the card is able to perform PULL transfers.",
            "type": "boolean"
          },
          "push_details": {
            "$ref": "#/components/schemas/push_details"
          },
          "push_enabled": {
            "description": "Indicates if the card is able to perform PUSH transfers.",
            "type": "boolean"
          },
          "state": {
            "enum": [
              "FAILED",
              "SUCCEEDED"
            ],
            "type": "string"
          }
        },
        "required": [
          "address_verification_result",
          "cvv2_result",
          "name_verification_result",
          "pull_enabled",
          "push_enabled",
          "state"
        ],
        "type": "object"
      },
      "external_cards_funds_availability": {
        "description": "Estimated timeframe of funds availability\n\nValue | Description\n--- | ---\nNOW | Within 30 minutes\nNEXT | Within the next business day\nFEW | Within a few business days\n",
        "enum": [
          "FEW",
          "NEXT",
          "NOW"
        ],
        "type": "string"
      },
      "external_data": {
        "description": "an unstructured json blob representing additional transaction information supplied by the integrator.",
        "nullable": true,
        "type": "object"
      },
      "fee": {
        "properties": {
          "amount": {
            "description": "Fee amount",
            "format": "int64",
            "type": "integer"
          },
          "currency": {
            "description": "Fee currency code in ISO 4217",
            "pattern": "^[A-Z]{3}$",
            "type": "string"
          },
          "fee_type": {
            "description": "Fee type",
            "enum": [
              "ACH_FEE",
              "ANNUAL_FEE",
              "ATM_WITHDRWAL_FEE",
              "MONTHLY_FEE",
              "OVERDRAFT_FEE",
              "WIRE_FEE"
            ],
            "type": "string"
          },
          "id": {
            "description": "Fee ID",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "product_type": {
            "enum": [
              "FEE",
              "INTEREST"
            ],
            "type": "string"
          }
        },
        "required": [
          "amount",
          "currency",
          "fee_type",
          "product_type"
        ],
        "type": "object"
      },
      "financial": {
        "properties": {
          "tax_id": {
            "example": "TAX123",
            "type": "string"
          },
          "total_tax_amount": {
            "example": 200,
            "format": "int64",
            "type": "integer"
          },
          "total_tax_amount_indicator": {
            "example": "Indicator",
            "type": "string"
          }
        },
        "type": "object"
      },
      "financial_institution": {
        "properties": {
          "legal_address": {
            "$ref": "#/components/schemas/address2"
          },
          "name": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          }
        },
        "title": "Financial Institution",
        "type": "object"
      },
      "financial_institution1": {
        "properties": {
          "address": {
            "$ref": "#/components/schemas/address3"
          },
          "id_code": {
            "description": "A code describing the type of identifier in the \"identifier\" field.\n",
            "enum": [
              "CHIPS_ID",
              "CHIPS_PARTICIPANT",
              "DDA_NUMBER",
              "FED_ROUTING",
              "SWIFT_BIC"
            ],
            "type": "string"
          },
          "identifier": {
            "description": "The identifier for the Financial Institution. See \"id_code\" for possible values.\n",
            "maxLength": 34,
            "type": "string"
          },
          "name": {
            "maxLength": 35,
            "type": "string"
          }
        },
        "type": "object"
      },
      "financial_request_model": {
        "properties": {
          "amount": {
            "description": "The amount of the transaction in the smallest whole denomination of the applicable currency (eg. For USD use cents)",
            "type": "integer"
          },
          "card_acceptor": {
            "$ref": "#/components/schemas/card_acceptor_model"
          },
          "card_id": {
            "format": "uuid",
            "type": "string"
          },
          "cash_back_amount": {
            "description": "Cash back amount in the smallest whole denomination of the applicable currency (eg. For USD use cents)",
            "type": "integer"
          },
          "is_pre_auth": {
            "default": false,
            "type": "boolean"
          },
          "mid": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "pin": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string"
          },
          "transaction_options": {
            "$ref": "#/components/schemas/transaction_options"
          }
        },
        "required": [
          "amount",
          "card_acceptor",
          "card_id",
          "mid"
        ],
        "type": "object"
      },
      "finicity_account_verification": {
        "allOf": [
          {
            "$ref": "#/components/schemas/base_account_verification"
          }
        ],
        "title": "Information specific to Finicity verification"
      },
      "fleets": {
        "properties": {
          "driver_id": {
            "example": "DR789",
            "type": "string"
          },
          "expanded_fuel_type": {
            "example": "TypeB",
            "type": "string"
          },
          "fleet_number": {
            "example": "FL123",
            "type": "string"
          },
          "fuel_gross_amount": {
            "example": 220,
            "format": "int64",
            "type": "integer"
          },
          "fuel_net_amount": {
            "example": 200,
            "format": "int64",
            "type": "integer"
          },
          "fuel_product_qualifier": {
            "example": "QualifierA",
            "type": "string"
          },
          "fuel_purchase_type": {
            "example": "TypeA",
            "type": "string"
          },
          "fuel_quantity": {
            "example": 50,
            "format": "float",
            "type": "number"
          },
          "fuel_service_type": {
            "example": "ServiceA",
            "type": "string"
          },
          "fuel_tax_amount": {
            "example": 20,
            "format": "int64",
            "type": "integer"
          },
          "fuel_tax_exemption_status": {
            "example": "Exempt",
            "type": "string"
          },
          "fuel_type": {
            "example": "Diesel",
            "type": "string"
          },
          "fuel_unit_of_measure": {
            "example": "Liters",
            "type": "string"
          },
          "fuel_unit_price": {
            "example": 1.5,
            "format": "float",
            "type": "number"
          },
          "job_number": {
            "example": "JN456",
            "type": "string"
          },
          "non_fuel_gross_amount": {
            "example": 330,
            "format": "int64",
            "type": "integer"
          },
          "non_fuel_item_details": {
            "items": {
              "$ref": "#/components/schemas/non_fuel_item_details"
            },
            "type": "array"
          },
          "non_fuel_net_amount": {
            "example": 300,
            "format": "int64",
            "type": "integer"
          },
          "non_fuel_tax_amount": {
            "example": 30,
            "format": "int64",
            "type": "integer"
          },
          "non_fuel_tax_exemption_status": {
            "example": "Non-Exempt",
            "type": "string"
          },
          "odometer_reading": {
            "example": "123456",
            "type": "string"
          },
          "sales_tax_amount": {
            "example": 100,
            "format": "int64",
            "type": "integer"
          },
          "service_type": {
            "example": "Maintenance",
            "type": "string"
          },
          "type_of_purchase": {
            "example": "Fuel",
            "type": "string"
          },
          "vat_tax_rate": {
            "example": 0.15,
            "format": "float",
            "type": "number"
          },
          "vehicle_id": {
            "example": "VH012",
            "type": "string"
          }
        },
        "type": "object"
      },
      "fleets_emv": {
        "properties": {
          "employee_number": {
            "example": "EMP001",
            "type": "string"
          },
          "expanded_fuel_type": {
            "example": "TypeC",
            "type": "string"
          },
          "fuel_gross_amount": {
            "example": 165,
            "format": "int64",
            "type": "integer"
          },
          "fuel_net_amount": {
            "example": 150,
            "format": "int64",
            "type": "integer"
          },
          "fuel_quantity": {
            "example": 40,
            "format": "float",
            "type": "number"
          },
          "fuel_unit_of_measure": {
            "example": "Gallons",
            "type": "string"
          },
          "fuel_unit_price": {
            "example": 1.1,
            "format": "float",
            "type": "number"
          },
          "non_fuel_gross_amount": {
            "example": 275,
            "format": "int64",
            "type": "integer"
          },
          "non_fuel_item_details": {
            "items": {
              "$ref": "#/components/schemas/non_fuel_item_details"
            },
            "type": "array"
          },
          "non_fuel_net_amount": {
            "example": 250,
            "format": "int64",
            "type": "integer"
          },
          "odometer_reading": {
            "example": "654321",
            "type": "string"
          },
          "service_type": {
            "example": "Repair",
            "type": "string"
          },
          "trailer_number": {
            "example": "TR002",
            "type": "string"
          },
          "type_of_purchase": {
            "example": "Non-Fuel",
            "type": "string"
          },
          "vat_tax_rate": {
            "example": 0.15,
            "format": "float",
            "type": "number"
          }
        },
        "type": "object"
      },
      "form": {
        "description": "PHYSICAL or VIRTUAL.",
        "enum": [
          "PHYSICAL",
          "VIRTUAL"
        ],
        "type": "string"
      },
      "frequency": {
        "description": "The frequency of the expense",
        "enum": [
          "BI_WEEKLY",
          "DAILY",
          "MONTHLY",
          "ONE_TIME",
          "OTHER",
          "QUARTERLY",
          "SEMI_MONTHLY",
          "WEEKLY",
          "YEARLY"
        ],
        "nullable": true,
        "type": "string"
      },
      "fulfillment_details": {
        "properties": {
          "ship_date": {
            "description": "The date that the card was shipped as reported by the card fulfillment provider",
            "example": "2022-07-19",
            "format": "date",
            "readOnly": true,
            "type": "string"
          },
          "shipping_method": {
            "description": "The specific shipping method as reported by the card fulfillment provider",
            "example": "UPS Next Day Air Saver",
            "readOnly": true,
            "type": "string"
          },
          "tracking_number": {
            "description": "The shipment tracking number",
            "example": "1ZW3268W1319325382",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "funds_ownership": {
        "description": "An account's funds ownership indicates which organization owns the funds in the account. For example, some GENERAL_LEDGER accounts have funds owned by the bank, even though the account is in the fintech tenant. Fintechs are not able to perform money movement on accounts where the bank or platform owns the funds. This read-only property is determined by the account_type and general_ledger_type.\n",
        "enum": [
          "BANK",
          "FINTECH",
          "PLATFORM"
        ],
        "title": "Funds Ownership",
        "type": "string"
      },
      "gateway_config": {
        "description": "Represents a Gateway Config Object",
        "properties": {
          "created": {
            "description": "Time when Gateway Config object was created",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string",
            "x-go-type-skip-optional-pointer": true
          },
          "custom_headers": {
            "additionalProperties": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "description": "Optional parameter that allows to configure custom http headers for the Auth request to Gateway URL if needed",
            "example": {
              "Content-Type": [
                "application/json",
                "text/html"
              ],
              "Host": [
                "https://host.com"
              ]
            },
            "type": "object",
            "x-go-type": "map[string][]string"
          },
          "disabled": {
            "default": false,
            "description": "Indicates if the Gateway Config is active for Auth Flow for the current Fintech (Tenant)",
            "type": "boolean",
            "x-go-type-skip-optional-pointer": true
          },
          "id": {
            "description": "Identifier of the Gateway Config object",
            "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
            "format": "uuid",
            "type": "string",
            "x-go-name": "ID",
            "x-go-type": "uuid.UUID",
            "x-go-type-import": {
              "path": "github.com/google/uuid"
            },
            "x-go-type-skip-optional-pointer": true
          },
          "max_wait_ms": {
            "default": 1500,
            "description": "Shows maximum amount of time in milliseconds that we will wait for the response from Gateway URL Auth request",
            "minimum": 1,
            "type": "integer",
            "x-go-type": "uint",
            "x-go-type-skip-optional-pointer": true
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          },
          "updated": {
            "description": "Time when Gateway Config object was updated",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string",
            "x-go-type-skip-optional-pointer": true
          },
          "url": {
            "description": "The URL address which will be used for the ACH in Auth Flow requests to get authorization from the fintech to process the transaction",
            "example": "https://fintech.com/ach/auth",
            "format": "url",
            "type": "string",
            "x-go-name": "URL",
            "x-go-type-skip-optional-pointer": true
          }
        },
        "required": [
          "tenant"
        ],
        "type": "object",
        "x-go-name": "ConfigResp"
      },
      "gateway_custom_headers": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Custom Headers of the Authorization gateway",
        "type": "object"
      },
      "gateway_id": {
        "description": "The unique identifier of an Authorization gateway config",
        "format": "uuid",
        "type": "string"
      },
      "gateway_list_response": {
        "allOf": [
          {
            "properties": {
              "gateways": {
                "description": "Array of Authorization gateway configuration",
                "items": {
                  "$ref": "#/components/schemas/gateway_response"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "gateway_patch": {
        "description": "Gateway Config Update Request",
        "properties": {
          "custom_headers": {
            "additionalProperties": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "description": "Custom http headers for the Auth request to Gateway URL",
            "example": {
              "Content-Type": [
                "application/json",
                "text/html"
              ],
              "Host": [
                "https://host.com"
              ]
            },
            "nullable": true,
            "type": "object",
            "x-go-type": "map[string][]string"
          },
          "disabled": {
            "description": "Allows to disable/enable Gateway Config for the Fintech (Tenant)",
            "type": "boolean"
          },
          "max_wait_ms": {
            "description": "Maximum amount of time in milliseconds that we will wait for the response from Gateway URL request",
            "minimum": 1,
            "type": "integer",
            "x-go-type": "uint",
            "x-oapi-codegen-extra-tags": {
              "validate": "omitempty,gt=0"
            }
          },
          "url": {
            "description": "The URL address which will be used for the ACH in Auth Flow requests to get authorization from the fintech to process the transaction",
            "example": "https://fintech.com/ach/auth",
            "format": "url",
            "type": "string",
            "x-go-name": "URL",
            "x-oapi-codegen-extra-tags": {
              "validate": "omitempty,url"
            }
          }
        },
        "type": "object",
        "x-go-name": "PatchReq"
      },
      "gateway_post": {
        "description": "Gateway Config Create Request",
        "properties": {
          "custom_headers": {
            "additionalProperties": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "description": "Optional parameter that allows to configure custom http headers for the Auth request to Gateway URL if needed",
            "example": {
              "Content-Type": [
                "application/json",
                "text/html"
              ],
              "Host": [
                "https://host.com"
              ]
            },
            "type": "object",
            "x-go-type": "map[string][]string"
          },
          "disabled": {
            "default": false,
            "description": "Setting this parameter to 'true' allows create Gateway Config as inactive ( can be useful as a preparation step)",
            "type": "boolean",
            "x-go-type-skip-optional-pointer": true
          },
          "max_wait_ms": {
            "default": 1500,
            "description": "Optional parameter that configures the maximum amount of time in milliseconds that we will wait for the response from Gateway URL request. Default value is used if empty",
            "maximum": 32000,
            "minimum": 1,
            "type": "integer",
            "x-go-type": "uint",
            "x-oapi-codegen-extra-tags": {
              "validate": "omitempty,gt=0"
            }
          },
          "url": {
            "description": "The URL address which will be used for the ACH in Auth Flow requests to get authorization from the fintech to process the transaction",
            "example": "https://fintech.com/ach/auth",
            "format": "url",
            "type": "string",
            "x-go-name": "URL",
            "x-oapi-codegen-extra-tags": {
              "validate": "required,url"
            }
          }
        },
        "required": [
          "url"
        ],
        "type": "object",
        "x-go-name": "PostReq"
      },
      "gateway_response": {
        "properties": {
          "active": {
            "description": "Current status of the Authorization gateway",
            "type": "boolean"
          },
          "card_products": {
            "description": "List of Card Product unique identifiers that will utilize the Gateway",
            "items": {
              "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "creation_time": {
            "description": "The timestamp representing when the gateway config request was made",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "custom_headers": {
            "$ref": "#/components/schemas/gateway_custom_headers"
          },
          "id": {
            "description": "Gateway ID",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "last_modified_time": {
            "description": "The timestamp representing when the gateway config was last modified at",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "standin": {
            "$ref": "#/components/schemas/gateway_standin"
          },
          "url": {
            "description": "URL of the Authorization gateway",
            "format": "uri",
            "maxLength": 1000,
            "type": "string"
          }
        },
        "required": [
          "active",
          "card_products",
          "creation_time",
          "id",
          "last_modified_time",
          "url"
        ],
        "type": "object"
      },
      "gateway_standin": {
        "properties": {
          "enabled": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "general_ledger_category": {
        "description": "The category of the general ledger account. This read-only property is determined by the general_ledger_type.",
        "enum": [
          "CORE",
          "PROFIT_AND_LOSS",
          "RESERVE",
          "SETTLEMENT",
          "SUSPENSE",
          "TREASURY"
        ],
        "type": "string"
      },
      "general_ledger_type": {
        "description": "The type of general ledger account. This is required when creating a general ledger account.",
        "enum": [
          "ACH_SETTLEMENT",
          "ACH_SUSPENSE",
          "ALLOCATED_SUSPENSE",
          "BANK_DRAFT",
          "BILLING_EXPENSE",
          "BILLING_REVENUE",
          "CARD_AFT_PREFUNDING",
          "CARD_OCT_SETTLEMENT",
          "CARD_SETTLEMENT",
          "CASH_SETTLEMENT",
          "CASH_SUSPENSE",
          "CHECK_SETTLEMENT",
          "DISPUTE_WRITE_OFF_PNL",
          "EFT_CA_SETTLEMENT",
          "EFT_CA_SUSPENSE",
          "EXTERNAL_CARD_AFT_SETTLEMENT",
          "EXTERNAL_CARD_OCT_SETTLEMENT",
          "FEDNOW_SETTLEMENT",
          "FEES",
          "FRAUD_LOSSES",
          "FUNDING_ACCOUNTS",
          "GENERAL_PNL",
          "INTEREST_PAYOUT",
          "INTERNATIONAL_WIRE_SETTLEMENT",
          "IN_STORE_CASH_SETTLEMENT",
          "LOC_INTEREST_INCOME",
          "LOC_INVESTOR_PORTFOLIO",
          "LOC_REPURCHASE",
          "MONEY_IN_AND_OUT",
          "NEGATIVE_BALANCE",
          "NETWORK_ADJUSTMENT",
          "NETWORK_CHARGEBACK",
          "NEW_FUNDING_ACCOUNT",
          "PROVISIONAL_CREDIT_PNL",
          "RESERVE",
          "REWARDS",
          "SC_INVESTOR_PORTFOLIO",
          "SC_REPURCHASE",
          "SYNCTERA_PAY_SUSPENSE",
          "USC_INTEREST_INCOME",
          "USC_INVESTOR_PORTFOLIO",
          "USC_REPURCHASE",
          "WIRE_SETTLEMENT",
          "WIRE_SUSPENSE",
          "WRITE_OFF"
        ],
        "type": "string"
      },
      "google_digital_wallet_provision_request": {
        "properties": {
          "device_id": {
            "description": "The user’s Android device ID; the device’s unique identifier.",
            "maxLength": 24,
            "type": "string"
          },
          "device_type": {
            "$ref": "#/components/schemas/device_type"
          },
          "provisioning_app_version": {
            "$ref": "#/components/schemas/provisioning_app_version"
          },
          "wallet_account_id": {
            "description": "The user’s Google wallet account ID.",
            "maxLength": 50,
            "type": "string"
          }
        },
        "required": [
          "device_id",
          "device_type",
          "provisioning_app_version",
          "wallet_account_id"
        ],
        "type": "object"
      },
      "google_digital_wallet_provision_response": {
        "properties": {
          "card_id": {
            "$ref": "#/components/schemas/card_id"
          },
          "created_time": {
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          },
          "last_modified_time": {
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          },
          "push_tokenize_request_data": {
            "$ref": "#/components/schemas/push_tokenize_request_data"
          }
        },
        "type": "object"
      },
      "grace_period": {
        "description": "The number of days past the billing period to allow for payment before it is considered due. This directly infers the due date for a payment. The default will be set to 21 days.\n",
        "maximum": 28,
        "minimum": 21,
        "type": "integer"
      },
      "has_accounts": {
        "description": "This flag indicates whether the person or business has accounts.",
        "readOnly": true,
        "type": "boolean"
      },
      "hold_data": {
        "properties": {
          "amount": {
            "type": "integer"
          },
          "availability_time": {
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "amount",
          "availability_time"
        ],
        "type": "object"
      },
      "iat_address": {
        "properties": {
          "city_state_province": {
            "description": "City and State / Province. Should be separated with an asterisk (*) as a delimiter.",
            "example": "San Francisco*CA",
            "type": "string"
          },
          "country_postal_code": {
            "description": "Country and Postal Code. Should be separated with an asterisk (*) as a delimiter.",
            "example": "US*10036",
            "type": "string"
          },
          "street": {
            "description": "The street address",
            "type": "string"
          }
        },
        "required": [
          "city_state_province",
          "country_postal_code",
          "street"
        ],
        "type": "object"
      },
      "iat_data": {
        "description": "Aggregates contents of the IAT addenda records (10-16)",
        "properties": {
          "foreign_payment_amount": {
            "description": "For inbound IAT payments this field should contain the USD amount or may be blank. Amount is in cents ($100 would be 10000).",
            "type": "integer"
          },
          "foreign_trace_number": {
            "type": "string"
          },
          "name": {
            "description": "Receiving Company Name/Individual Name",
            "type": "string"
          },
          "odfi_branch_country_code": {
            "description": "For Inbound IATs: This 3 position field contains a 2-character code as approved by the International Organization for Standardization (ISO) used to identify the country in which the branch of the bank that originated the entry is located. Values for other countries can be found on the International Organization for Standardization website: www.iso.org.\n",
            "type": "string"
          },
          "odfi_id_number_qualifier": {
            "description": "For Inbound IATs: The 2-digit code that identifies the numbering scheme used in the Foreign DFI Identification Number field: 01 = National Clearing System 02 = BIC Code 03 = IBAN Code\n",
            "type": "string"
          },
          "odfi_identification": {
            "description": "For Inbound IATs: This field contains the bank ID number of the Foreign Bank providing funding for the payment transaction.\n",
            "type": "string"
          },
          "odfi_name": {
            "description": "For Inbound IATs: The name of the foreign bank providing funding for the payment transaction\n",
            "type": "string"
          },
          "originator_address": {
            "$ref": "#/components/schemas/iat_address"
          },
          "originator_name": {
            "description": "The originators name",
            "type": "string"
          },
          "rdfi_branch_country_code": {
            "description": "This 3 position field contains a 2-character code as approved by the International Organization for Standardization (ISO) used to identify the country in which the branch of the bank that receives the entry is located. Values for other countries can be found on the International Organization for Standardization website: www.iso.org\n",
            "type": "string"
          },
          "rdfi_id_number_qualifier": {
            "description": "The 2-digit code that identifies the numbering scheme used in the Receiving DFI Identification Number field: 01 = National Clearing System 02 = BIC Code 03 = IBAN Code\n",
            "type": "string"
          },
          "rdfi_identification": {
            "description": "The bank identification number of the DFI at which the Receiver maintains his account.",
            "type": "string"
          },
          "rdfi_name": {
            "description": "Name of the Receiver's bank",
            "type": "string"
          },
          "receiver_address": {
            "$ref": "#/components/schemas/iat_address"
          },
          "receiver_id_number": {
            "description": "The accounting number by which the Originator is known to the Receiver for descriptive purposes.",
            "type": "string"
          },
          "transaction_type_code": {
            "description": "Transaction Type Code Describes the type of payment ANN = Annuity, BUS = Business/Commercial, DEP = Deposit, LOA = Loan, MIS = Miscellaneous, MOR = Mortgage PEN = Pension, RLS = Rent/Lease, REM = Remittance2, SAL = Salary/Payroll, TAX = Tax, TEL = Telephone-Initiated Transaction WEB = Internet-Initiated Transaction, ARC = Accounts Receivable Entry, BOC = Back Office Conversion Entry, POP = Point of Purchase Entry, RCK = Re-presented Check Entry\n",
            "type": "string"
          }
        },
        "required": [
          "foreign_payment_amount",
          "foreign_trace_number",
          "name",
          "odfi_branch_country_code",
          "odfi_id_number_qualifier",
          "odfi_identification",
          "odfi_name",
          "originator_address",
          "originator_name",
          "rdfi_branch_country_code",
          "rdfi_id_number_qualifier",
          "rdfi_identification",
          "rdfi_name",
          "receiver_address",
          "receiver_id_number",
          "transaction_type_code"
        ],
        "type": "object"
      },
      "id": {
        "description": "The unique identifier for this resource.",
        "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
        "format": "uuid",
        "readOnly": true,
        "type": "string"
      },
      "in_app_provisioning": {
        "properties": {
          "address_verification": {
            "$ref": "#/components/schemas/digital_wallet_token_address_verification"
          },
          "enabled": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "income": {
        "description": "The customer's income.",
        "properties": {
          "amount": {
            "description": "The amount earned at the specified frequency. For example, $112.35 USD is represented as 11235 cents.",
            "example": 1000,
            "maximum": 100000000000,
            "minimum": 0,
            "type": "integer"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          },
          "frequency": {
            "$ref": "#/components/schemas/frequency"
          },
          "source": {
            "description": "The source of the income",
            "enum": [
              "ALIMONY",
              "EMPLOYMENT",
              "INHERITANCE",
              "INVESTMENT",
              "OTHER",
              "PENSION",
              "REAL_ESTATE",
              "RETIREMENT_INCOME",
              "SCHOLARSHIP",
              "SOCIAL_SECURITY",
              "UNEMPLOYMENT"
            ],
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "incoming_ach": {
        "description": "Represents an incoming ACH entry.",
        "properties": {
          "account_id": {
            "description": "The unique identifier for a receiving account. If the entry is in suspense (status = \"IN_SUSPENSE\"), this represents the intended customer account, i.e. the account that 'account_no' from the ACH entry refers to (if it exists in the Synctera system). If the entry has been posted (status = \"POSTED\"), it is the account the transaction was actually posted to. In that case it does not necessarily correspond to the account number in 'account_no'.\n",
            "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
            "format": "uuid",
            "type": "string"
          },
          "account_no": {
            "description": "Receiving account number. This is the account number from the ACH entry, actual account the transaction gets posted to after processing may be different (e.g. suspense account).",
            "example": "122455799",
            "type": "string"
          },
          "amount": {
            "description": "Transfer amount in cents ($100 would be 10000)",
            "example": 10000,
            "type": "integer"
          },
          "company_entry_description": {
            "description": "Company Entry Description field in ACH batch header.",
            "example": "PAYROLL",
            "type": "string"
          },
          "company_name": {
            "description": "Company Name field in ACH batch header.",
            "example": "Asdf Finance",
            "type": "string"
          },
          "dc_sign": {
            "description": "The type of transaction (debit or credit). An incoming debit pulls money out of the receiving account, a credit is a transfer in.",
            "enum": [
              "credit",
              "debit"
            ],
            "type": "string"
          },
          "decline_reason": {
            "description": "Free-form text describing the reason why this entry did not post to the intended account when first processed.",
            "example": "Suspected fraud",
            "type": "string"
          },
          "effective_date": {
            "description": "Effective date of the transaction",
            "example": "2022-03-25",
            "format": "date",
            "type": "string"
          },
          "external_id": {
            "description": "Transaction ID in the ledger. The transaction may not exist yet in case the entry is a future-dated ACH.",
            "format": "uuid",
            "type": "string"
          },
          "iat_info": {
            "$ref": "#/components/schemas/iat_data"
          },
          "id": {
            "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
            "format": "uuid",
            "type": "string"
          },
          "identification_number": {
            "description": "Value in this field varies depending on the SEC code. Can contain check serial number, identification number or a name of the originator.",
            "type": "string"
          },
          "is_future_dated": {
            "description": "Was the effective date in the future when the entry was received?",
            "type": "boolean"
          },
          "notification_of_change": {
            "$ref": "#/components/schemas/noc_data"
          },
          "originating_routing_number": {
            "description": "The routing number of the DFI that originated the entry, with check digit included (9 digits in total).",
            "example": "364275034",
            "type": "string"
          },
          "outgoing_ach_id": {
            "description": "ID of the linked outgoing ACH entry. This is filled only for incoming ACH entries that are returns and links to the original outgoing entry that is now being returned.",
            "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
            "format": "uuid",
            "type": "string"
          },
          "reference_info": {
            "description": "Contents of all attached records with addenda 05 (payment related information). Some SEC codes allow multiple instances of addenda 05.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "return_data": {
            "$ref": "#/components/schemas/return_data"
          },
          "sec_code": {
            "description": "SEC (Standard Entry Class) code of the ACH entry",
            "example": "WEB",
            "type": "string"
          },
          "settlement_date": {
            "description": "Settlement date of the transaction",
            "example": "2022-03-25",
            "format": "date",
            "type": "string"
          },
          "status": {
            "description": "Processing status of the incoming entry",
            "enum": [
              "ERROR",
              "IGNORED",
              "INIT",
              "IN_SUSPENSE",
              "POSTED",
              "RETURNED"
            ],
            "type": "string"
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          },
          "trace_no": {
            "description": "Trace number of the ACH entry",
            "example": "123456780000069",
            "type": "string"
          }
        },
        "required": [
          "account_no",
          "amount",
          "company_entry_description",
          "company_name",
          "dc_sign",
          "effective_date",
          "id",
          "identification_number",
          "is_future_dated",
          "originating_routing_number",
          "sec_code",
          "settlement_date",
          "status",
          "tenant",
          "trace_no"
        ],
        "type": "object"
      },
      "incoming_ach_list": {
        "allOf": [
          {
            "properties": {
              "transactions": {
                "description": "Array of incoming ACH transactions",
                "items": {
                  "$ref": "#/components/schemas/incoming_ach"
                },
                "type": "array"
              }
            },
            "required": [
              "transactions"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "incoming_wire": {
        "properties": {
          "amount": {
            "description": "Transfer amount in cents ($100 would be 10000)",
            "example": 10000,
            "type": "integer"
          },
          "bank_message": {
            "description": "Information from the sending bank to the receiving bank.",
            "type": "string"
          },
          "creation_time": {
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "currency": {
            "description": "3-character currency code",
            "example": "USD",
            "type": "string"
          },
          "customer_id": {
            "description": "The customer UUID representing the person initiating the Wire transfer",
            "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
            "format": "uuid",
            "type": "string"
          },
          "decline_reason": {
            "description": "Description of any errors or problems encountered during processing.",
            "type": "string"
          },
          "effective_date": {
            "description": "The effective date of the transaction",
            "example": "2022-03-18",
            "format": "date",
            "type": "string"
          },
          "end_to_end_identification": {
            "description": "A mandatory reference assigned by the customer originating the payment, i.e., Debtor or Ultimate Debtor that must be transported unchanged throughout the payment chain and delivered to the end-customer, i.e., Creditor or Ultimate Creditor to facilitate the customer’s reconciliation.",
            "type": "string"
          },
          "id": {
            "description": "wire ID",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "input_message_accountability_data": {
            "description": "The IMAD of the incoming wire. The field is called Message Identification in the ISO format.",
            "example": "10220318BANK0001123456",
            "readOnly": true,
            "type": "string"
          },
          "instruction_identification": {
            "description": "An optional reference that the Fedwire Funds participant sending the message may include in a customer credit transfers sent across the Fedwire Funds Service and will be delivered unchanged to the Fedwire Funds participant receiving the message.",
            "type": "string"
          },
          "is_return": {
            "description": "Indicates if the wire is a return of an outgoing wire",
            "type": "boolean"
          },
          "network": {
            "description": "The network used to process the wire",
            "example": "fedwire",
            "type": "string"
          },
          "originating_account_number": {
            "description": "The account number of the sender, as provided in the wire file.",
            "example": 1961234745,
            "format": "string",
            "type": "string"
          },
          "receiver": {
            "$ref": "#/components/schemas/party"
          },
          "receiving_account_id": {
            "description": "The internal Synctera account uuid representing the recipient of the wire.",
            "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
            "format": "uuid",
            "type": "string"
          },
          "receiving_account_number": {
            "description": "The account number of the recipient, as provided in the wire file.",
            "example": 1961234745,
            "format": "string",
            "type": "string"
          },
          "recipient_message": {
            "description": "Information from the originator to the beneficiary (recipient).",
            "type": "string"
          },
          "return_data": {
            "$ref": "#/components/schemas/return_data1"
          },
          "return_reason": {
            "description": "The reason we are returning this wire.",
            "type": "string"
          },
          "sender": {
            "$ref": "#/components/schemas/party"
          },
          "sender_reference_id": {
            "description": "Sender's id associated with fedwire transfer",
            "example": "9F564A6124E65",
            "readOnly": true,
            "type": "string"
          },
          "settlement_date": {
            "description": "The settlement date of the transaction",
            "example": "2022-03-18",
            "format": "date",
            "type": "string"
          },
          "status": {
            "description": "The current status of the transfer",
            "enum": [
              "BLOCKED",
              "POSTED",
              "READY",
              "RETURNED"
            ],
            "example": "READY",
            "readOnly": true,
            "type": "string"
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          },
          "transaction_id": {
            "description": "ID of the resulting transaction resource",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "transaction_identification": {
            "description": "An optional reference that the first financial institution in the end-to-end payment chain may assign to the customer credit transfer and that should remain unchanged throughout the end-to-end funds-transfer chain of financial institutions.",
            "type": "string"
          },
          "type_subtype": {
            "description": "The fedwire label associated with the subtype code",
            "enum": [
              "BASIC_FUNDS_TRANSFER",
              "PRIOR_DAY_TRANSFER_REVERSAL",
              "RETURN",
              "SAME_DAY_TRANSFER_REVERSAL"
            ],
            "example": "BASIC_FUNDS_TRANSFER",
            "type": "string"
          },
          "uetr": {
            "description": "Unique End-To-End Reference (UETR) is a mandatory reference in line with the Universally Unique Identifier (UUID) version 4 standard. The UETR is used to facilitate end-to-end payments tracking.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "amount",
          "creation_time",
          "id",
          "is_return",
          "receiver",
          "receiving_account_number",
          "sender",
          "sender_reference_id",
          "status",
          "tenant"
        ],
        "title": "Incoming Wire",
        "type": "object"
      },
      "incoming_wire_list": {
        "allOf": [
          {
            "$ref": "#/components/schemas/paginated_response"
          },
          {
            "properties": {
              "wires": {
                "description": "Array of incoming wires",
                "items": {
                  "$ref": "#/components/schemas/incoming_wire"
                },
                "type": "array"
              }
            },
            "required": [
              "wires"
            ],
            "type": "object"
          }
        ],
        "title": "Incoming Wire List"
      },
      "incoming_wire_patch": {
        "description": "Patch object for incoming wire",
        "properties": {
          "return_data": {
            "$ref": "#/components/schemas/return_data1"
          }
        },
        "title": "Incoming Wire Patch",
        "type": "object"
      },
      "industry_type": {
        "description": "The industry type",
        "enum": [
          "ACCOMMODATION_AND_FOOD_SERVICES",
          "ADMINISTRATIVE_AND_SUPPORT_AND_WASTE_MANAGEMENT_AND_REMEDIATION_SERVICES",
          "AGRICULTURE_FORESTRY_FISHING_AND_HUNTING",
          "ARTS_ENTERTAINMENT_AND_RECREATION",
          "CONSTRUCTION",
          "EDUCATIONAL_SERVICES",
          "FINANCE_AND_INSURANCE",
          "HEALTH_CARE_AND_SOCIAL_ASSISTANCE",
          "HIGH_RISK_OTHER",
          "INFORMATION",
          "MANAGEMENT_OF_COMPANIES_AND_ENTERPRISES",
          "MANUFACTURING",
          "MINING_QUARRYING_AND_OIL_AND_GAS_EXTRACTION",
          "OTHER_SERVICES",
          "PROFESSIONAL_SCIENTIFIC_AND_TECHNICAL_SERVICES",
          "PUBLIC_ADMINISTRATION",
          "REAL_ESTATE_AND_RENTAL_AND_LEASING",
          "RETAIL_TRADE",
          "TRANSPORTATION_AND_WAREHOUSING",
          "UTILITIES",
          "WHOLESALE_TRADE"
        ],
        "type": "string"
      },
      "initialize_3ds_request": {
        "description": "Initialization for an External Card Transfer 3-D Secure Authentication request",
        "properties": {
          "amount": {
            "description": "Amount in cents of the External Card Transfer to be authenticated",
            "minimum": 1,
            "type": "integer"
          },
          "currency": {
            "$ref": "#/components/schemas/currency_code"
          },
          "external_card_id": {
            "description": "The ID of the External Card for which the 3DS Authentication will be performed",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "amount",
          "currency",
          "external_card_id"
        ],
        "type": "object"
      },
      "initialize_3ds_response": {
        "description": "Initialization for an External Card Transfer 3-D Secure Authentication response",
        "properties": {
          "device_data_collection_jwt": {
            "description": "JWT used for device data collection",
            "type": "string"
          },
          "device_data_collection_url": {
            "description": "URL used for device data collection",
            "format": "uri",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the 3DS authentication",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "device_data_collection_jwt",
          "device_data_collection_url",
          "id"
        ],
        "type": "object"
      },
      "institution": {
        "properties": {
          "country_codes": {
            "description": "The countries of operation of the financial institution",
            "items": {
              "enum": [
                "CA",
                "US"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "logo": {
            "description": "Base64 encoded representation of the institution's logo, returned as a base64 encoded 152x152 PNG",
            "type": "string"
          },
          "name": {
            "description": "The name of the financial institution",
            "example": "Bank of America",
            "type": "string"
          },
          "routing_identifiers": {
            "description": "Array of routing identifier objects",
            "items": {
              "$ref": "#/components/schemas/routing_identifier"
            },
            "type": "array"
          }
        },
        "required": [
          "country_codes",
          "name",
          "routing_identifiers"
        ],
        "type": "object"
      },
      "institution_list": {
        "allOf": [
          {
            "description": "An array of institutions",
            "properties": {
              "institutions": {
                "items": {
                  "$ref": "#/components/schemas/institution"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "interest": {
        "properties": {
          "accrual_payout_schedule": {
            "$ref": "#/components/schemas/accrual_payout_schedule"
          },
          "calculation_method": {
            "$ref": "#/components/schemas/calculation_method"
          },
          "description": {
            "description": "User provided description for the current interest.",
            "example": "The rate is designed for high interest saving account.",
            "type": "string"
          },
          "id": {
            "description": "Interest ID",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "product_type": {
            "enum": [
              "FEE",
              "INTEREST"
            ],
            "type": "string"
          },
          "rates": {
            "$ref": "#/components/schemas/rates"
          }
        },
        "required": [
          "accrual_payout_schedule",
          "calculation_method",
          "product_type",
          "rates"
        ],
        "type": "object"
      },
      "internal_account": {
        "properties": {
          "account_number": {
            "description": "Generated internal account number",
            "readOnly": true,
            "type": "string"
          },
          "account_type": {
            "$ref": "#/components/schemas/internal_account_type"
          },
          "balances": {
            "description": "A list of balances for internal account based on different type",
            "items": {
              "$ref": "#/components/schemas/balance"
            },
            "readOnly": true,
            "type": "array"
          },
          "bank_account_id": {
            "description": "The ID of the bank account associated with this internal account. It will be auto-filled if the account type has only one matching bank account in the system.\n",
            "format": "uuid",
            "type": "string"
          },
          "bank_routing": {
            "description": "Bank routing number",
            "maxLength": 9,
            "readOnly": true,
            "type": "string"
          },
          "creation_time": {
            "description": "The date and time the resource was created.",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "currency": {
            "description": "Account currency or account settlement currency. ISO 4217 alphabetic currency code.",
            "example": "USD",
            "pattern": "^[A-Z]{3}$",
            "type": "string"
          },
          "description": {
            "description": "A user provided description for the current account",
            "type": "string"
          },
          "gl_type": {
            "description": "What type of general ledger account this internal account represents.\n",
            "enum": [
              "ASSET",
              "EXPENSE",
              "LIABILITY",
              "REVENUE"
            ],
            "type": "string"
          },
          "id": {
            "description": "Generated ID for internal account",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_system_acc": {
            "default": false,
            "description": "Is a system-controlled internal account. When this field is true, this internal account will be reserved exclusively for internal use by the Synctera platform and any internal transfers to or from this internal account will be declined.",
            "type": "boolean"
          },
          "last_updated_time": {
            "description": "The date and time the resource was last updated.",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "purpose": {
            "$ref": "#/components/schemas/internal_account_purpose"
          },
          "status": {
            "enum": [
              "ACTIVE"
            ],
            "type": "string"
          }
        },
        "required": [
          "currency",
          "status"
        ],
        "type": "object"
      },
      "internal_account_patch": {
        "properties": {
          "account_type": {
            "$ref": "#/components/schemas/internal_account_type"
          },
          "bank_account_id": {
            "description": "The ID of the bank account associated with this internal account. It will be auto-filled if the account type has only one matching bank account in the system.\n",
            "format": "uuid",
            "type": "string"
          },
          "description": {
            "description": "A user provided description for the current account",
            "type": "string"
          },
          "purpose": {
            "$ref": "#/components/schemas/internal_account_purpose"
          }
        },
        "type": "object"
      },
      "internal_account_post": {
        "allOf": [
          {},
          {
            "$ref": "#/components/schemas/internal_account"
          }
        ],
        "type": "object"
      },
      "internal_account_purpose": {
        "description": "The purpose of the internal account. On creation, the default is PROFIT_AND_LOSS.",
        "enum": [
          "CORE",
          "PROFIT_AND_LOSS",
          "RESERVE",
          "SETTLEMENT",
          "SUSPENSE",
          "TREASURY"
        ],
        "type": "string"
      },
      "internal_account_response": {
        "allOf": [
          {
            "properties": {
              "tenant": {
                "$ref": "#/components/schemas/tenant_id"
              }
            }
          },
          {
            "$ref": "#/components/schemas/internal_account"
          }
        ],
        "type": "object"
      },
      "internal_account_type": {
        "description": "type associated with the internal account.",
        "enum": [
          "ACH_SETTLEMENT",
          "ACH_SUSPENSE",
          "ALLOCATED_SUSPENSE",
          "BANK_DRAFT",
          "BILLING_EXPENSE",
          "BILLING_REVENUE",
          "CARD_AFT_PREFUNDING",
          "CARD_OCT_SETTLEMENT",
          "CARD_SETTLEMENT",
          "CASH_SETTLEMENT",
          "CASH_SUSPENSE",
          "CHECK_SETTLEMENT",
          "DISPUTE_WRITE_OFF_PNL",
          "EFT_CA_SETTLEMENT",
          "EFT_CA_SUSPENSE",
          "EXTERNAL_CARD_AFT_SETTLEMENT",
          "EXTERNAL_CARD_OCT_SETTLEMENT",
          "FEDNOW_SETTLEMENT",
          "FEES",
          "FRAUD_LOSSES",
          "FUNDING_ACCOUNTS",
          "GENERAL_PNL",
          "INTEREST_PAYOUT",
          "INTERNATIONAL_WIRE_SETTLEMENT",
          "IN_STORE_CASH_SETTLEMENT",
          "LOC_INTEREST_INCOME",
          "LOC_INVESTOR_PORTFOLIO",
          "LOC_REPURCHASE",
          "MONEY_IN_AND_OUT",
          "NEGATIVE_BALANCE",
          "NETWORK_ADJUSTMENT",
          "NETWORK_CHARGEBACK",
          "NEW_FUNDING_ACCOUNT",
          "PROVISIONAL_CREDIT_PNL",
          "RESERVE",
          "REWARDS",
          "SC_INVESTOR_PORTFOLIO",
          "SC_REPURCHASE",
          "SYNCTERA_PAY_SUSPENSE",
          "USC_INTEREST_INCOME",
          "USC_INVESTOR_PORTFOLIO",
          "USC_REPURCHASE",
          "WIRE_SETTLEMENT",
          "WIRE_SUSPENSE",
          "WRITE_OFF"
        ],
        "type": "string"
      },
      "internal_accounts_list": {
        "allOf": [
          {
            "properties": {
              "internal_accounts": {
                "description": "Array of internal accounts",
                "items": {
                  "$ref": "#/components/schemas/internal_account_response"
                },
                "type": "array"
              }
            },
            "required": [
              "internal_accounts"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "internal_transfer": {
        "example": {
          "amount": 1025,
          "currency": "USD",
          "originating_account_id": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "receiving_account_id": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "type": "ACCOUNT_TO_ACCOUNT"
        },
        "properties": {
          "amount": {
            "description": "The amount (in cents) to transfer from originating account to receiving account.",
            "format": "int64",
            "minimum": 1,
            "type": "integer"
          },
          "capture_mode": {
            "default": "IMMEDIATE",
            "description": "Controls when the transfer will take effect.\nA value of `IMMEDIATE` (the default) means that the transfer will be completed immediately.\nA value of `MANUAL` means that the transaction will remain in a \"pending\" state until explicitly completed or cancelled (or the auth expires).",
            "enum": [
              "IMMEDIATE",
              "MANUAL"
            ],
            "type": "string"
          },
          "currency": {
            "description": "ISO 4217 alphabetic currency code of the transfer amount",
            "example": "USD",
            "type": "string"
          },
          "expires_at": {
            "description": "When `capture_mode` is `MANUAL`, this field describes when the pending transaction should expire.",
            "format": "date-time",
            "type": "string"
          },
          "final_customer_id": {
            "description": "The customer id of the international customer that receives the final remittance transfer (required for remittance payments).",
            "format": "uuid",
            "type": "string",
            "x-go-type": "string"
          },
          "memo": {
            "description": "A short note to the recipient",
            "type": "string"
          },
          "metadata": {
            "description": "Arbitrary key-value metadata to associate with the transaction",
            "type": "object"
          },
          "originating_account_alias": {
            "description": "An alias representing a GL account to debit. This is alternative to specifying by account id",
            "example": "ach_suspense",
            "type": "string"
          },
          "originating_account_customer_id": {
            "description": "The customer id of the owner of the originating account.",
            "format": "uuid",
            "type": "string",
            "x-go-type": "string"
          },
          "originating_account_id": {
            "description": "The UUID of the account being debited",
            "format": "uuid",
            "type": "string",
            "x-go-type": "string"
          },
          "receiving_account_alias": {
            "description": "An alias representing a GL account to credit. This is an alternative to specifying by account id",
            "example": "ach_suspense",
            "type": "string"
          },
          "receiving_account_customer_id": {
            "description": "The customer id of the owner of the receiving account.",
            "format": "uuid",
            "type": "string",
            "x-go-type": "string"
          },
          "receiving_account_id": {
            "description": "The UUID of the account being credited",
            "format": "uuid",
            "type": "string",
            "x-go-type": "string"
          },
          "reference_id": {
            "description": "Network reference id",
            "type": "string"
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          },
          "type": {
            "description": "The desired transaction type to use for this transfer",
            "enum": [
              "ACCOUNT_BALANCE_ADJUSTMENT",
              "ACCOUNT_TO_ACCOUNT",
              "ACCOUNT_TO_ACCOUNT_SWEEP",
              "ACH_CREDIT_SWEEP",
              "ACH_DEBIT_SWEEP",
              "ACH_FLOAT_TRANSFER",
              "ACH_INCOMING_CREDIT_SWEEP",
              "ACH_INCOMING_DEBIT_SWEEP",
              "ACH_INCOMING_RETURN_CREDIT_SWEEP",
              "ACH_INCOMING_RETURN_DEBIT_SWEEP",
              "ACH_OUTGOING_CREDIT_SWEEP",
              "ACH_OUTGOING_DEBIT_SWEEP",
              "ACH_OUTGOING_RETURN_CREDIT_SWEEP",
              "ACH_OUTGOING_RETURN_DEBIT_SWEEP",
              "ACH_SWEEP",
              "BULK_DOMESTIC_WIRE_OUTGOING_SWEEP",
              "BULK_EFT_CA_OUTGOING_CREDIT_SWEEP",
              "BULK_EFT_CA_OUTGOING_DEBIT_SWEEP",
              "CARD_CHARGEBACK",
              "CARD_CHARGEBACK_CASE1",
              "CARD_CHARGEBACK_CASE1_REVERSAL",
              "CARD_CHARGEBACK_CASE2",
              "CARD_CHARGEBACK_CASE2_REVERSAL",
              "CARD_CHARGEBACK_CASE3",
              "CARD_CHARGEBACK_CASE3_REVERSAL",
              "CARD_CHARGEBACK_CASE_WON_SWEEP",
              "CARD_CHARGEBACK_CASE_WON_SWEEP_REVERSAL",
              "CARD_CHARGEBACK_WRITEOFF",
              "CARD_CHARGEBACK_WRITEOFF_SWEEP",
              "CARD_CHARGEBACK_WRITEOFF_SWEEP_REVERSAL",
              "CARD_PROVISIONAL_CREDIT",
              "CARD_PROVISIONAL_CREDIT_REVERSAL",
              "CARD_PROVISIONAL_CREDIT_SWEEP",
              "CARD_PROVISIONAL_CREDIT_SWEEP_REVERSAL",
              "CASHBACK",
              "CASHBACK_SWEEP",
              "CREDIT_MEMO",
              "DOMESTIC_WIRE_INCOMING_RETURN_SWEEP",
              "DOMESTIC_WIRE_INCOMING_SWEEP",
              "DOMESTIC_WIRE_OUTGOING_RETURN_SWEEP",
              "DOMESTIC_WIRE_OUTGOING_SWEEP",
              "EFT_CA_INCOMING_CREDIT_RETURN_SWEEP",
              "EFT_CA_INCOMING_CREDIT_SWEEP",
              "EFT_CA_INCOMING_DEBIT_RETURN_SWEEP",
              "EFT_CA_INCOMING_DEBIT_SWEEP",
              "EFT_CA_OUTGOING_CREDIT_RETURN_SWEEP",
              "EFT_CA_OUTGOING_CREDIT_SWEEP",
              "EFT_CA_OUTGOING_DEBIT_RETURN_SWEEP",
              "EFT_CA_OUTGOING_DEBIT_SWEEP",
              "ETRANSFER_SWEEP",
              "FEE",
              "FEE_SWEEP",
              "FORCE_PAYMENT",
              "GENERAL_FEE_SWEEP",
              "GENERAL_FEE_SWEEP_REVERSAL",
              "GENERAL_INTERNAL_TRANSFER_SWEEP",
              "GENERAL_INTERNAL_TRANSFER_SWEEP_REVERSAL",
              "GENERAL_REWARD_SWEEP",
              "GENERAL_REWARD_SWEEP_REVERSAL",
              "INCOMING_WIRE",
              "INCOMING_WIRE_SWEEP",
              "INTEREST_CHARGED_SWEEP",
              "INTEREST_CORRECTION",
              "INTEREST_PAYOUT",
              "INTEREST_PAYOUT_SWEEP",
              "INTERNATIONAL_WIRE_INCOMING_SWEEP",
              "INTERNATIONAL_WIRE_OUTGOING_RETURN_SWEEP",
              "INTERNATIONAL_WIRE_OUTGOING_SWEEP",
              "INVOICE",
              "IN_STORE_CASH_DEPOSIT_SWEEP",
              "IN_STORE_CASH_DEPOSIT_SWEEP_REVERSAL",
              "LOAN_DISBURSEMENT",
              "LOAN_FUNDING",
              "MANUAL_ADJUSTMENT",
              "MANUAL_ADJUSTMENT_REVERSAL",
              "MANUAL_ADJUSTMENT_SWEEP",
              "MANUAL_AFT_SWEEP",
              "MANUAL_CARD_SWEEP",
              "MANUAL_CASH_DEPOSIT_SWEEP",
              "MANUAL_CASH_ORDER_SWEEP",
              "MANUAL_CHECK_ISSUANCE",
              "MANUAL_CHECK_SWEEP",
              "MANUAL_OCT_SWEEP",
              "MANUAL_WIRE_SWEEP",
              "MASTERCARD_GROSS_SWEEP",
              "MASTERCARD_INTERCHANGE_SWEEP",
              "MASTERCARD_NET_SWEEP",
              "MOBILE_DEPOSIT_RETURN_SWEEP",
              "MOBILE_DEPOSIT_SWEEP",
              "NEGATIVE_BALANCE_RESERVE",
              "NEGATIVE_BALANCE_WRITEOFF",
              "NETWORK_ADJUSTMENT_SWEEP",
              "NETWORK_CHARGEBACK_SWEEP",
              "OUTGOING_INTERNATIONAL_REMITTANCE",
              "OUTGOING_INTERNATIONAL_REMITTANCE_REVERSAL",
              "OVERDUE_CARD_WRITEOFF",
              "PEER_TO_PEER",
              "PROMOTIONAL_CREDIT",
              "PROMOTIONAL_CREDIT_REVERSAL",
              "PROMOTIONAL_CREDIT_SWEEP",
              "PULSE_GROSS_SWEEP",
              "PULSE_INTERCHANGE_SWEEP",
              "SECURITY_ACCOUNT_PAYMENT",
              "SECURITY_OVERPAY_ADJUSTMENT",
              "SECURITY_OVERPAY_ADJUSTMENT_REVERSAL",
              "SIGN_UP_BONUS",
              "SUBSCRIPTION_FEE",
              "TRANSFER_FEE",
              "TRANSFER_FEE_REVERSAL",
              "VISA_GROSS_SWEEP",
              "VISA_INTERCHANGE_SWEEP",
              "VISA_NET_SWEEP",
              "WIRE_SETTLEMENT_CREDIT",
              "WIRE_SETTLEMENT_DEBIT"
            ],
            "type": "string"
          }
        },
        "required": [
          "amount",
          "currency",
          "type"
        ],
        "type": "object"
      },
      "internal_transfer_instruction": {
        "properties": {
          "request": {
            "$ref": "#/components/schemas/internal_transfer"
          },
          "type": {
            "enum": [
              "INTERNAL_TRANSFER"
            ],
            "type": "string"
          }
        },
        "required": [
          "request",
          "type"
        ],
        "type": "object"
      },
      "internal_transfer_patch": {
        "properties": {
          "status": {
            "description": "The desired status of the internal transfer auth",
            "enum": [
              "CANCELED",
              "COMPLETE"
            ],
            "type": "string"
          }
        }
      },
      "internal_transfer_response": {
        "allOf": [
          {
            "properties": {
              "id": {
                "description": "The transaction id associated with the transfer",
                "format": "uuid",
                "type": "string",
                "x-go-type": "string"
              },
              "status": {
                "$ref": "#/components/schemas/internal_transfer_response_status"
              }
            },
            "required": [
              "id",
              "status"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/internal_transfer"
          }
        ]
      },
      "internal_transfer_response_status": {
        "description": "The status of the internal transfer auth.\nA value of `PENDING` indicates that the funds have been reserved and the transaction is ready to be either completed or canceled.\nA value of `COMPLETE` indicates the funds have been successfully moved and no more action can be performed.\nA value of `CANCELED` or `EXPIRED` means that the transaction has rolled back and the funds have been returned to the originating account, either by explicitly canceling via the API, or due to the expiry time having passed.",
        "enum": [
          "CANCELED",
          "COMPLETE",
          "EXPIRED",
          "PENDING"
        ],
        "type": "string"
      },
      "international_wire_details": {
        "properties": {
          "bank_address": {
            "$ref": "#/components/schemas/address"
          },
          "correspondent_banks_details": {
            "description": "Correspondent banks details used for international payments.\n",
            "items": {
              "$ref": "#/components/schemas/correspondent_bank_details"
            },
            "type": "array"
          },
          "swift_code": {
            "description": "The SWIFT code (also known as BIC code) used for international payments.\n",
            "example": "CHASUS3AXXX",
            "pattern": "^[A-Z]{6}[A-Z0-9]{2}([A-Z0-9]{3})?$",
            "type": "string"
          }
        },
        "required": [
          "bank_address",
          "swift_code"
        ],
        "title": "International bank details",
        "type": "object"
      },
      "inventory_details": {
        "properties": {
          "commodity_code": {
            "example": "COM123",
            "type": "string"
          },
          "description": {
            "example": "Item description",
            "type": "string"
          },
          "discount_amount": {
            "example": "5.00",
            "type": "string"
          },
          "item_detail_taxes": {
            "items": {
              "$ref": "#/components/schemas/item_detail_taxes"
            },
            "type": "array"
          },
          "item_discount_amount": {
            "example": 500,
            "type": "integer"
          },
          "item_discount_amount_indicator": {
            "example": "D",
            "type": "string"
          },
          "item_discount_applied_indicator": {
            "example": "true",
            "type": "string"
          },
          "item_discount_rate": {
            "example": 10,
            "type": "integer"
          },
          "item_extended_amount": {
            "example": 1000,
            "type": "integer"
          },
          "item_extended_amount_indicator": {
            "example": "E",
            "type": "string"
          },
          "item_total_amount": {
            "example": 1500,
            "type": "integer"
          },
          "item_total_amount_indicator": {
            "example": "T",
            "type": "string"
          },
          "item_vat_amount": {
            "example": 200,
            "type": "integer"
          },
          "item_vat_rate": {
            "example": 20,
            "type": "integer"
          },
          "product_code": {
            "example": "PROD123",
            "type": "string"
          },
          "quantity": {
            "example": 10,
            "format": "float",
            "type": "number"
          },
          "total_amount": {
            "example": "1500.00",
            "type": "string"
          },
          "unit_of_measure": {
            "example": "Piece",
            "type": "string"
          },
          "unit_price": {
            "example": 100,
            "type": "integer"
          },
          "vat_tax_amount": {
            "example": "200.00",
            "type": "string"
          },
          "vat_tax_rate": {
            "example": "0.20",
            "type": "string"
          }
        },
        "type": "object"
      },
      "is_customer": {
        "description": "True for personal and business customers with a direct relationship with the fintech or bank. Set this to true for any customer related to an account.\n",
        "example": true,
        "type": "boolean"
      },
      "is_user": {
        "description": "True for console users. Set this to true for any users direct access to the Synctera console.\n",
        "example": true,
        "readOnly": true,
        "type": "boolean"
      },
      "item_detail_taxes": {
        "properties": {
          "detail_tax_amount": {
            "example": 1,
            "format": "int64",
            "type": "integer"
          },
          "detail_tax_amount_inclusion_indicator": {
            "example": "Included",
            "type": "string"
          },
          "detail_tax_amount_indicator": {
            "example": "D",
            "type": "string"
          },
          "detail_tax_rate": {
            "example": 1,
            "format": "int64",
            "type": "integer"
          },
          "detail_tax_type_applied": {
            "example": "VAT",
            "type": "string"
          },
          "detail_tax_type_identifier": {
            "example": "VAT123",
            "type": "string"
          }
        },
        "type": "object"
      },
      "kyc_verification_type": {
        "description": "The type of check run on the customer.",
        "enum": [
          "addressrisk",
          "alertlist",
          "decision",
          "documentverification",
          "emailrisk",
          "fraud",
          "kyc",
          "phonerisk",
          "social",
          "synthetic",
          "watchlistplus",
          "watchlistpremier",
          "watchliststandard"
        ],
        "example": "kyc",
        "type": "string"
      },
      "l2l3_enabled": {
        "default": false,
        "description": "Enable/Disable l2l3 transaction - L2l3 transaction are disabled by default.\n",
        "type": "boolean"
      },
      "l2l3_model": {
        "properties": {
          "enhanced_data_id": {
            "example": "ED123456",
            "type": "string"
          },
          "financial": {
            "$ref": "#/components/schemas/financial"
          },
          "fleet_emv": {
            "$ref": "#/components/schemas/fleets_emv"
          },
          "fleets": {
            "$ref": "#/components/schemas/fleets"
          },
          "inventory_details": {
            "items": {
              "$ref": "#/components/schemas/inventory_details"
            },
            "type": "array"
          },
          "original_transaction_id": {
            "description": "Value of the `transaction.token` returned in the simulated clearing response.",
            "type": "string"
          },
          "purchase_order": {
            "example": "PO987654",
            "type": "string"
          }
        },
        "required": [
          "original_transaction_id"
        ],
        "type": "object"
      },
      "legal_address": {
        "allOf": [
          {
            "description": "Legal address"
          },
          {
            "$ref": "#/components/schemas/address"
          }
        ]
      },
      "license_list": {
        "allOf": [
          {
            "properties": {
              "licenses": {
                "description": "Array of license records",
                "items": {
                  "$ref": "#/components/schemas/response_license"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "license_number": {
        "description": "The entity's license number",
        "example": 10321,
        "minLength": 1,
        "type": "string"
      },
      "license_patch": {
        "properties": {
          "license_number": {
            "$ref": "#/components/schemas/license_number"
          }
        },
        "required": [
          "license_number"
        ],
        "type": "object"
      },
      "license_type": {
        "description": "The type of the license being created. For example, the license being created could be for MRB (Marijuana related business)",
        "enum": [
          "MRB"
        ],
        "example": "MRB",
        "type": "string"
      },
      "loanpro_template_vendor_data": {
        "description": "LoanPro-specific vendor data for template",
        "properties": {
          "loc_product_id": {
            "description": "LoanPro line of credit product ID",
            "example": 67890,
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "loc_product_id"
        ],
        "type": "object"
      },
      "loanpro_vendor_data": {
        "description": "LoanPro-specific vendor data for account",
        "properties": {
          "loc_id": {
            "description": "LoanPro line of credit account ID",
            "example": 12345,
            "format": "int64",
            "type": "integer"
          },
          "loc_product_id": {
            "description": "LoanPro line of credit product ID",
            "example": 67890,
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "loc_id",
          "loc_product_id"
        ],
        "type": "object"
      },
      "lookup_3ds_request": {
        "discriminator": {
          "mapping": {
            "BROWSER": "#/components/schemas/lookup_3ds_request_browser",
            "SDK": "#/components/schemas/lookup_3ds_request_sdk"
          },
          "propertyName": "device_channel"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/lookup_3ds_request_browser"
          },
          {
            "$ref": "#/components/schemas/lookup_3ds_request_sdk"
          }
        ],
        "type": "object"
      },
      "lookup_3ds_request_base": {
        "description": "Details for an External Card Transfer 3-D Secure Authentication lookup request",
        "properties": {
          "authentication_indicator": {
            "enum": [
              "INSTALLMENT",
              "PAYMENT",
              "RECURRING"
            ],
            "type": "string"
          },
          "device_channel": {
            "description": "Channel through which Device Data Collection was performed\n\nChannel | Description\n--- | ---\n`BROWSER` | Internet browser\n`SDK` | Mobile app\n",
            "enum": [
              "BROWSER",
              "SDK"
            ],
            "example": "BROWSER",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the 3DS authentication",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "transaction_mode": {
            "enum": [
              "COMPUTER_DEVICE",
              "MOBILE_DEVICE",
              "TABLET_DEVICE"
            ],
            "type": "string"
          }
        },
        "required": [
          "authentication_indicator",
          "device_channel",
          "id",
          "transaction_mode"
        ],
        "type": "object"
      },
      "lookup_3ds_request_browser": {
        "allOf": [
          {
            "properties": {
              "device_details": {
                "$ref": "#/components/schemas/device_details"
              }
            },
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/lookup_3ds_request_base"
          }
        ],
        "type": "object"
      },
      "lookup_3ds_request_sdk": {
        "allOf": [
          {
            "$ref": "#/components/schemas/lookup_3ds_request_base"
          }
        ],
        "type": "object"
      },
      "lookup_3ds_response": {
        "description": "Details for an External Card Transfer 3-D Secure Authentication lookup response",
        "properties": {
          "challenge_payload": {
            "description": "3DS challenge payload, returned if challenge is required",
            "type": "string"
          },
          "challenge_url": {
            "description": "3DS challenge URL, returned if challenge is required",
            "format": "uri",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the 3DS authentication",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "processor_transaction_id": {
            "description": "Processor Transaction ID, returned if challenge is required",
            "type": "string"
          },
          "status": {
            "description": "Status of the 3DS authentication",
            "enum": [
              "CHALLENGE_REQUIRED",
              "FAILED",
              "NOT_ENROLLED",
              "SUCCESS",
              "UNKNOWN"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "status"
        ],
        "type": "object"
      },
      "manual_account_verification": {
        "allOf": [
          {
            "$ref": "#/components/schemas/base_account_verification"
          }
        ],
        "title": "Information specific to Manual verification"
      },
      "manual_entry": {
        "properties": {
          "address_verification": {
            "$ref": "#/components/schemas/digital_wallet_token_address_verification"
          },
          "enabled": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "merchant": {
        "description": "Merchant descriptor information that will be shown on statement and transaction details. If not provided, FinTech information will be used.",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/address1"
          },
          "email": {
            "description": "Merchant's email",
            "example": "alice@example.com",
            "type": "string"
          },
          "name": {
            "description": "Merchant's name",
            "type": "string"
          },
          "phone_number": {
            "description": "Merchant's phone number with country code in E.164 format. Must have a valid country code. Area code and local phone number are not validated.",
            "example": "+14374570680",
            "pattern": "^\\+[1-9]\\d{1,14}$",
            "type": "string"
          }
        },
        "required": [
          "address",
          "name"
        ],
        "type": "object"
      },
      "merchant_category_codes": {
        "description": "merchant category codes for spend control",
        "items": {
          "description": "specify a specific MCC or a range of MCCs using a dash (-)",
          "example": "5600–5699",
          "pattern": "^\\d{4}(-\\d{4})?$",
          "type": "string"
        },
        "maxItems": 10,
        "type": "array"
      },
      "merchant_response": {
        "properties": {
          "created_at": {
            "example": "2017-04-20T19:30:12.000Z",
            "nullable": true,
            "type": "string"
          },
          "guid": {
            "example": "MCH-7ed79542-884d-2b1b-dd74-501c5cc9d25b",
            "nullable": true,
            "type": "string"
          },
          "logo_url": {
            "example": "https://s3.amazonaws.com/MD_Assets/merchant_logos/comcast.png",
            "nullable": true,
            "type": "string"
          },
          "name": {
            "example": "Comcast",
            "nullable": true,
            "type": "string"
          },
          "updated_at": {
            "example": "2018-09-28T21:13:53.000Z",
            "nullable": true,
            "type": "string"
          },
          "website_url": {
            "example": "https://www.xfinity.com",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "metadata": {
        "description": "Optional field to store additional information about the resource. Intended to be used by the integrator to store non-sensitive data.\n",
        "type": "object"
      },
      "minimum_payment": {
        "description": "The scheme for calculating the minimum payment due for outstanding balances in a billing period.\n",
        "discriminator": {
          "mapping": {
            "FULL": "#/components/schemas/minimum_payment_type_full",
            "RATE_OR_AMOUNT": "#/components/schemas/minimum_payment_type_rate_or_amount"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/minimum_payment_type_rate_or_amount"
          },
          {
            "$ref": "#/components/schemas/minimum_payment_type_full"
          }
        ],
        "type": "object"
      },
      "minimum_payment_full": {
        "description": "The scheme for calculating the minimum payment due for outstanding balances in a billing period.\n",
        "discriminator": {
          "mapping": {
            "FULL": "#/components/schemas/minimum_payment_type_full"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/minimum_payment_type_full"
          }
        ],
        "type": "object"
      },
      "minimum_payment_partial": {
        "description": "The scheme for calculating the minimum payment due for outstanding balances in a billing period.\n",
        "discriminator": {
          "mapping": {
            "RATE_OR_AMOUNT": "#/components/schemas/minimum_payment_type_rate_or_amount"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/minimum_payment_type_rate_or_amount"
          }
        ],
        "type": "object"
      },
      "minimum_payment_type": {
        "description": "* RATE_OR_AMOUNT: Describes a minimum payment scheme where the amount calculated is either a portion\n  of the balance due, or a fixed, minimum amount, whichever is greater. For example, if\n  set to 1.00% and $30, the minimum payment will be calculated as 1.00% of the balance, or\n  $30, whichever is greatest. However, the minimum payment will never exceed the statement\n  balance.\n* FULL: Describes a minimum payment scheme where the amount calculated is the entire account\n  balance at the end of the statement period.\n\nNote that the choice of minimum payment type is constrained by the account type.\n",
        "enum": [
          "FULL",
          "RATE_OR_AMOUNT"
        ],
        "type": "string"
      },
      "minimum_payment_type_full": {
        "properties": {
          "type": {
            "$ref": "#/components/schemas/minimum_payment_type"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "minimum_payment_type_rate_or_amount": {
        "properties": {
          "min_amount": {
            "description": "The minimum amount to charge as a minimum payment, in cents. For example, to set the minimum to $30, set this value to 3000. Note: despite setting this value, the minimum payment will never be greater than the statement balance.\n",
            "format": "int64",
            "type": "integer"
          },
          "rate": {
            "description": "The percentage of the balance to use, in basis points. For example, to set 12.5% of the balance, set this value to 1250.\n",
            "type": "integer"
          },
          "type": {
            "$ref": "#/components/schemas/minimum_payment_type"
          }
        },
        "required": [
          "min_amount",
          "rate",
          "type"
        ],
        "type": "object"
      },
      "monitoring_alert": {
        "properties": {
          "business_id": {
            "$ref": "#/components/schemas/business_id4"
          },
          "creation_time": {
            "description": "The date and time the resource was created.",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for this alert.",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "last_updated_time": {
            "description": "The date and time the resource was last update.",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/metadata"
          },
          "person_id": {
            "$ref": "#/components/schemas/person_id"
          },
          "status": {
            "$ref": "#/components/schemas/monitoring_status"
          },
          "title": {
            "description": "A description of the monitoring alert.",
            "example": "Ireland Competition and Consumer Protection Commission Criminal Court Cases",
            "type": "string"
          },
          "type": {
            "description": "The type of customer alert. Any of the following:\n* `WATCHLIST` – the customer was added to a known watchlist.\n* `BANKRUPTCY` – the customer filed for bankruptcy.\n* `NEGATIVE_NEWS` – the customer was mentioned in negative news articles.\n* `LICENSE_VALIDITY` – the license is no longer valid. Exmaple of this would be if a license was suspended\n",
            "enum": [
              "BANKRUPTCY",
              "LICENSE_VALIDITY",
              "NEGATIVE_NEWS",
              "WATCHLIST"
            ],
            "readOnly": true,
            "type": "string"
          },
          "urls": {
            "description": "Where to get more information about this alert.",
            "example": [
              "https://example.com/alert-document-1",
              "https://example.com/alert-document-2"
            ],
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "vendor_info": {
            "$ref": "#/components/schemas/vendor_info2"
          }
        },
        "type": "object"
      },
      "monitoring_alert_list": {
        "allOf": [
          {
            "properties": {
              "alerts": {
                "items": {
                  "$ref": "#/components/schemas/monitoring_alert"
                },
                "type": "array"
              }
            },
            "required": [
              "alerts"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "monitoring_status": {
        "description": "The status of the alert. Any of the following:\n* `ACTIVE` – alert has been issued and should be investigated.\n* `SUPPRESSED` – alert is a false positive, alert should be dismissed, or has been otherwise investigated.\n",
        "enum": [
          "ACTIVE",
          "SUPPRESSED"
        ],
        "type": "string"
      },
      "monitoring_subscription": {
        "properties": {
          "business_id": {
            "$ref": "#/components/schemas/business_id4"
          },
          "creation_time": {
            "description": "The date and time the resource was created.",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for this subscription.",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "last_updated_time": {
            "description": "The date and time the resource was last update.",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/metadata"
          },
          "person_id": {
            "$ref": "#/components/schemas/person_id"
          }
        },
        "type": "object"
      },
      "monitoring_subscription_list": {
        "allOf": [
          {
            "properties": {
              "subscriptions": {
                "items": {
                  "$ref": "#/components/schemas/monitoring_subscription"
                },
                "type": "array"
              }
            },
            "required": [
              "subscriptions"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "negative_news_findings": {
        "description": "The number of negative news findings.",
        "example": 3,
        "type": "integer"
      },
      "network_fee_model": {
        "example": {
          "amount": 123,
          "credit_debit": "C",
          "type": "ISSUER_FEE"
        },
        "properties": {
          "amount": {
            "description": "The amount of the fee in the smallest whole denomination of the applicable currency (eg. For USD use cents)",
            "type": "integer"
          },
          "credit_debit": {
            "description": "C = credit; D = debit",
            "enum": [
              "C",
              "D"
            ],
            "type": "string"
          },
          "type": {
            "enum": [
              "ACQUIRER_FEE",
              "CROSS_BORDER_ISSUER_FEE",
              "CUR_CONV_CARDHOLDER_FEE",
              "CUR_CONV_ISSUER_FEE",
              "INTERCHANGE_FEE",
              "ISSUER_FEE",
              "PINDEBIT_ASSOC_FEE",
              "SWITCH_FEE"
            ],
            "type": "string"
          }
        },
        "required": [
          "amount",
          "type"
        ],
        "type": "object"
      },
      "noc_data": {
        "description": "Filled if the entry is a notification of change.",
        "properties": {
          "change_code": {
            "description": "Change code, indicating which part of the original entry is to be corrected.",
            "example": "C01",
            "type": "string"
          },
          "corrected_data": {
            "description": "Corrected information from the original entry (e.g. correct account number).",
            "example": "122455799",
            "type": "string"
          },
          "original_dfi_no": {
            "description": "Receiving financial institution of the original entry.",
            "example": "364275034",
            "type": "string"
          },
          "original_trace": {
            "description": "Trace number of the original entry that is being corrected.",
            "example": "123456780000069",
            "type": "string"
          }
        },
        "required": [
          "change_code",
          "corrected_data",
          "original_dfi_no",
          "original_trace"
        ],
        "type": "object"
      },
      "non_fuel_item_details": {
        "properties": {
          "description": {
            "example": "Item description",
            "type": "string"
          },
          "product_code": {
            "example": "PC001",
            "type": "string"
          },
          "quantity": {
            "example": 10,
            "format": "int64",
            "type": "integer"
          },
          "unit_of_measure": {
            "example": "Units",
            "type": "string"
          },
          "unit_price": {
            "example": 15,
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "note_create": {
        "properties": {
          "content": {
            "$ref": "#/components/schemas/content"
          },
          "metadata": {
            "$ref": "#/components/schemas/metadata"
          },
          "related_resource_field": {
            "$ref": "#/components/schemas/related_resource_field"
          },
          "related_resource_id": {
            "$ref": "#/components/schemas/related_resource_id"
          },
          "related_resource_type": {
            "$ref": "#/components/schemas/related_resource_type2"
          },
          "status": {
            "$ref": "#/components/schemas/note_status"
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          },
          "type": {
            "$ref": "#/components/schemas/type"
          }
        },
        "required": [
          "content",
          "related_resource_id",
          "related_resource_type"
        ],
        "title": "Note creation object",
        "type": "object"
      },
      "note_list": {
        "allOf": [
          {
            "properties": {
              "notes": {
                "description": "Array of notes",
                "items": {
                  "$ref": "#/components/schemas/note_response"
                },
                "type": "array"
              }
            },
            "required": [
              "notes"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ],
        "title": "Note List"
      },
      "note_response": {
        "properties": {
          "author": {
            "description": "The note's author.",
            "example": "Jane Smith jane@example.com",
            "type": "string"
          },
          "content": {
            "$ref": "#/components/schemas/content"
          },
          "creation_time": {
            "description": "The date and time the note was created.",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "description": "note ID",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "last_updated_time": {
            "description": "The date and time the note was last updated.",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/metadata"
          },
          "related_resource_field": {
            "$ref": "#/components/schemas/related_resource_field"
          },
          "related_resource_id": {
            "$ref": "#/components/schemas/related_resource_id"
          },
          "related_resource_type": {
            "$ref": "#/components/schemas/related_resource_type2"
          },
          "status": {
            "$ref": "#/components/schemas/note_status"
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          },
          "type": {
            "$ref": "#/components/schemas/type"
          }
        },
        "required": [
          "author",
          "content",
          "creation_time",
          "id",
          "last_updated_time",
          "related_resource_id",
          "related_resource_type",
          "tenant"
        ],
        "title": "Note response object",
        "type": "object"
      },
      "note_status": {
        "description": "The state of the FEEDBACK, use this field to mark fields as RESOLVED or UNRESOLVED. This is required when creating a note with type FEEDBACK. Providing a status with note type NOTE will result in a Bad Request error.\n",
        "enum": [
          "RESOLVED",
          "UNRESOLVED"
        ],
        "example": "RESOLVED",
        "type": "string"
      },
      "notification_language": {
        "description": "Specifies the language for 3D Secure and digital wallet token notifications sent to cardholders.\nBy default, notifications are sent in English.\nLimited list of ISO 639-3 languages codes are supported.",
        "enum": [
          "ces",
          "deu",
          "ell",
          "eng",
          "fra",
          "ita",
          "nld",
          "pol",
          "por",
          "ron",
          "spa"
        ],
        "type": "string"
      },
      "original_credit_request_model": {
        "properties": {
          "amount": {
            "description": "The amount of the transaction in the smallest whole denomination of the applicable currency (eg. For USD use cents)",
            "type": "integer"
          },
          "card_acceptor": {
            "$ref": "#/components/schemas/card_acceptor_model"
          },
          "card_id": {
            "format": "uuid",
            "type": "string"
          },
          "mid": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "screening_score": {
            "type": "string"
          },
          "sender_data": {
            "$ref": "#/components/schemas/original_credit_sender_data"
          },
          "transactionPurpose": {
            "type": "string"
          },
          "type": {
            "enum": [
              "account_to_account",
              "bill_payment",
              "business_to_business",
              "card_bill_payment",
              "cash_claim",
              "cash_in",
              "cash_out",
              "disbursement",
              "face_to_face_merchant_payment",
              "gambling_payout",
              "government_disbursement",
              "government_payment",
              "loyalty",
              "merchant_disbursement",
              "mobile_air_time_payment",
              "money_transfer_by_bank",
              "money_transfer_by_merchant",
              "online_gambling_payout",
              "payments_goods_services",
              "pension_disbursement",
              "person_to_person",
              "prepaid",
              "prepaid_loads",
              "wallet_transfer"
            ],
            "type": "string"
          }
        },
        "required": [
          "amount",
          "card_id",
          "mid",
          "type"
        ],
        "type": "object"
      },
      "original_credit_sender_data": {
        "properties": {
          "funding_source": {
            "enum": [
              "cash",
              "credit",
              "debit",
              "deposit_account",
              "mobile_money_payment",
              "non_visa_credit",
              "prepaid"
            ],
            "type": "string"
          },
          "sender_account_number": {
            "type": "string"
          },
          "sender_account_type": {
            "enum": [
              "bank_account_number_and_identification_code",
              "card_account",
              "email",
              "iban",
              "other",
              "phone_number",
              "rtn_bank_account",
              "social_network_id",
              "wallet_id"
            ],
            "type": "string"
          },
          "sender_address": {
            "type": "string"
          },
          "sender_city": {
            "type": "string"
          },
          "sender_country": {
            "type": "string"
          },
          "sender_name": {
            "type": "string"
          },
          "sender_reference_number": {
            "type": "string"
          },
          "sender_state": {
            "type": "string"
          },
          "transaction_purpose": {
            "enum": [
              "crypto_currency",
              "education",
              "emergency_need",
              "family_support",
              "gifts",
              "labor_transfers",
              "lending",
              "medical_treatment",
              "other",
              "salary",
              "savings",
              "travel"
            ],
            "type": "string"
          },
          "unique_transaction_reference_number": {
            "maxLength": 17,
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "funding_source"
        ],
        "type": "object"
      },
      "outgoing_ach": {
        "description": "Represents a sent ACH transaction.",
        "properties": {
          "account_id": {
            "description": "Receiving account uuid. This links to the external account resource (represented by 'receiving_account_id' in the request to send outgoing ACH).",
            "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
            "format": "uuid",
            "type": "string"
          },
          "account_name": {
            "description": "Receiving account name",
            "example": "Bruce Wayne",
            "type": "string"
          },
          "account_no": {
            "description": "Receiving account number",
            "example": "122455799",
            "type": "string"
          },
          "amount": {
            "description": "Transaction amount in cents",
            "example": 1560,
            "type": "integer"
          },
          "bank_id": {
            "example": 1,
            "type": "integer"
          },
          "company_entry_description": {
            "description": "Company Entry Description field in ACH batch header. Originator inserts this field's value to provide the Receiver with a description of the entry's purpose.",
            "example": "PAYROLL",
            "type": "string"
          },
          "company_name": {
            "description": "Company Name field in ACH batch header.",
            "example": "Asdf Finance",
            "type": "string"
          },
          "effective_date": {
            "description": "Effective date of the transaction",
            "example": "2022-03-25",
            "format": "date",
            "type": "string"
          },
          "external_id": {
            "description": "Transaction ID in the ledger",
            "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
            "format": "uuid",
            "type": "string"
          },
          "hold": {
            "$ref": "#/components/schemas/hold_data"
          },
          "id": {
            "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
            "format": "uuid",
            "type": "string"
          },
          "incoming_ach_id": {
            "description": "ID of the linked incoming ACH entry. This is filled only for outgoing ACH entries that are returns and links to the originally received incoming entry.",
            "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
            "format": "uuid",
            "type": "string"
          },
          "is_same_day": {
            "description": "Was initiated as same-day ACH transaction",
            "type": "boolean"
          },
          "memo": {
            "type": "string"
          },
          "partner_id": {
            "example": 2,
            "type": "integer"
          },
          "reference_info": {
            "description": "Transaction reference info",
            "type": "string"
          },
          "return_data": {
            "$ref": "#/components/schemas/return_data"
          },
          "source_account_id": {
            "description": "Originating account uuid. This links to the customer account on Synctera platform (represented by 'originating_account_id' in the request to send outgoing ACH).",
            "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
            "format": "uuid",
            "type": "string"
          },
          "source_account_name": {
            "description": "Originating account name",
            "example": "Thomas Anderson",
            "type": "string"
          },
          "source_account_no": {
            "description": "Originating account number",
            "example": "123638791329",
            "type": "string"
          },
          "status": {
            "enum": [
              "CANCELED",
              "COMPLETE",
              "DECLINED",
              "INIT",
              "PENDING"
            ],
            "type": "string"
          },
          "trace_no": {
            "description": "Trace number of the transaction",
            "example": "123456780000069",
            "type": "string"
          }
        },
        "required": [
          "account_no",
          "amount",
          "bank_id",
          "effective_date",
          "external_id",
          "id",
          "is_same_day",
          "memo",
          "partner_id",
          "source_account_no",
          "status",
          "trace_no"
        ],
        "type": "object"
      },
      "outgoing_ach_list": {
        "allOf": [
          {
            "properties": {
              "transactions": {
                "description": "Array of sent ACH transactions.",
                "items": {
                  "$ref": "#/components/schemas/outgoing_ach"
                },
                "type": "array"
              }
            },
            "required": [
              "transactions"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "outgoing_ach_patch": {
        "description": "Update sent ach transaction",
        "properties": {
          "funds_availability_time": {
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "status": {
            "enum": [
              "CANCELED"
            ],
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "outgoing_ach_request": {
        "description": "Send an ACH",
        "properties": {
          "amount": {
            "description": "Amount to transfer in ISO 4217 minor currency units",
            "example": 607,
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer"
          },
          "company_entry_description": {
            "description": "Company Entry Description field in ACH batch header. Originator inserts this field's value to provide the Receiver with a description of the entry's purpose.",
            "example": "PAYROLL",
            "maxLength": 10,
            "nullable": true,
            "type": "string"
          },
          "company_name": {
            "description": "Overrides the 'Company Name' field in ACH batch header, which otherwise defaults to the configured partner name.\nThe provided name will be prepended with the Bank's configured prefix and a *. It will then be truncated to 16 characters.",
            "example": "Asdf Finance",
            "maxLength": 16,
            "type": "string"
          },
          "currency": {
            "description": "ISO 4217 alphabetic currency code of the transfer amount",
            "example": "USD",
            "type": "string"
          },
          "customer_id": {
            "description": "The customer's unique identifier",
            "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
            "format": "uuid",
            "type": "string"
          },
          "dc_sign": {
            "description": "The type of transaction (debit or credit). A debit is a transfer in and a credit is a transfer out of the originating account",
            "enum": [
              "credit",
              "debit"
            ],
            "example": "debit",
            "type": "string"
          },
          "effective_date": {
            "description": "Effective date transaction proccesses (is_same_day needs to be false or not present at all)",
            "example": "2022-03-18",
            "format": "date",
            "nullable": true,
            "type": "string"
          },
          "external_data": {
            "description": "Additional transfer metadata structured as key-value pairs",
            "nullable": true,
            "type": "object"
          },
          "final_customer_id": {
            "description": "ID of the international customer that receives the final remittance transfer (required for OFAC enabled payments)",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "hold": {
            "$ref": "#/components/schemas/ach_request_hold_data"
          },
          "is_same_day": {
            "description": "Send as same day ACH transaction (use only is_same_day without specific effective_date)",
            "nullable": true,
            "type": "boolean"
          },
          "memo": {
            "description": "Memo for the payment",
            "nullable": true,
            "type": "string"
          },
          "originating_account_id": {
            "description": "The unique identifier for an originating account",
            "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
            "format": "uuid",
            "type": "string"
          },
          "receiving_account_id": {
            "description": "The unique identifier for an receiving account",
            "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
            "format": "uuid",
            "type": "string"
          },
          "reference_info": {
            "description": "Will be sent to the ACH network and maps to Addenda record 05 - the recipient bank will receive this info",
            "example": "Tempore atque et cum.",
            "nullable": true,
            "type": "string"
          },
          "risk": {
            "$ref": "#/components/schemas/risk_data"
          },
          "sec_code": {
            "default": "WEB",
            "description": "Standard Entry Class Code:\n* WEB: Internet initiated / Mobile Entry (default if empty)\n* CCD: Corporate Credit or Debit\n* PPD: Pre-arranged Payment or Deposit (only deposits currently supported)",
            "enum": [
              "CCD",
              "PPD",
              "WEB"
            ],
            "type": "string"
          }
        },
        "required": [
          "amount",
          "currency",
          "customer_id",
          "dc_sign",
          "originating_account_id",
          "receiving_account_id"
        ],
        "title": "Send ACH requests",
        "type": "object"
      },
      "paginated_response": {
        "properties": {
          "next_page_token": {
            "description": "If returned, use the next_page_token to query for the next page of results. Not returned if there are no more rows.",
            "example": "a8937a0d",
            "type": "string"
          }
        },
        "title": "Paginated List response",
        "type": "object"
      },
      "party": {
        "description": "Information about a party in a wire transfer",
        "properties": {
          "account_number": {
            "description": "account number of the person",
            "example": 192178512,
            "readOnly": true,
            "type": "string"
          },
          "address": {
            "$ref": "#/components/schemas/address3"
          },
          "address_lines": {
            "$ref": "#/components/schemas/address_lines"
          },
          "alternate_identifier": {
            "description": "alternate identifier of the party, used in place of account number",
            "example": 123456789,
            "readOnly": true,
            "type": "string"
          },
          "bank_name": {
            "description": "name of the bank this party is a member of",
            "example": "Synctera Bank",
            "readOnly": true,
            "type": "string"
          },
          "identifier_type": {
            "description": "type of value used to identify the party",
            "example": "Demand Deposit Account Number",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "name of the person",
            "example": "John Smith",
            "readOnly": true,
            "type": "string"
          },
          "routing_number": {
            "description": "routing number of the bank this person is a member of",
            "example": 272479663,
            "readOnly": true,
            "type": "string"
          }
        },
        "title": "Person",
        "type": "object"
      },
      "patch_account": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/patch_account_depository"
          },
          {
            "$ref": "#/components/schemas/patch_account_charge_secured"
          },
          {
            "$ref": "#/components/schemas/patch_account_revolving_credit_unsecured"
          },
          {
            "$ref": "#/components/schemas/patch_account_general_ledger"
          },
          {
            "$ref": "#/components/schemas/patch_account_charge_unsecured"
          },
          {
            "$ref": "#/components/schemas/patch_account_revolving_credit_secured"
          },
          {
            "$ref": "#/components/schemas/patch_account_line_of_credit"
          }
        ],
        "type": "object"
      },
      "patch_account_charge_secured": {
        "allOf": [
          {
            "$ref": "#/components/schemas/rails_charge_secured"
          },
          {
            "properties": {
              "is_system_auto_pay_enabled": {
                "description": "A flag to indicate whether auto payments are enabled.",
                "type": "boolean"
              },
              "note": {
                "description": "Add an optional note when patching a charged secured account. A note is required when setting the status to or from SUSPENDED.",
                "type": "string",
                "writeOnly": true
              },
              "spend_control_ids": {
                "$ref": "#/components/schemas/spend_control_ids"
              }
            }
          },
          {
            "$ref": "#/components/schemas/account_base"
          }
        ],
        "type": "object"
      },
      "patch_account_charge_unsecured": {
        "allOf": [
          {
            "properties": {
              "credit_limit": {
                "description": "The credit limit for this charge unsecured account in cents. Minimum is 0.\n",
                "example": 2500,
                "format": "int64",
                "minimum": 0,
                "type": "integer"
              },
              "grace_period": {
                "description": "The number of days past the billing period to allow for payment before it is considered due. This directly infers the due date for a payment. The default will be set to 21 days.\n",
                "example": 21,
                "maximum": 28,
                "minimum": 21,
                "type": "integer"
              },
              "note": {
                "description": "Add an optional note when patching a charge unsecured account. A note is required when setting the status to or from SUSPENDED.",
                "type": "string",
                "writeOnly": true
              },
              "spend_control_ids": {
                "$ref": "#/components/schemas/spend_control_ids"
              }
            }
          },
          {
            "$ref": "#/components/schemas/account_base"
          },
          {
            "$ref": "#/components/schemas/rails_charge_unsecured"
          }
        ],
        "type": "object"
      },
      "patch_account_depository": {
        "allOf": [
          {
            "$ref": "#/components/schemas/rails_depository"
          },
          {
            "$ref": "#/components/schemas/account_base"
          },
          {
            "properties": {
              "balance_ceiling": {
                "$ref": "#/components/schemas/balance_ceiling"
              },
              "balance_floor": {
                "$ref": "#/components/schemas/balance_floor"
              },
              "fee_product_ids": {
                "description": "A list of fee account products that the current account associates with.",
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "interest_product_id": {
                "description": "An interest account product that the current account associates with.\n",
                "format": "uuid",
                "type": "string"
              },
              "note": {
                "description": "Add an optional note when creating or updating an account. A note is required when updating the status to or from SUSPENDED",
                "type": "string",
                "writeOnly": true
              },
              "overdraft_limit": {
                "description": "Account's overdraft limit",
                "format": "int64",
                "minimum": 0,
                "type": "integer"
              },
              "spend_control_ids": {
                "$ref": "#/components/schemas/spend_control_ids"
              },
              "spending_limits": {
                "$ref": "#/components/schemas/spending_limits"
              }
            }
          }
        ],
        "description": "Account representing either a checking or saving account.",
        "type": "object"
      },
      "patch_account_general_ledger": {
        "allOf": [
          {
            "$ref": "#/components/schemas/rails_general_ledger"
          },
          {
            "properties": {
              "bank_account_id": {
                "description": "for updating the bank_account_id of a general ledger account",
                "format": "uuid",
                "type": "string"
              },
              "note": {
                "description": "Add an optional note when patching a charge unsecured account. A note is required when setting the status to or from SUSPENDED.",
                "type": "string",
                "writeOnly": true
              }
            }
          },
          {
            "$ref": "#/components/schemas/account_base"
          }
        ],
        "description": "General ledger account properties that can be updated.\nIn production, general ledger accounts can only be created or updated by a Synctera administrator.\nGeneral ledger accounts are in Alpha status, and cannot yet be created. We may make breaking changes.",
        "type": "object"
      },
      "patch_account_line_of_credit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/rails_loc"
          },
          {
            "properties": {
              "credit_limit": {
                "description": "The credit limit for this line of credit account in cents. Minimum is 0.\n",
                "example": 2500,
                "format": "int64",
                "minimum": 0,
                "type": "integer"
              },
              "grace_period": {
                "description": "The number of days past the billing period to allow for payment before it is considered due. This directly infers the due date for a payment. The default will be set to 21 days.\n",
                "example": 21,
                "maximum": 28,
                "minimum": 21,
                "type": "integer"
              },
              "minimum_payment": {
                "$ref": "#/components/schemas/minimum_payment_partial"
              },
              "note": {
                "description": "Add an optional note when patching a line of credit account. A note is required when setting the status to or from SUSPENDED.",
                "type": "string",
                "writeOnly": true
              }
            }
          },
          {
            "$ref": "#/components/schemas/account_base"
          }
        ],
        "type": "object"
      },
      "patch_account_product": {
        "discriminator": {
          "mapping": {
            "FEE": "#/components/schemas/fee",
            "INTEREST": "#/components/schemas/patch_interest"
          },
          "propertyName": "product_type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/patch_interest"
          },
          {
            "$ref": "#/components/schemas/fee"
          }
        ],
        "type": "object"
      },
      "patch_account_revolving_credit_secured": {
        "allOf": [
          {
            "$ref": "#/components/schemas/rails_revolving_credit_secured"
          },
          {
            "properties": {
              "credit_limit": {
                "description": "The credit limit for this revolving credit secured account in cents. Minimum is 0.\n",
                "example": 2500,
                "format": "int64",
                "minimum": 0,
                "type": "integer"
              },
              "note": {
                "description": "Add an optional note when patching a revolving credit secured account. A note is required when setting the status to or from SUSPENDED.",
                "type": "string",
                "writeOnly": true
              },
              "spend_control_ids": {
                "$ref": "#/components/schemas/spend_control_ids"
              },
              "vendor_info": {
                "$ref": "#/components/schemas/vendor_info"
              }
            }
          },
          {
            "$ref": "#/components/schemas/account_base"
          }
        ],
        "type": "object"
      },
      "patch_account_revolving_credit_unsecured": {
        "allOf": [
          {
            "properties": {
              "credit_limit": {
                "description": "The credit limit for this revolving credit unsecured account in cents. Minimum is 0.\n",
                "example": 2500,
                "format": "int64",
                "minimum": 0,
                "type": "integer"
              },
              "note": {
                "description": "Add an optional note when patching a revolving credit unsecured account. A note is required when setting the status to or from SUSPENDED.",
                "type": "string",
                "writeOnly": true
              },
              "spend_control_ids": {
                "$ref": "#/components/schemas/spend_control_ids"
              },
              "vendor_info": {
                "$ref": "#/components/schemas/vendor_info"
              }
            }
          },
          {
            "$ref": "#/components/schemas/account_base"
          },
          {
            "$ref": "#/components/schemas/rails_revolving_credit_unsecured"
          }
        ],
        "type": "object"
      },
      "patch_account_template": {
        "properties": {
          "description": {
            "description": "User provided account template description",
            "type": "string"
          },
          "is_enabled": {
            "description": "Whether this template can be used for account creation",
            "type": "boolean"
          },
          "name": {
            "description": "Unique account template name",
            "type": "string"
          },
          "template": {
            "$ref": "#/components/schemas/patch_account_template_fields"
          }
        },
        "type": "object"
      },
      "patch_account_template_fields": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/patch_revolving_credit_secured_template_fields"
          },
          {
            "$ref": "#/components/schemas/patch_depository_template_fields"
          },
          {
            "$ref": "#/components/schemas/patch_revolving_credit_unsecured_template_fields"
          },
          {
            "$ref": "#/components/schemas/patch_charge_unsecured_template_fields"
          },
          {
            "$ref": "#/components/schemas/patch_charge_secured_template_fields"
          },
          {
            "$ref": "#/components/schemas/patch_line_of_credit_template_fields"
          }
        ]
      },
      "patch_accounts_request_account_identifiers": {
        "properties": {
          "iban": {
            "description": "The IBAN of the account. On write, Synctera will store the entire IBAN number; on read, we only return the last 4 characters.\n",
            "example": "LI4476584648937N59B00",
            "minLength": 1,
            "type": "string"
          },
          "number": {
            "description": "The unique identifier of the account.\n",
            "example": 87654321,
            "minLength": 1,
            "type": "string"
          }
        },
        "title": "Identifiers for the account",
        "type": "object"
      },
      "patch_accounts_request_routing_identifiers": {
        "properties": {
          "ach_routing_number": {
            "description": "The routing number used for US ACH payments. On write, Synctera will store the entire routing number; on read, we only return the last 4 characters.\n",
            "example": "756392185",
            "minLength": 1,
            "type": "string"
          },
          "bank_name": {
            "description": "The name of the bank managing the account",
            "example": "Chase",
            "minLength": 1,
            "type": "string"
          },
          "eft_ca_routing_number": {
            "description": "> 🚧 Alpha > This is an Alpha property. Feedback from the community is welcome. We may make breaking changes to this property.\nThe 9 digit routing number used for EFT CA payments, identifying a Canadian bank. The format is 0xxxyyyyy where xxx is the institution number and yyyyy is the transit number. On write, Synctera will store the entire routing number; on read, we only return the last 4 characters.\n",
            "example": "02101140",
            "maxLength": 9,
            "minLength": 9,
            "type": "string"
          },
          "international_wire_details": {
            "$ref": "#/components/schemas/patch_international_wire_details"
          },
          "network": {
            "$ref": "#/components/schemas/external_account_network"
          },
          "wire_routing_number": {
            "description": "The routing number used for domestic wire payments. On write, Synctera will store the entire routing number; on read, we only return the last 4 characters.\n",
            "example": "952391102",
            "type": "string"
          }
        },
        "title": "Identifiers for the bank",
        "type": "object"
      },
      "patch_business": {
        "allOf": [
          {
            "$ref": "#/components/schemas/base"
          }
        ],
        "description": "Represents a business customer.",
        "type": "object"
      },
      "patch_business_business_owner_relationship": {
        "allOf": [
          {
            "properties": {
              "additional_data": {
                "$ref": "#/components/schemas/additional_owner_data"
              },
              "creation_time": {
                "description": "The date and time the resource was created.",
                "example": "2010-05-06T12:23:34.321Z",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "from_business_id": {
                "description": "Unique ID for the subject business.\n",
                "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
                "format": "uuid",
                "type": "string"
              },
              "id": {
                "description": "Relationship unique identifier.",
                "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
                "format": "uuid",
                "readOnly": true,
                "type": "string"
              },
              "last_updated_time": {
                "description": "The date and time the resource was last updated.",
                "example": "2010-05-06T12:23:34.321Z",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "metadata": {
                "$ref": "#/components/schemas/metadata"
              },
              "relationship_type": {
                "$ref": "#/components/schemas/relationship_types"
              },
              "tenant": {
                "$ref": "#/components/schemas/tenant_id"
              },
              "to_business_id": {
                "description": "Unique ID for the related business.\n",
                "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
                "format": "uuid",
                "type": "string"
              }
            },
            "required": [
              "relationship_type"
            ]
          }
        ],
        "description": "Denotes the relationship between specified businesses.",
        "type": "object"
      },
      "patch_charge_secured_template_fields": {
        "properties": {
          "auto_payment_period": {
            "$ref": "#/components/schemas/auto_payment_period"
          },
          "grace_period": {
            "$ref": "#/components/schemas/grace_period"
          },
          "minimum_payment": {
            "$ref": "#/components/schemas/minimum_payment_full"
          },
          "spend_control_ids": {
            "$ref": "#/components/schemas/spend_control_ids"
          }
        },
        "type": "object"
      },
      "patch_charge_unsecured_template_fields": {
        "properties": {
          "grace_period": {
            "$ref": "#/components/schemas/grace_period"
          },
          "spend_control_ids": {
            "$ref": "#/components/schemas/spend_control_ids"
          }
        },
        "type": "object"
      },
      "patch_customer": {
        "description": "Customer object for patch purpose. All fields are optional",
        "properties": {
          "ban_status": {
            "$ref": "#/components/schemas/ban_status"
          },
          "dob": {
            "description": "Customer's date of birth in RFC 3339 full-date format (YYYY-MM-DD)",
            "example": "2000-01-01",
            "format": "date",
            "type": "string"
          },
          "email": {
            "description": "Customer's email",
            "example": "alice@example.com",
            "type": "string"
          },
          "first_name": {
            "description": "Customer's first name",
            "example": "Jane",
            "type": "string"
          },
          "last_name": {
            "description": "Customer's last name",
            "example": "Smith",
            "type": "string"
          },
          "legal_address": {
            "$ref": "#/components/schemas/legal_address"
          },
          "metadata": {
            "description": "User-supplied JSON format metadata. Do not use to store PII.",
            "type": "object"
          },
          "middle_name": {
            "description": "Customer's middle name",
            "example": "Anne",
            "type": "string"
          },
          "note": {
            "description": "Add an optional note when creating or updating a customer. A note is required when updating a customers's ban_status between SUSPENDED and ALLOWED.",
            "type": "string"
          },
          "phone_number": {
            "description": "Customer's mobile phone number with country code in E.164 format. Must have a valid country code. Area code and local phone number are not validated.",
            "example": "+14374570680",
            "pattern": "^\\+[1-9]\\d{1,14}$",
            "type": "string"
          },
          "shipping_address": {
            "$ref": "#/components/schemas/shipping_address"
          },
          "ssn": {
            "description": "Customer's full tax ID eg SSN formatted with hyphens. This optional parameter is required when running KYC on a customer. Must be compiled with ^\\d{3}-\\d{2}-\\d{4}$. Response contains the last 4 digits only (e.g. 6789).",
            "example": "123-45-6789",
            "type": "string"
          },
          "status": {
            "description": "Customer's status",
            "enum": [
              "ACTIVE",
              "DECEASED",
              "DENIED",
              "DORMANT",
              "ESCHEAT",
              "FROZEN",
              "INACTIVE",
              "PROSPECT",
              "SANCTION"
            ],
            "type": "string"
          }
        },
        "title": "Customer",
        "type": "object"
      },
      "patch_depository_template_fields": {
        "allOf": [
          {
            "$ref": "#/components/schemas/rails_depository"
          },
          {
            "properties": {
              "account_type": {
                "enum": [
                  "CHECKING",
                  "PREPAID",
                  "SAVING"
                ],
                "type": "string"
              },
              "interest_product_id": {
                "description": "An interest account product that the current account associates with.\n",
                "format": "uuid",
                "type": "string"
              },
              "is_sar_enabled": {
                "description": "Enable SAR report.",
                "type": "boolean"
              },
              "spend_control_ids": {
                "$ref": "#/components/schemas/spend_control_ids"
              }
            }
          }
        ],
        "type": "object"
      },
      "patch_external_account": {
        "properties": {
          "account_identifiers": {
            "$ref": "#/components/schemas/patch_accounts_request_account_identifiers"
          },
          "account_owner_names": {
            "description": "The names of the account owners.",
            "items": {
              "example": "Jane Smith",
              "type": "string"
            },
            "type": "array"
          },
          "currency": {
            "description": "The currency of the account in ISO 4217 format",
            "example": "USD",
            "pattern": "^[A-Z]{3}$",
            "type": "string"
          },
          "nickname": {
            "description": "A user-meaningful name for the account",
            "example": "Vacation savings",
            "minLength": 1,
            "type": "string"
          },
          "routing_identifiers": {
            "$ref": "#/components/schemas/patch_accounts_request_routing_identifiers"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ],
            "type": "string"
          },
          "status_reason": {
            "description": "The reason for the status change of the external account.",
            "type": "string"
          },
          "type": {
            "description": "The type of the account",
            "enum": [
              "CHECKING",
              "CRYPTO_WALLET",
              "OTHER_BANK_ACCOUNT",
              "SAVINGS",
              "WALLET"
            ],
            "type": "string"
          },
          "verification": {
            "$ref": "#/components/schemas/account_verification"
          }
        },
        "type": "object"
      },
      "patch_interest": {
        "properties": {
          "accrual_payout_schedule": {
            "$ref": "#/components/schemas/accrual_payout_schedule"
          },
          "calculation_method": {
            "$ref": "#/components/schemas/calculation_method"
          },
          "description": {
            "description": "User provided description for the current interest.",
            "example": "The rate is designed for high interest saving account.",
            "type": "string"
          },
          "id": {
            "description": "Interest ID",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "product_type": {
            "enum": [
              "INTEREST"
            ],
            "type": "string"
          },
          "rates": {
            "$ref": "#/components/schemas/rates"
          }
        },
        "required": [
          "product_type"
        ],
        "type": "object"
      },
      "patch_international_wire_details": {
        "properties": {
          "bank_address": {
            "$ref": "#/components/schemas/address"
          },
          "correspondent_banks_details": {
            "description": "Correspondent banks details used for international payments. Note that in a patch request, the entirity of the correspondent_banks_details array will be updated.\n",
            "items": {
              "$ref": "#/components/schemas/correspondent_bank_details"
            },
            "type": "array"
          },
          "swift_code": {
            "description": "The SWIFT code (also known as BIC code) used for international payments.\n",
            "example": "CHASUS3AXXX",
            "pattern": "^[A-Z]{6}[A-Z0-9]{2}([A-Z0-9]{3})?$",
            "type": "string"
          }
        },
        "title": "International bank details",
        "type": "object"
      },
      "patch_line_of_credit_template_fields": {
        "properties": {
          "grace_period": {
            "$ref": "#/components/schemas/grace_period"
          },
          "interest_product_id": {
            "description": "An interest account product that the current account associates with.\n",
            "format": "uuid",
            "type": "string"
          },
          "minimum_payment": {
            "$ref": "#/components/schemas/minimum_payment_partial"
          }
        },
        "type": "object"
      },
      "patch_note": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/note_status"
          }
        },
        "title": "Note patch object",
        "type": "object"
      },
      "patch_payer_payee_relationship": {
        "allOf": [
          {
            "properties": {
              "additional_data": {
                "$ref": "#/components/schemas/payer_payee_additional_data"
              },
              "creation_time": {
                "description": "The date and time the resource was created.",
                "example": "2010-05-06T12:23:34.321Z",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "from_business_id": {
                "description": "Unique ID for the subject business.\n",
                "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
                "format": "uuid",
                "type": "string"
              },
              "from_person_id": {
                "description": "Unique ID for the subject person.\n",
                "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
                "format": "uuid",
                "type": "string"
              },
              "id": {
                "description": "Relationship unique identifier.",
                "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
                "format": "uuid",
                "readOnly": true,
                "type": "string"
              },
              "last_updated_time": {
                "description": "The date and time the resource was last updated.",
                "example": "2010-05-06T12:23:34.321Z",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "metadata": {
                "$ref": "#/components/schemas/metadata"
              },
              "relationship_type": {
                "$ref": "#/components/schemas/relationship_types"
              },
              "tenant": {
                "$ref": "#/components/schemas/tenant_id"
              },
              "to_business_id": {
                "description": "Unique ID for the related business.\n",
                "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
                "format": "uuid",
                "type": "string"
              },
              "to_person_id": {
                "description": "Unique ID for the related person.\n",
                "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
                "format": "uuid",
                "type": "string"
              }
            },
            "required": [
              "relationship_type"
            ]
          }
        ],
        "description": "> 🚧 Alpha\n> The PAYER_PAYEE relationship is Alpha. We may make breaking changes to this schema. PAYER_PAYEE denotes the relationship between specified person or business as a payer or payee to a person or business\n",
        "type": "object"
      },
      "patch_payment_schedule": {
        "description": "Patch request for payment schedule",
        "properties": {
          "status": {
            "description": "Target payment schedule status",
            "enum": [
              "CANCELLED"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "patch_person": {
        "allOf": [
          {
            "properties": {
              "note": {
                "description": "Text to be added to a note when updating a person. A note is required when changing a person's ban_status between SUSPENDED and ALLOWED.",
                "type": "string"
              }
            }
          },
          {
            "$ref": "#/components/schemas/base_person"
          }
        ],
        "description": "Properties of a person that can be updated",
        "type": "object"
      },
      "patch_person_business_owner_relationship": {
        "allOf": [
          {
            "properties": {
              "additional_data": {
                "$ref": "#/components/schemas/additional_owner_data"
              },
              "creation_time": {
                "description": "The date and time the resource was created.",
                "example": "2010-05-06T12:23:34.321Z",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "from_person_id": {
                "description": "Unique ID for the subject person.\n",
                "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
                "format": "uuid",
                "type": "string"
              },
              "id": {
                "description": "Relationship unique identifier.",
                "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
                "format": "uuid",
                "readOnly": true,
                "type": "string"
              },
              "last_updated_time": {
                "description": "The date and time the resource was last updated.",
                "example": "2010-05-06T12:23:34.321Z",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "metadata": {
                "$ref": "#/components/schemas/metadata"
              },
              "relationship_type": {
                "$ref": "#/components/schemas/relationship_types"
              },
              "tenant": {
                "$ref": "#/components/schemas/tenant_id"
              },
              "to_business_id": {
                "description": "Unique ID for the related business.\n",
                "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
                "format": "uuid",
                "type": "string"
              }
            },
            "required": [
              "relationship_type"
            ]
          }
        ],
        "description": "Denotes the relationship between specified business and person.",
        "type": "object"
      },
      "patch_person_business_relationship": {
        "allOf": [
          {
            "properties": {
              "additional_data": {
                "$ref": "#/components/schemas/additional_data"
              },
              "creation_time": {
                "description": "The date and time the resource was created.",
                "example": "2010-05-06T12:23:34.321Z",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "from_person_id": {
                "description": "Unique ID for the subject person.\n",
                "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
                "format": "uuid",
                "type": "string"
              },
              "id": {
                "description": "Relationship unique identifier.",
                "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
                "format": "uuid",
                "readOnly": true,
                "type": "string"
              },
              "last_updated_time": {
                "description": "The date and time the resource was last updated.",
                "example": "2010-05-06T12:23:34.321Z",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "metadata": {
                "$ref": "#/components/schemas/metadata"
              },
              "relationship_type": {
                "$ref": "#/components/schemas/relationship_types"
              },
              "tenant": {
                "$ref": "#/components/schemas/tenant_id"
              },
              "to_business_id": {
                "description": "Unique ID for the related business.\n",
                "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
                "format": "uuid",
                "type": "string"
              }
            },
            "required": [
              "relationship_type"
            ]
          }
        ],
        "description": "Denotes the relationship between specified person and business.",
        "type": "object"
      },
      "patch_personal_id": {
        "properties": {
          "country_code": {
            "description": "The updated ISO 3166 Alpha-2 country code for the country that issued the personal identifier.\nThe country code cannot be modified for personal identifier types that have an implicit country, e.g. SSN.\n",
            "example": "US",
            "type": "string"
          },
          "expiry_date": {
            "description": "The date the associated document is set to expire on set by the governing authority.",
            "example": "2020-01-01",
            "format": "date",
            "type": "string"
          },
          "id_type": {
            "$ref": "#/components/schemas/personal_id_type"
          },
          "identifier": {
            "description": "The updated personal identifier",
            "example": "123-45-6789",
            "type": "string"
          },
          "issue_date": {
            "description": "The date the associated document was issued by the governing authority.",
            "example": "2020-01-01",
            "format": "date",
            "type": "string"
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          }
        },
        "required": [
          "id_type"
        ],
        "type": "object"
      },
      "patch_relationship_in": {
        "discriminator": {
          "mapping": {
            "BENEFICIAL_OWNER_OF": "#/components/schemas/patch_person_business_owner_relationship",
            "MANAGING_PERSON_OF": "#/components/schemas/patch_person_business_relationship",
            "OWNER_OF": "#/components/schemas/patch_business_business_owner_relationship",
            "PAYER_PAYEE": "#/components/schemas/patch_payer_payee_relationship"
          },
          "propertyName": "relationship_type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/patch_person_business_relationship"
          },
          {
            "$ref": "#/components/schemas/patch_business_business_owner_relationship"
          },
          {
            "$ref": "#/components/schemas/patch_person_business_owner_relationship"
          },
          {
            "$ref": "#/components/schemas/patch_payer_payee_relationship"
          }
        ],
        "type": "object"
      },
      "patch_revolving_credit_secured_template_fields": {
        "properties": {
          "application_workflow_id": {
            "description": "Taktile workflow ID for credit application processing",
            "format": "uuid",
            "type": "string"
          },
          "spend_control_ids": {
            "$ref": "#/components/schemas/spend_control_ids"
          },
          "vendor_info": {
            "$ref": "#/components/schemas/template_vendor_info"
          }
        },
        "type": "object"
      },
      "patch_revolving_credit_unsecured_template_fields": {
        "properties": {
          "application_workflow_id": {
            "description": "Taktile workflow ID for credit application processing",
            "format": "uuid",
            "type": "string"
          },
          "spend_control_ids": {
            "$ref": "#/components/schemas/spend_control_ids"
          },
          "vendor_info": {
            "$ref": "#/components/schemas/template_vendor_info"
          }
        },
        "type": "object"
      },
      "payer_payee_additional_data": {
        "description": "Contains the type of transfer for the payer and payee relationship",
        "properties": {
          "transfer_type": {
            "enum": [
              "CREDIT",
              "DEBIT",
              "DEBIT_OR_CREDIT"
            ],
            "type": "string"
          }
        },
        "required": [
          "transfer_type"
        ],
        "type": "object"
      },
      "payer_payee_relationship": {
        "allOf": [
          {
            "required": [
              "additional_data"
            ]
          },
          {
            "$ref": "#/components/schemas/patch_payer_payee_relationship"
          }
        ],
        "description": ">  🚧 Alpha\n> The PAYER_PAYEE relationship is Alpha. We may make breaking changes to this schema. PAYER_PAYEE denotes the relationship between specified person or business as a payer or payee to a person or businesses.\nOne from_person_id/from_business_id must be provided, and one of to_person_id/to_business_id must be provided.\n",
        "type": "object"
      },
      "payment": {
        "description": "Executed payment",
        "properties": {
          "description": {
            "description": "User provided description for the payment schedule",
            "type": "string"
          },
          "error_details": {
            "$ref": "#/components/schemas/payment_error_details"
          },
          "id": {
            "description": "Payment ID",
            "format": "uuid",
            "type": "string"
          },
          "metadata": {
            "description": "User provided JSON format data for the payment schedule",
            "type": "object"
          },
          "payment_date": {
            "$ref": "#/components/schemas/payment_date"
          },
          "payment_instruction": {
            "$ref": "#/components/schemas/payment_instruction"
          },
          "payment_schedule_id": {
            "description": "ID of the payment schedule that executed this payment",
            "format": "uuid",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/payment_status"
          },
          "transaction_id": {
            "description": "Transaction ID. It will be included only when status is COMPLETED",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "payment_date": {
        "properties": {
          "execution_date": {
            "description": "Execution date for the next payment",
            "format": "date",
            "type": "string"
          },
          "scheduled_date": {
            "description": "Scheduled date for the next payment",
            "format": "date",
            "type": "string"
          }
        },
        "readOnly": true,
        "required": [
          "execution_date",
          "scheduled_date"
        ],
        "type": "object"
      },
      "payment_error_details": {
        "description": "Payment error details. It will be included only when status is ERROR",
        "properties": {
          "code": {
            "type": "string"
          },
          "details": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "payment_instruction": {
        "discriminator": {
          "mapping": {
            "ACH": "#/components/schemas/ach_instruction",
            "INTERNAL_TRANSFER": "#/components/schemas/internal_transfer_instruction"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ach_instruction"
          },
          {
            "$ref": "#/components/schemas/internal_transfer_instruction"
          }
        ]
      },
      "payment_list": {
        "allOf": [
          {
            "properties": {
              "payments": {
                "description": "Array of payments",
                "items": {
                  "$ref": "#/components/schemas/payment"
                },
                "type": "array"
              }
            },
            "required": [
              "payments"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "payment_schedule": {
        "description": "Payment schedule",
        "properties": {
          "description": {
            "description": "User provided description for the payment schedule",
            "type": "string"
          },
          "id": {
            "description": "Payment schedule ID",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "metadata": {
            "description": "User provided JSON format data",
            "type": "object"
          },
          "next_payment_date": {
            "$ref": "#/components/schemas/payment_date"
          },
          "payment_instruction": {
            "$ref": "#/components/schemas/payment_instruction"
          },
          "schedule": {
            "$ref": "#/components/schemas/schedule_config"
          },
          "status": {
            "$ref": "#/components/schemas/payment_schedule_status"
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          }
        },
        "required": [
          "description",
          "payment_instruction",
          "schedule"
        ],
        "type": "object"
      },
      "payment_schedule_list": {
        "allOf": [
          {
            "properties": {
              "payment_schedules": {
                "description": "Array of payment schedules.",
                "items": {
                  "$ref": "#/components/schemas/payment_schedule_response"
                },
                "type": "array"
              }
            },
            "required": [
              "payment_schedules"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "payment_schedule_response": {
        "allOf": [
          {
            "properties": {
              "creation_time": {
                "format": "date-time",
                "type": "string"
              },
              "last_updated_time": {
                "format": "date-time",
                "type": "string"
              },
              "tenant": {
                "$ref": "#/components/schemas/tenant_id"
              }
            },
            "required": [
              "creation_time",
              "last_updated_time",
              "tenant"
            ]
          },
          {
            "$ref": "#/components/schemas/payment_schedule"
          }
        ]
      },
      "payment_schedule_status": {
        "description": "Status of the payment schedule.\n",
        "enum": [
          "ACTIVE",
          "CANCELLED",
          "ERRORED",
          "EXPIRED"
        ],
        "readOnly": true,
        "type": "string",
        "x-enumDescriptions": {
          "ACTIVE": "Payment schedule will run the next payment",
          "CANCELLED": "Payment schedule has cancelled all the future payments",
          "ERRORED": "Payment schedule has failed to calculate next execution time",
          "EXPIRED": "Payment schedule has completed all the payments"
        }
      },
      "payment_status": {
        "description": "Payment request status",
        "enum": [
          "COMPLETED",
          "ERROR"
        ],
        "type": "string"
      },
      "payment_sub_type": {
        "enum": [
          "ACH.INCOMING_CREDIT",
          "ACH.INCOMING_DEBIT",
          "ACH.OUTGOING_CREDIT",
          "ACH.OUTGOING_DEBIT",
          "CARD.ATM_WITHDRAWAL",
          "CARD.POS_CASHBACK",
          "SYNCTERA_PAY.INCOMING_INTERAC_AUTODEPOSIT",
          "SYNCTERA_PAY.OUTGOING_BILL_PAYMENT",
          "SYNCTERA_PAY.OUTGOING_INTERAC_E_TRANSFER"
        ],
        "type": "string"
      },
      "payment_sub_type_list": {
        "description": "A list of payment sub-types to which a spend control will apply, if set. If not set or the array is empty, then the spend control will apply to all sub-types.",
        "items": {
          "$ref": "#/components/schemas/payment_sub_type"
        },
        "type": "array"
      },
      "payment_type": {
        "description": "The type of payment to which a spend control applies.\nIf this is not set, the spend control applies to all spending, regardless of payment type.\n",
        "enum": [
          "ACH",
          "CARD",
          "CASH",
          "CHECK",
          "EFT_CA",
          "EXTERNAL_CARD",
          "INTERNAL_TRANSFER",
          "SYNCTERA_PAY",
          "WIRE"
        ],
        "type": "string"
      },
      "payment_type_list": {
        "description": "A list of payment types to which a spend control will apply, if set. If not set or the array is empty, then the spend control will apply to all types of payments.",
        "items": {
          "$ref": "#/components/schemas/payment_type"
        },
        "type": "array"
      },
      "pending_transaction": {
        "properties": {
          "account_id": {
            "description": "The account id associated with the hold",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "type": "string"
          },
          "account_no": {
            "description": "The account number associated with the hold",
            "type": "string"
          },
          "created": {
            "description": "The creation date of the hold",
            "format": "date-time",
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/pending_transaction_data"
          },
          "enhanced_transaction": {
            "$ref": "#/components/schemas/enhanced_transaction_response"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "idemkey": {
            "description": "The idempotency key used when initially creating this hold.",
            "type": "string"
          },
          "offset_account_id": {
            "description": "The offset account id associated with the hold",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "type": "string"
          },
          "offset_account_no": {
            "description": "The offset account number associated with the hold",
            "type": "string"
          },
          "reference_id": {
            "description": "An external ID provided by the payment network to represent this transaction.",
            "nullable": true,
            "type": "string"
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          },
          "updated": {
            "description": "The date the hold was last update",
            "format": "date-time",
            "type": "string"
          },
          "uuid": {
            "description": "The unique identifier of the hold transaction.",
            "format": "uuid",
            "type": "string",
            "x-go-type": "string"
          }
        },
        "required": [
          "account_id",
          "account_no",
          "created",
          "data",
          "id",
          "idemkey",
          "reference_id",
          "tenant",
          "updated",
          "uuid"
        ],
        "title": "A pending transaction",
        "type": "object"
      },
      "pending_transaction_data": {
        "properties": {
          "amount": {
            "description": "The amount of the hold.",
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "auto_post_at": {
            "description": "The account \"available balance\" at the time this hold was created",
            "format": "date-time",
            "type": "string"
          },
          "avail_balance": {
            "description": "The account \"available balance\" at the time this hold was created (to be deprecated)",
            "format": "int64",
            "type": "integer"
          },
          "available_balance": {
            "description": "The account \"available balance\" at the time this hold was created",
            "format": "int64",
            "type": "integer"
          },
          "balance": {
            "description": "The account balance at the time this hold was created",
            "format": "int64",
            "type": "integer"
          },
          "currency": {
            "description": "ISO 4217 alphabetic currency code of the transfer amount",
            "type": "string"
          },
          "dc_sign": {
            "$ref": "#/components/schemas/dc_sign"
          },
          "effective_date": {
            "description": "The effective date of the transaction once it gets posted",
            "format": "date-time",
            "type": "string"
          },
          "expires_at": {
            "description": "The date that at which this hold is no longer valid.",
            "format": "date-time",
            "type": "string"
          },
          "external_data": {
            "$ref": "#/components/schemas/external_data"
          },
          "force_post": {
            "description": "Whether or not the hold was forced (spending controls ignored)",
            "type": "boolean"
          },
          "history": {
            "description": "An array representing any previous states of the hold, if it has been modified (For example, increasing or decreasing the hold amount).",
            "items": {
              "$ref": "#/components/schemas/pending_transaction_history"
            },
            "type": "array"
          },
          "idemkey": {
            "description": "The idempotency key used when initially creating this hold.",
            "type": "string"
          },
          "memo": {
            "description": "A short note to the recipient",
            "type": "string"
          },
          "network": {
            "description": "The network this transaction is associated with",
            "type": "string"
          },
          "operation": {
            "enum": [
              "hold_cancel",
              "hold_decline",
              "hold_decrease",
              "hold_expire",
              "hold_increase",
              "hold_new",
              "hold_post",
              "hold_replace"
            ],
            "type": "string"
          },
          "reason": {
            "description": "If a hold has been declined or modified, this will include the reason.",
            "type": "string"
          },
          "req_amount": {
            "description": "The requested amount, in the case of hold modifications.",
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "risk_info": {
            "$ref": "#/components/schemas/risk_info"
          },
          "status": {
            "description": "The status of the hold.",
            "enum": [
              "CLEARED",
              "DECLINED",
              "EXPIRED",
              "INTERNAL_ERROR",
              "PARTCLEARED",
              "PENDING",
              "RELEASED",
              "REPLACED"
            ],
            "type": "string"
          },
          "subtype": {
            "description": "The specific transaction type. For example, for `ach`, this may be \"outgoing_debit\".",
            "type": "string"
          },
          "total_amount": {
            "description": "The total amount of the hold. This may be different than `amount` in the case where a hold increase or decrease was requested.",
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "transaction_id": {
            "description": "The uuid of the transaction that this pending transaction originated from, if any. This is primary used when a transaction \"posts\", but a subset of the amount reserved until a future settlement date.",
            "format": "uuid",
            "type": "string",
            "x-go-type": "string"
          },
          "transaction_time": {
            "description": "The time that the transaction was created",
            "format": "date-time",
            "type": "string"
          },
          "type": {
            "description": "The general type of transaction. For example, \"card\" or \"ach\".",
            "type": "string"
          },
          "user_data": {
            "$ref": "#/components/schemas/user_data"
          },
          "was_partial": {
            "description": "Does this hold represent a partial debit (or credit)?",
            "type": "boolean"
          }
        },
        "required": [
          "amount",
          "auto_post_at",
          "avail_balance",
          "available_balance",
          "balance",
          "currency",
          "dc_sign",
          "effective_date",
          "expires_at",
          "force_post",
          "history",
          "idemkey",
          "memo",
          "network",
          "operation",
          "reason",
          "req_amount",
          "status",
          "subtype",
          "total_amount",
          "transaction_time",
          "type",
          "was_partial"
        ],
        "title": "Pending transaction data",
        "type": "object"
      },
      "pending_transaction_history": {
        "properties": {
          "account_id": {
            "description": "The account id associated with the hold",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "type": "string"
          },
          "account_no": {
            "description": "The account number associated with the hold",
            "type": "string"
          },
          "created": {
            "description": "The creation date of the hold",
            "format": "date-time",
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/pending_transaction_history_data"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "idemkey": {
            "description": "The idempotency key used when initially creating this transaction.",
            "type": "string"
          },
          "offset_account_id": {
            "description": "The offset account id associated with the hold",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "type": "string"
          },
          "offset_account_no": {
            "description": "The offset account number associated with the hold",
            "type": "string"
          },
          "reference_id": {
            "description": "An external ID provided by the payment network to represent this transaction.",
            "nullable": true,
            "type": "string"
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          },
          "updated": {
            "description": "The date the hold was last update",
            "format": "date-time",
            "type": "string"
          },
          "uuid": {
            "description": "The unique identifier of the hold transaction.",
            "format": "uuid",
            "type": "string",
            "x-go-type": "string"
          }
        },
        "required": [
          "account_id",
          "account_no",
          "created",
          "id",
          "idemkey",
          "reference_id",
          "tenant",
          "updated",
          "uuid"
        ],
        "title": "A pending transaction history",
        "type": "object"
      },
      "pending_transaction_history_data": {
        "properties": {
          "amount": {
            "description": "The amount of the hold.",
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "auto_post_at": {
            "description": "The time the transaction will be automatically posted.",
            "format": "date-time",
            "type": "string"
          },
          "avail_balance": {
            "description": "The account \"available balance\" at the time this hold was created (to be deprecated)",
            "format": "int64",
            "type": "integer"
          },
          "available_balance": {
            "description": "The account \"available balance\" at the time this hold was created",
            "format": "int64",
            "type": "integer"
          },
          "balance": {
            "description": "The account balance at the time this hold was created",
            "format": "int64",
            "type": "integer"
          },
          "currency": {
            "description": "ISO 4217 alphabetic currency code of the transfer amount",
            "type": "string"
          },
          "dc_sign": {
            "$ref": "#/components/schemas/dc_sign"
          },
          "effective_date": {
            "description": "The effective date of the transaction once it gets posted",
            "format": "date-time",
            "type": "string"
          },
          "expires_at": {
            "description": "The date that at which this hold is no longer valid.",
            "format": "date-time",
            "type": "string"
          },
          "external_data": {
            "$ref": "#/components/schemas/external_data"
          },
          "force_post": {
            "description": "Whether or not the hold was forced (spending controls ignored)",
            "type": "boolean"
          },
          "idemkey": {
            "description": "The idempotency key used when initially creating this hold.",
            "type": "string"
          },
          "memo": {
            "description": "A short note to the recipient",
            "type": "string"
          },
          "network": {
            "description": "The network this transaction is associated with",
            "type": "string"
          },
          "operation": {
            "enum": [
              "hold_cancel",
              "hold_decline",
              "hold_decrease",
              "hold_expire",
              "hold_increase",
              "hold_new",
              "hold_post",
              "hold_replace"
            ],
            "type": "string"
          },
          "reason": {
            "description": "If a hold has been declined or modified, this will include the reason.",
            "type": "string"
          },
          "req_amount": {
            "description": "The requested amount, in the case of hold modifications.",
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "risk_info": {
            "$ref": "#/components/schemas/risk_info"
          },
          "status": {
            "description": "The status of the hold.",
            "enum": [
              "CLEARED",
              "DECLINED",
              "EXPIRED",
              "INTERNAL_ERROR",
              "PARTCLEARED",
              "PENDING",
              "RELEASED",
              "REPLACED"
            ],
            "type": "string"
          },
          "subtype": {
            "description": "The specific transaction type. For example, for `ach`, this may be \"outgoing_debit\".",
            "type": "string"
          },
          "total_amount": {
            "description": "The total amount of the hold. This may be different than `amount` in the case where a hold increase or decrease was requested.",
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "transaction_id": {
            "description": "The uuid of the transaction that this pending transaction originated from, if any. This is primary used when a transaction \"posts\", but a subset of the amount reserved until a future settlement date.",
            "format": "uuid",
            "type": "string",
            "x-go-type": "string"
          },
          "transaction_time": {
            "description": "The time the transaction occurred.",
            "format": "date-time",
            "type": "string"
          },
          "type": {
            "description": "The general type of transaction. For example, \"card\" or \"ach\".",
            "type": "string"
          },
          "user_data": {
            "$ref": "#/components/schemas/user_data"
          },
          "was_partial": {
            "description": "Does this hold represent a partial debit (or credit)?",
            "type": "boolean"
          }
        },
        "required": [
          "amount",
          "auto_post_at",
          "avail_balance",
          "available_balance",
          "balance",
          "currency",
          "dc_sign",
          "effective_date",
          "expires_at",
          "force_post",
          "idemkey",
          "memo",
          "network",
          "operation",
          "reason",
          "req_amount",
          "status",
          "subtype",
          "total_amount",
          "transaction_time",
          "type",
          "was_partial"
        ],
        "title": "A pending transaction history data",
        "type": "object"
      },
      "pending_transactions": {
        "properties": {
          "next_page_token": {
            "description": "If returned, use the next_page_token to query for the next page of results. Not returned if there are no more rows.",
            "nullable": true,
            "type": "string"
          },
          "result": {
            "description": "List of pending transactions",
            "items": {
              "$ref": "#/components/schemas/pending_transaction"
            },
            "type": "array"
          }
        },
        "required": [
          "next_page_token",
          "result"
        ],
        "title": "Pending Transactions Response",
        "type": "object"
      },
      "person": {
        "properties": {
          "creation_time": {
            "format": "date-time",
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "last_updated_time": {
            "format": "date-time",
            "type": "string"
          },
          "middle_name": {
            "type": "string"
          },
          "relationship_type": {
            "type": "string"
          }
        },
        "title": "Person",
        "type": "object"
      },
      "person_business_owner_relationship": {
        "allOf": [
          {
            "required": [
              "additional_data",
              "from_person_id",
              "to_business_id"
            ]
          },
          {
            "$ref": "#/components/schemas/patch_person_business_owner_relationship"
          }
        ],
        "description": "Denotes the relationship between specified person and business.",
        "type": "object"
      },
      "person_business_relationship": {
        "allOf": [
          {
            "required": [
              "additional_data",
              "from_person_id",
              "to_business_id"
            ]
          },
          {
            "$ref": "#/components/schemas/patch_person_business_relationship"
          }
        ],
        "description": "Denotes the relationship between specified person and business.",
        "type": "object"
      },
      "person_id": {
        "description": "Unique ID for the person. Exactly one of `person_id` or `business_id` must be set.\n",
        "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
        "format": "uuid",
        "type": "string"
      },
      "person_id1": {
        "description": "Unique ID for the person. Exactly one of `person_id` or `business_id` must be set.\n",
        "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
        "format": "uuid",
        "type": "string"
      },
      "person_list": {
        "allOf": [
          {
            "properties": {
              "persons": {
                "description": "Array of persons.",
                "items": {
                  "$ref": "#/components/schemas/response_person"
                },
                "type": "array"
              }
            },
            "required": [
              "persons"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "person_status": {
        "description": "Status of the person. One of the following:\n* `ACTIVE` – is an integrator defined status.  Integrators should set a person to active if they believe the person to be qualified for conducting business.  Synctera will combine this status with other statuses such a verification to determine if the person is eligible for specific actions such as initiating transactions or issuing a card.\n* `DECEASED` – person is deceased.\n* `DENIED` – customer was turned down.\n* `DORMANT` – person is no longer active.\n* `ESCHEAT` – person's assets are abandoned and are property of the state.\n* `FROZEN` – person's actions are blocked for security, legal, or other reasons.\n* `INACTIVE` – an inactive status indicating that the person is no longer active.\n* `PROSPECT` – a potential customer, used for information-gathering and disclosures.\n* `SANCTION` – person is on a sanctions list and should be carefully monitored.\n",
        "enum": [
          "ACTIVE",
          "DECEASED",
          "DENIED",
          "DORMANT",
          "ESCHEAT",
          "FROZEN",
          "INACTIVE",
          "PROSPECT",
          "SANCTION"
        ],
        "example": "ACTIVE",
        "type": "string"
      },
      "personal_id_base": {
        "properties": {
          "id": {
            "description": "UUID for the personal identifier for subsequent changes and deletion",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "id_type": {
            "$ref": "#/components/schemas/personal_id_type"
          },
          "identifier": {
            "description": "The personal identifier. Format varies by personal identifier type.",
            "example": "123-45-6789",
            "type": "string"
          },
          "system_provided": {
            "description": "True if the identifier was provided by the system, e.g. via SSN Prefill.",
            "readOnly": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "personal_id_country_code_post": {
        "properties": {
          "country_code": {
            "description": "The ISO 3166 Alpha-2 country code for the country that issued the personal identifier.\nThis is optional for personal identifier types that have an implicit country, e.g. SSN.\nThis is required for other types, e.g. PASSPORT_NUMBER.\n",
            "format": "US",
            "type": "string"
          }
        }
      },
      "personal_id_country_code_response": {
        "properties": {
          "country_code": {
            "description": "The ISO 3166 Alpha-2 country code for the country that issued the personal identifier.\n",
            "format": "US",
            "type": "string"
          }
        }
      },
      "personal_id_customer_id": {
        "properties": {
          "customer_id": {
            "description": "Id of the customer having this personal identifier",
            "example": "21943c51-e4ff-4e57-9558-08cab6b963fe",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "personal_id_document_info": {
        "properties": {
          "expiry_date": {
            "description": "The date the associated document is set to expire on set by the governing authority.",
            "example": "2020-01-01",
            "format": "date",
            "type": "string"
          },
          "issue_date": {
            "description": "The date the associated document was issued by the governing authority.",
            "example": "2020-01-01",
            "format": "date",
            "type": "string"
          }
        },
        "type": "object"
      },
      "personal_id_type": {
        "description": "The type of the personal identifier. This cannot be changed once the personal identifier is created.\nOne of the following:\n* `ITIN` - US Individual Tax Identification Number. Format is 987-65-4321. Country code will default to US.\n* `PASSPORT_NUMBER` - Passport Number. Format varies by country. Country code is required.\n* `SIN` - Canadian Social Insurance Number. Format is 123-456-789. Country code will default to CA.\n* `SSN` - US Social Security Number. Format is 123-45-6789. Country code will default to US.\n* `DRIVER_LICENSE` - Driver License Number. Format varies by country and state.\n* `STATE_ID` - US State ID Number. Format varies by state.\n* `NATIONAL_ID` - National ID Number. Format varies by country.\n* `TAX_ID` - Tax ID Number. Format varies by country.\n* `CITIZENSHIP_CARD` - Canadian Citizenship Card Number. Format is A1234567.\n* `PR_CARD` - Permanent Resident Card Number. Format varies by country.\n* `PROVINCIAL_ID` - Canadian Provincial ID Number. Format varies by province.\n* `SECURE_STATUS_CARD` - Canadian Secure Status Card Number. Format is 1998-12-123456.\n",
        "enum": [
          "CITIZENSHIP_CARD",
          "DRIVER_LICENSE",
          "ITIN",
          "NATIONAL_ID",
          "PASSPORT_NUMBER",
          "PROVINCIAL_ID",
          "PR_CARD",
          "SECURE_STATUS_CARD",
          "SIN",
          "SSN",
          "STATE_ID",
          "TAX_ID"
        ],
        "example": "SSN",
        "type": "string"
      },
      "physical_card": {
        "allOf": [
          {
            "$ref": "#/components/schemas/base_card"
          },
          {
            "properties": {
              "card_image_id": {
                "description": "The ID of the custom card image used for this card",
                "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
                "format": "uuid",
                "type": "string"
              },
              "shipping": {
                "$ref": "#/components/schemas/shipping"
              }
            },
            "type": "object"
          }
        ],
        "description": "Details pertaining to issuing a new physical card",
        "title": "Physical Card"
      },
      "physical_card_format": {
        "description": "The format of a physical card product",
        "enum": [
          "CHIP",
          "CONTACT",
          "CONTACTLESS",
          "MAGNETIC_STRIPE",
          "PHYSICAL_COMBO"
        ],
        "type": "string"
      },
      "physical_card_issuance_request": {
        "allOf": [
          {
            "required": [
              "account_id",
              "card_product_id",
              "form",
              "type"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/physical_card"
          }
        ],
        "example": {
          "account_id": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "card_product_id": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "customer_id": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "form": "PHYSICAL",
          "type": "DEBIT"
        }
      },
      "physical_card_plus_status": {
        "allOf": [
          {
            "$ref": "#/components/schemas/physical_card"
          },
          {
            "$ref": "#/components/schemas/physical_card_response_status"
          }
        ]
      },
      "physical_card_response": {
        "allOf": [
          {
            "$ref": "#/components/schemas/physical_card_plus_status"
          },
          {
            "properties": {
              "bin": {
                "description": "The bin number",
                "type": "string"
              },
              "card_brand": {
                "$ref": "#/components/schemas/card_brand"
              },
              "physical_card_format": {
                "$ref": "#/components/schemas/physical_card_format"
              },
              "tenant": {
                "$ref": "#/components/schemas/tenant_id"
              }
            },
            "required": [
              "account_id",
              "card_brand",
              "card_product_id",
              "creation_time",
              "emboss_name",
              "form",
              "id",
              "physical_card_format",
              "shipping",
              "tenant",
              "type"
            ],
            "type": "object"
          }
        ],
        "title": "Physical Card"
      },
      "physical_card_response_status": {
        "allOf": [
          {
            "$ref": "#/components/schemas/card_status_object"
          },
          {
            "properties": {
              "card_fulfillment_status": {
                "$ref": "#/components/schemas/card_fulfillment_status"
              },
              "fulfillment_details": {
                "$ref": "#/components/schemas/fulfillment_details"
              },
              "tracking_number": {
                "deprecated": true,
                "description": "This contains all shipping details as provided by the card fulfillment provider, including the tracking number. This field is deprecated. Instead, please use the fulfillment_details object, which includes a field for just the tracking number.\n",
                "example": "Ship Date [2022-07-19], Shipping Method [UPS Next Day Air Saver]; Tracking Number [1ZW3268W1319325382]",
                "readOnly": true,
                "type": "string"
              }
            },
            "required": [
              "card_fulfillment_status",
              "card_status",
              "status_reason"
            ],
            "type": "object"
          }
        ]
      },
      "plaid_account_verification": {
        "allOf": [
          {
            "$ref": "#/components/schemas/base_account_verification"
          }
        ],
        "title": "Information specific to Plaid verification"
      },
      "post_license": {
        "properties": {
          "business_id": {
            "$ref": "#/components/schemas/business_id3"
          },
          "customer_id": {
            "$ref": "#/components/schemas/customer_id"
          },
          "license_number": {
            "$ref": "#/components/schemas/license_number"
          },
          "license_type": {
            "$ref": "#/components/schemas/license_type"
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          }
        },
        "type": "object"
      },
      "post_person": {
        "allOf": [
          {
            "$ref": "#/components/schemas/base_person"
          },
          {
            "$ref": "#/components/schemas/post_personal_ids_array"
          },
          {
            "properties": {
              "note": {
                "description": "Text to be added to a note when creating a person. A note is required when creating a person with a ban_status of SUSPENDED.",
                "type": "string"
              }
            }
          }
        ],
        "description": "Details of a person",
        "required": [
          "is_customer",
          "status"
        ],
        "title": "Person",
        "type": "object"
      },
      "post_personal_id": {
        "allOf": [
          {
            "$ref": "#/components/schemas/personal_id_base"
          },
          {
            "$ref": "#/components/schemas/personal_id_country_code_post"
          },
          {
            "$ref": "#/components/schemas/personal_id_document_info"
          }
        ],
        "required": [
          "id_type",
          "identifier"
        ],
        "type": "object"
      },
      "post_personal_id_w_cust": {
        "allOf": [
          {
            "$ref": "#/components/schemas/personal_id_customer_id"
          },
          {
            "properties": {
              "tenant": {
                "$ref": "#/components/schemas/tenant_id"
              }
            }
          },
          {
            "$ref": "#/components/schemas/personal_id_base"
          },
          {
            "$ref": "#/components/schemas/personal_id_country_code_post"
          },
          {
            "$ref": "#/components/schemas/personal_id_document_info"
          }
        ],
        "required": [
          "customer_id",
          "id_type",
          "identifier"
        ],
        "type": "object"
      },
      "post_personal_ids_array": {
        "properties": {
          "personal_ids": {
            "description": "Array of personal identifiers\n",
            "items": {
              "$ref": "#/components/schemas/post_personal_id"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "posted_transaction": {
        "properties": {
          "created": {
            "description": "The creation date of the transaction",
            "format": "date-time",
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/posted_transaction_data"
          },
          "disputes": {
            "description": "The set of disputes related to this transaction. Since a dispute can be for a partial amount of a transaction, a single transaction can be involved in multiple disputes.",
            "items": {
              "$ref": "#/components/schemas/transaction_dispute"
            },
            "type": "array"
          },
          "effective_date": {
            "description": "The \"effective date\" of a transaction. This may be earlier than posted_date in some cases (for example, a transaction that occurs on a Saturday may not be posted until the following Monday, but would have an effective date of Saturday)",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "idemkey": {
            "description": "The idempotency key used when initially creating this transaction.",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "type": "string"
          },
          "info_only": {
            "description": "Whether or not this transaction represents a purely informational operation or an actual money movement",
            "type": "boolean"
          },
          "lead_mode": {
            "description": "Whether or not this transaction was created operating in \"lead ledger\" mode",
            "type": "boolean"
          },
          "posted_date": {
            "description": "The date the transaction was posted. This is the date any money is considered to be added or removed from an account.",
            "format": "date-time",
            "type": "string"
          },
          "reference_id": {
            "description": "An external ID provided by the payment network to represent this transaction. This will always be null for internal transfers.",
            "nullable": true,
            "type": "string"
          },
          "settlement_date": {
            "description": "The date the transaction was settled according to Synctera's platform. Generally, this can be interpretted the date the transaction was actually processed and settlement by the payment network.",
            "format": "date",
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "subtype": {
            "description": "The specific transaction type. For example, for `ach`, this may be \"outgoing_debit\".",
            "type": "string"
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          },
          "transaction_time": {
            "description": "The time the transaction occurred.",
            "format": "date-time",
            "type": "string"
          },
          "type": {
            "description": "The general type of transaction. For example, \"card\" or \"ach\".",
            "type": "string"
          },
          "updated": {
            "description": "The date the transaction was last updated",
            "format": "date-time",
            "type": "string"
          },
          "uuid": {
            "description": "The unique identifier of the transaction.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "created",
          "data",
          "effective_date",
          "id",
          "idemkey",
          "info_only",
          "lead_mode",
          "posted_date",
          "reference_id",
          "status",
          "subtype",
          "tenant",
          "transaction_time",
          "type",
          "updated",
          "uuid"
        ],
        "title": "A posted transaction",
        "type": "object"
      },
      "posted_transaction_data": {
        "properties": {
          "external_data": {
            "$ref": "#/components/schemas/external_data"
          },
          "force_post": {
            "description": "Whether or not the hold was forced (spending controls ignored)",
            "type": "boolean"
          },
          "hold_id": {
            "description": "The uuid of the hold (pending transaction) that this transaction originated from, if any.",
            "format": "uuid",
            "type": "string",
            "x-go-type": "string"
          },
          "lines": {
            "description": "The set of accounting entries associated with this transaction. For example, a debit to a customer account will have a corresponding credit in a general ledger account.",
            "items": {
              "$ref": "#/components/schemas/transaction_line1"
            },
            "type": "array"
          },
          "memo": {
            "description": "A short note to the recipient",
            "type": "string"
          },
          "metadata": {
            "nullable": true,
            "type": "object"
          },
          "original_trx": {
            "description": "The \"original\" transaction that this transaction is related to. This is only populated in the case of reversed transactions.",
            "format": "uuid",
            "type": "string",
            "x-go-type": "string"
          },
          "parent_trx": {
            "description": "The \"parent\" transaction that this transaction is related to. This is only populated in the case of scheduled transactions.",
            "format": "uuid",
            "type": "string",
            "x-go-type": "string"
          },
          "risk_info": {
            "$ref": "#/components/schemas/risk_info"
          },
          "user_data": {
            "$ref": "#/components/schemas/user_data"
          }
        },
        "required": [
          "force_post",
          "lines",
          "memo",
          "metadata"
        ],
        "type": "object"
      },
      "posted_transactions": {
        "properties": {
          "next_page_token": {
            "description": "If returned, use the next_page_token to query for the next page of results. Not returned if there are no more rows.",
            "nullable": true,
            "type": "string"
          },
          "result": {
            "description": "List of posted transactions",
            "items": {
              "$ref": "#/components/schemas/posted_transaction"
            },
            "type": "array"
          }
        },
        "required": [
          "next_page_token",
          "result"
        ],
        "title": "Posted Transactions Response",
        "type": "object"
      },
      "prospect": {
        "allOf": [
          {
            "$ref": "#/components/schemas/base_customer"
          },
          {
            "properties": {
              "dob": {
                "description": "Customer's date of birth in RFC 3339 full-date format (YYYY-MM-DD)",
                "example": "2000-01-01",
                "format": "date",
                "type": "string"
              },
              "first_name": {
                "description": "Customer's first name",
                "example": "Jane",
                "type": "string"
              },
              "last_name": {
                "description": "Customer's last name",
                "example": "Smith",
                "type": "string"
              },
              "status": {
                "description": "Customer's status",
                "enum": [
                  "ACTIVE",
                  "DECEASED",
                  "DENIED",
                  "DORMANT",
                  "ESCHEAT",
                  "FROZEN",
                  "INACTIVE",
                  "PROSPECT",
                  "SANCTION"
                ],
                "type": "string"
              }
            },
            "required": [
              "status"
            ]
          }
        ],
        "description": "A prospect has a unique identifier. It can be upgrade to a customer with required information",
        "title": "Customer",
        "type": "object"
      },
      "provider_type": {
        "description": "Name of the organization that provided this data.",
        "enum": [
          "IDOLOGY",
          "SOCURE"
        ],
        "example": "SOCURE",
        "type": "string"
      },
      "provisioning_app_version": {
        "description": "Version of the application making the provisioning request.",
        "maxLength": 50,
        "type": "string"
      },
      "provisioning_controls": {
        "properties": {
          "in_app_provisioning": {
            "$ref": "#/components/schemas/in_app_provisioning"
          },
          "manual_entry": {
            "$ref": "#/components/schemas/manual_entry"
          },
          "wallet_provider_card_on_file": {
            "$ref": "#/components/schemas/wallet_provider_card_on_file"
          }
        },
        "type": "object"
      },
      "pull_details": {
        "description": "Additional PULL transfer details",
        "properties": {
          "country": {
            "$ref": "#/components/schemas/country_code"
          },
          "currency": {
            "$ref": "#/components/schemas/currency_code"
          },
          "network": {
            "description": "Payment network",
            "type": "string"
          },
          "product_type": {
            "$ref": "#/components/schemas/external_card_product_type"
          },
          "regulated": {
            "description": "Exemption status from debit card interchange fee standards",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "push_details": {
        "description": "Additional PUSH transfer details",
        "properties": {
          "country": {
            "$ref": "#/components/schemas/country_code"
          },
          "currency": {
            "$ref": "#/components/schemas/currency_code"
          },
          "funds_availability": {
            "$ref": "#/components/schemas/external_cards_funds_availability"
          },
          "network": {
            "description": "Payment network",
            "type": "string"
          },
          "product_type": {
            "$ref": "#/components/schemas/external_card_product_type"
          },
          "regulated": {
            "description": "Exemption status from debit card interchange fee standards",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "push_tokenize_request_data": {
        "properties": {
          "display_name": {
            "type": "string"
          },
          "last_digits": {
            "type": "string"
          },
          "network": {
            "example": "mastercard",
            "type": "string"
          },
          "opaque_payment_card": {
            "type": "string"
          },
          "token_service_provider": {
            "type": "string"
          },
          "user_address": {
            "$ref": "#/components/schemas/address1"
          }
        },
        "type": "object"
      },
      "question": {
        "properties": {
          "answer": {
            "description": "The answer",
            "example": "Since 2010",
            "type": "string"
          },
          "question": {
            "description": "The question",
            "example": "Since when do you work in this position?",
            "type": "string"
          },
          "section": {
            "description": "The section of the question",
            "example": "reason",
            "type": "string"
          }
        },
        "required": [
          "answer",
          "question"
        ],
        "type": "object"
      },
      "rails_charge_secured": {
        "description": "Rails available to enable on charged secured accounts",
        "properties": {
          "is_ach_enabled": {
            "description": "A flag to indicate whether ACH transactions are enabled.",
            "type": "boolean"
          },
          "is_card_enabled": {
            "description": "A flag to indicate whether card transactions are enabled.",
            "type": "boolean"
          },
          "is_eft_ca_enabled": {
            "description": "A flag to indicate whether EFT Canada transactions are enabled.",
            "type": "boolean"
          },
          "is_p2p_enabled": {
            "description": "A flag to indicate whether P2P transactions are enabled.",
            "type": "boolean"
          },
          "is_synctera_pay_enabled": {
            "description": "A flag to indicate whether Synctera Pay transactions are enabled.",
            "type": "boolean"
          },
          "is_wire_enabled": {
            "description": "A flag to indicate whether wire transactions are enabled.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "rails_charge_unsecured": {
        "description": "Rails available to enable on charged unsecured accounts",
        "properties": {
          "is_ach_enabled": {
            "description": "A flag to indicate whether ACH transactions are enabled.",
            "type": "boolean"
          },
          "is_card_enabled": {
            "description": "A flag to indicate whether card transactions are enabled.",
            "type": "boolean"
          },
          "is_eft_ca_enabled": {
            "description": "A flag to indicate whether EFT Canada transactions are enabled.",
            "type": "boolean"
          },
          "is_p2p_enabled": {
            "description": "A flag to indicate whether P2P transactions are enabled.",
            "type": "boolean"
          },
          "is_synctera_pay_enabled": {
            "description": "A flag to indicate whether Synctera Pay transactions are enabled.",
            "type": "boolean"
          },
          "is_wire_enabled": {
            "description": "A flag to indicate whether wire transactions are enabled.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "rails_depository": {
        "description": "Rails available to enable on depository accounts",
        "properties": {
          "is_ach_enabled": {
            "description": "A flag to indicate whether ACH transactions are enabled.",
            "type": "boolean"
          },
          "is_card_enabled": {
            "description": "A flag to indicate whether card transactions are enabled.",
            "type": "boolean"
          },
          "is_eft_ca_enabled": {
            "description": "A flag to indicate whether EFT Canada transactions are enabled.",
            "type": "boolean"
          },
          "is_external_card_enabled": {
            "description": "A flag to indicate whether external card transactions are enabled.",
            "type": "boolean"
          },
          "is_p2p_enabled": {
            "description": "A flag to indicate whether P2P transactions are enabled.",
            "type": "boolean"
          },
          "is_synctera_pay_enabled": {
            "description": "A flag to indicate whether Synctera Pay transactions are enabled.",
            "type": "boolean"
          },
          "is_wire_enabled": {
            "description": "A flag to indicate whether wire transactions are enabled.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "rails_general_ledger": {
        "description": "Rails available to enable on general ledger accounts",
        "properties": {
          "is_ach_enabled": {
            "description": "A flag to indicate whether ACH transactions are enabled.",
            "type": "boolean"
          },
          "is_card_enabled": {
            "description": "A flag to indicate whether card transactions are enabled.",
            "type": "boolean"
          },
          "is_eft_ca_enabled": {
            "description": "A flag to indicate whether EFT Canada transactions are enabled.",
            "type": "boolean"
          },
          "is_p2p_enabled": {
            "description": "A flag to indicate whether P2P transactions are enabled.",
            "type": "boolean"
          },
          "is_synctera_pay_enabled": {
            "description": "A flag to indicate whether Synctera Pay transactions are enabled.",
            "type": "boolean"
          },
          "is_wire_enabled": {
            "description": "A flag to indicate whether wire transactions are enabled.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "rails_loc": {
        "description": "Rails available to enable on Loc accounts",
        "properties": {
          "is_ach_enabled": {
            "description": "A flag to indicate whether ACH transactions are enabled.",
            "type": "boolean"
          },
          "is_eft_ca_enabled": {
            "description": "A flag to indicate whether EFT Canada transactions are enabled.",
            "type": "boolean"
          },
          "is_p2p_enabled": {
            "description": "A flag to indicate whether P2P transactions are enabled.",
            "type": "boolean"
          },
          "is_synctera_pay_enabled": {
            "description": "A flag to indicate whether Synctera Pay transactions are enabled.",
            "type": "boolean"
          },
          "is_wire_enabled": {
            "description": "A flag to indicate whether wire transactions are enabled.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "rails_revolving_credit_secured": {
        "description": "Rails available to enable on revolving credit secured accounts",
        "properties": {
          "is_ach_enabled": {
            "description": "A flag to indicate whether ACH transactions are enabled.",
            "type": "boolean"
          },
          "is_card_enabled": {
            "description": "A flag to indicate whether card transactions are enabled.",
            "type": "boolean"
          },
          "is_eft_ca_enabled": {
            "description": "A flag to indicate whether EFT Canada transactions are enabled.",
            "type": "boolean"
          },
          "is_p2p_enabled": {
            "description": "A flag to indicate whether P2P transactions are enabled.",
            "type": "boolean"
          },
          "is_synctera_pay_enabled": {
            "description": "A flag to indicate whether Synctera Pay transactions are enabled.",
            "type": "boolean"
          },
          "is_wire_enabled": {
            "description": "A flag to indicate whether wire transactions are enabled.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "rails_revolving_credit_unsecured": {
        "description": "Rails available to enable on revolving credit unsecured accounts",
        "properties": {
          "is_ach_enabled": {
            "description": "A flag to indicate whether ACH transactions are enabled.",
            "type": "boolean"
          },
          "is_card_enabled": {
            "description": "A flag to indicate whether card transactions are enabled.",
            "type": "boolean"
          },
          "is_eft_ca_enabled": {
            "description": "A flag to indicate whether EFT Canada transactions are enabled.",
            "type": "boolean"
          },
          "is_p2p_enabled": {
            "description": "A flag to indicate whether P2P transactions are enabled.",
            "type": "boolean"
          },
          "is_synctera_pay_enabled": {
            "description": "A flag to indicate whether Synctera Pay transactions are enabled.",
            "type": "boolean"
          },
          "is_wire_enabled": {
            "description": "A flag to indicate whether wire transactions are enabled.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "rate_details": {
        "properties": {
          "accrual_period": {
            "description": "How often interest gets calculated against the balance. Note: although two options are displayed here, only DAILY is supported at the moment.\n",
            "enum": [
              "DAILY",
              "MONTHLY"
            ],
            "type": "string"
          },
          "rate": {
            "description": "Rate in basis points. E.g. 5 represents 0.05%",
            "format": "int32",
            "minimum": 0,
            "type": "integer"
          },
          "valid_from": {
            "description": "Rate effective start date. Inclusive.",
            "format": "date",
            "type": "string"
          },
          "valid_to": {
            "description": "Rate effective end date. Exclusive.",
            "format": "date",
            "type": "string"
          }
        },
        "required": [
          "accrual_period",
          "rate",
          "valid_from"
        ],
        "type": "object"
      },
      "rates": {
        "description": "A list of interest rate. Date intervals between valid_from and valid_to expect to have no overlap.\n",
        "items": {
          "$ref": "#/components/schemas/rate_details"
        },
        "type": "array"
      },
      "raw_response": {
        "deprecated": true,
        "properties": {
          "provider": {
            "$ref": "#/components/schemas/provider_type"
          },
          "raw_data": {
            "description": "Raw data from an external provider, as a JSON string.",
            "example": "{}",
            "type": "string"
          }
        },
        "title": "Raw response from providers.",
        "type": "object"
      },
      "recipient_name": {
        "description": "The name of the recipient to whom the card will be shipped",
        "properties": {
          "first_name": {
            "example": "Jane",
            "maxLength": 30,
            "type": "string"
          },
          "last_name": {
            "example": "Smith",
            "maxLength": 30,
            "type": "string"
          },
          "middle_name": {
            "example": "Anne",
            "maxLength": 30,
            "type": "string"
          }
        },
        "required": [
          "first_name",
          "last_name"
        ],
        "type": "object"
      },
      "related_resource_field": {
        "description": "🚧 Beta\nThis is a Beta property. Feedback from the community is welcome. We may make breaking changes to this property.\nPath to the field in the related resource that the note pertains to. This uses a dot notation like the following:\nExamples:\n* a field in the resource: first_name\n* a sub-field: legal_address.city\n* nested arrays: application_details.sections[1].pages[2].items[0].answer\n",
        "example": "/legal_address/city",
        "type": "string"
      },
      "related_resource_id": {
        "description": "The id of the resource that is associated with the note.\nThis is typically a UUID.\nFor TENANT it is a string tenant ID.\n",
        "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
        "type": "string"
      },
      "related_resource_type": {
        "description": "The type of the resource related to the document",
        "enum": [
          "ACCOUNT",
          "BUSINESS",
          "CUSTOMER",
          "EDD",
          "INVOICE",
          "REVENUE_STATEMENT"
        ],
        "type": "string"
      },
      "related_resource_type1": {
        "description": "related resource type",
        "enum": [
          "ACCOUNT",
          "BUSINESS",
          "CUSTOMER",
          "TRANSACTION"
        ],
        "type": "string"
      },
      "related_resource_type2": {
        "description": "Type of the resource associated with the note.\n",
        "enum": [
          "ACCOUNT",
          "APPLICATION",
          "BILLING",
          "BUSINESS",
          "CUSTOMER",
          "FILE",
          "SHADOW_TRANSACTION",
          "SNAPSHOT",
          "TENANT",
          "TRANSACTION",
          "USER"
        ],
        "example": "CUSTOMER",
        "type": "string"
      },
      "relationship": {
        "properties": {
          "id": {
            "description": "ID of related entity",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "relationship_role": {
            "$ref": "#/components/schemas/relationship_role"
          }
        },
        "required": [
          "id",
          "relationship_role"
        ],
        "title": "Relationship",
        "type": "object"
      },
      "relationship_in": {
        "discriminator": {
          "mapping": {
            "BENEFICIAL_OWNER_OF": "#/components/schemas/person_business_owner_relationship",
            "MANAGING_PERSON_OF": "#/components/schemas/person_business_relationship",
            "OWNER_OF": "#/components/schemas/business_business_owner_relationship",
            "PAYER_PAYEE": "#/components/schemas/payer_payee_relationship"
          },
          "propertyName": "relationship_type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/business_business_owner_relationship"
          },
          {
            "$ref": "#/components/schemas/person_business_relationship"
          },
          {
            "$ref": "#/components/schemas/person_business_owner_relationship"
          },
          {
            "$ref": "#/components/schemas/payer_payee_relationship"
          }
        ],
        "type": "object"
      },
      "relationship_list": {
        "allOf": [
          {
            "properties": {
              "relationships": {
                "description": "Array of relationships",
                "items": {
                  "$ref": "#/components/schemas/relationship_response"
                },
                "type": "array"
              }
            },
            "required": [
              "relationships"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "relationship_response": {
        "allOf": [
          {
            "properties": {
              "account_id": {
                "description": "Account ID",
                "format": "uuid",
                "type": "string"
              }
            }
          },
          {
            "$ref": "#/components/schemas/account_relationship"
          }
        ],
        "description": "The relationship of the account and the customer/business.",
        "title": "Account Relationship Response",
        "type": "object"
      },
      "relationship_role": {
        "description": "CUSTODIAN - Related party is the custodian e.g. the parent, BENEFICIARY - Related party is the beneficiary e.g. the dependent, PARTNER - Related party is the partner",
        "enum": [
          "BENEFICIARY",
          "CUSTODIAN",
          "PARTNER"
        ],
        "example": "CUSTODIAN",
        "title": "Relationship Role",
        "type": "string"
      },
      "relationship_types": {
        "description": "The relationship type. One of the following:\n* `BENEFICIAL_OWNER_OF` – a person who directly or indirectly owns a portion of the business.\n* `MANAGING_PERSON_OF` – a person who is an officer, director, or other notable person of an organization.\n* `OWNER_OF` – a business with ownership of another business.\n* `PAYER_PAYEE` - a person or business with a payer payee relationship with another person or business\n",
        "enum": [
          "BENEFICIAL_OWNER_OF",
          "MANAGING_PERSON_OF",
          "OWNER_OF",
          "PAYER_PAYEE"
        ],
        "example": "BENEFICIAL_OWNER_OF",
        "type": "string"
      },
      "relationships_list": {
        "allOf": [
          {
            "properties": {
              "relationships": {
                "description": "Array of business/person relationships.",
                "items": {
                  "$ref": "#/components/schemas/relationship_in"
                },
                "type": "array"
              }
            },
            "required": [
              "relationships"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "residential_expense": {
        "description": "The residential expense.",
        "properties": {
          "amount": {
            "description": "The amount paid in residential expenses at the specified frequency. For example, $112.35 USD is represented as 11235 cents).",
            "example": 1000,
            "maximum": 100000000000,
            "minimum": 0,
            "type": "integer"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          },
          "frequency": {
            "$ref": "#/components/schemas/frequency"
          }
        },
        "type": "object"
      },
      "response_history_item": {
        "description": "Response history object of the webhook request",
        "properties": {
          "code": {
            "description": "Response code from the request",
            "type": "integer"
          },
          "response_body": {
            "description": "Response body from the request(Length more than 1024 will be trimmed)",
            "type": "string"
          },
          "response_time": {
            "description": "Timestamp that the response is received",
            "format": "date-time",
            "type": "string"
          },
          "sent_time": {
            "description": "Timestamp that the request is sent",
            "format": "date-time",
            "type": "string"
          }
        },
        "title": "Response history",
        "type": "object"
      },
      "response_license": {
        "properties": {
          "business_id": {
            "$ref": "#/components/schemas/business_id3"
          },
          "creation_time": {
            "description": "The date and time the license resource  was created.",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          },
          "customer_id": {
            "$ref": "#/components/schemas/customer_id"
          },
          "id": {
            "description": "License record unique id",
            "example": "7df5c505-b47c-490d-855f-c1b3cd99327f",
            "format": "uuid",
            "type": "string"
          },
          "last_updated_time": {
            "description": "The date and time the license resource was last updated.",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          },
          "last_verified_time": {
            "description": "Timestamp of the last time the license was verified",
            "example": "2023-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          },
          "license_classification": {
            "description": "The classification of the license",
            "enum": [
              "MEDICAL_AND_RECREATIONAL_CANNABIS",
              "MEDICAL_CANNABIS",
              "RECREATIONAL_CANNABIS"
            ],
            "example": "RECREATIONAL_CANNABIS",
            "type": "string"
          },
          "license_expiration_date": {
            "description": "The date on which the license will expire",
            "example": "2023-01-01",
            "format": "date",
            "type": "string"
          },
          "license_issuance_date": {
            "description": "The date on which the license was issued",
            "example": "2023-01-01",
            "format": "date",
            "type": "string"
          },
          "license_number": {
            "$ref": "#/components/schemas/license_number"
          },
          "license_type": {
            "$ref": "#/components/schemas/license_type"
          },
          "license_type_description": {
            "description": "Free-form text describing the type of the license",
            "example": "Limited Marijuana Cultivation Facility",
            "type": "string"
          },
          "licensee_address": {
            "description": "The address of the entity that holds the license as reported by the verifying vendor",
            "example": "1064 elm street, New York",
            "type": "string"
          },
          "licensee_name": {
            "description": "The name of the entity that holds the license that's reported by the verifying vendor",
            "example": "Apex Corp",
            "type": "string"
          },
          "licensing_authority": {
            "description": "The name of the licensing body that granted the license",
            "example": "Alcohol & Marijuana Control Office",
            "type": "string"
          },
          "status": {
            "description": "The status of the license",
            "enum": [
              "ACCEPTED",
              "REJECTED",
              "REVIEW",
              "UNVERIFIED"
            ],
            "example": "ACCEPTED",
            "type": "string"
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          }
        },
        "required": [
          "creation_time",
          "id",
          "last_updated_time",
          "license_number",
          "license_type",
          "status",
          "tenant"
        ],
        "type": "object"
      },
      "response_person": {
        "allOf": [
          {
            "$ref": "#/components/schemas/base_person"
          },
          {
            "properties": {
              "classifications": {
                "$ref": "#/components/schemas/classifications"
              }
            },
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/response_personal_ids_array"
          }
        ],
        "description": "Details of a person",
        "required": [
          "ban_status",
          "creation_time",
          "id",
          "is_customer",
          "last_updated_time",
          "status",
          "tenant",
          "verification_status"
        ],
        "type": "object"
      },
      "response_personal_id": {
        "allOf": [
          {
            "$ref": "#/components/schemas/personal_id_country_code_response"
          },
          {
            "$ref": "#/components/schemas/personal_id_base"
          },
          {
            "$ref": "#/components/schemas/personal_id_document_info"
          }
        ],
        "required": [
          "country_code",
          "id",
          "id_type",
          "identifier",
          "system_provided"
        ],
        "type": "object"
      },
      "response_personal_id_w_cust": {
        "allOf": [
          {
            "$ref": "#/components/schemas/personal_id_customer_id"
          },
          {
            "$ref": "#/components/schemas/personal_id_country_code_response"
          },
          {
            "properties": {
              "tenant": {
                "$ref": "#/components/schemas/tenant_id"
              }
            }
          },
          {
            "$ref": "#/components/schemas/personal_id_base"
          },
          {
            "$ref": "#/components/schemas/personal_id_document_info"
          }
        ],
        "required": [
          "country_code",
          "customer_id",
          "id",
          "id_type",
          "identifier",
          "system_provided",
          "tenant"
        ],
        "type": "object"
      },
      "response_personal_ids_array": {
        "properties": {
          "personal_ids": {
            "description": "Array of personal identifiers\n",
            "items": {
              "$ref": "#/components/schemas/response_personal_id"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "return_data": {
        "description": "Filled if the entry is a return.",
        "properties": {
          "code": {
            "description": "Return reason code, i.e. why is the entry being returned.",
            "example": "R01",
            "type": "string"
          },
          "dishonored_return_code": {
            "description": "Code of the original dishonored return (without \"R\"). Filled only if this is a contested return.",
            "example": "69",
            "type": "string"
          },
          "dishonored_return_settlement_date": {
            "description": "Settlement date of the original dishonored return. Filled only if this is a contested return. Formatted as an ordinal date, a single day-of-year number between 1-366.",
            "example": "256",
            "type": "string"
          },
          "dishonored_return_trace": {
            "description": "Trace number of the original dishonored return. Filled only if this is a contested return.",
            "example": "123456780000069",
            "type": "string"
          },
          "field_errors": {
            "description": "Required for return reason code R69. Contains the code(s) to indicate the field(s) in which erroneous information in the original return is located.",
            "example": "05",
            "type": "string"
          },
          "original_dfi_no": {
            "description": "Receiving financial institution of the original entry.",
            "example": "364275034",
            "type": "string"
          },
          "original_trace": {
            "description": "Trace number of the original entry that is being returned.",
            "example": "123456780000069",
            "type": "string"
          },
          "return_code": {
            "description": "Return reason code of the original return (just the number). Filled only if this is a dishonored return.",
            "example": "13",
            "type": "string"
          },
          "return_settlement_date": {
            "description": "Settlement date of the original return. Filled only if this is a dishonored return. Formatted as an ordinal date, a single day-of-year number between 1-366.",
            "example": "256",
            "type": "string"
          },
          "return_trace": {
            "description": "Trace number of the original return. Filled only if this is a dishonored return.",
            "example": "123456780000069",
            "type": "string"
          }
        },
        "required": [
          "code",
          "original_dfi_no",
          "original_trace"
        ],
        "type": "object"
      },
      "return_data1": {
        "description": "Data associated with a returned wire",
        "properties": {
          "original_end_to_end_identification": {
            "type": "string"
          },
          "original_id": {
            "description": "UUID of the original wire that was returned. This field is populated if the system successfully matches the return to an original wire.",
            "format": "uuid",
            "type": "string"
          },
          "original_instruction_identification": {
            "type": "string"
          },
          "original_transaction_id": {
            "description": "Ledger transaction UUID of the original wire that was returned. This field is populated if the system successfully matches the return to an original wire.",
            "format": "uuid",
            "type": "string"
          },
          "original_transaction_identification": {
            "type": "string"
          },
          "original_uetr": {
            "type": "string"
          },
          "previous_message_id": {
            "description": "IMAD of the original wire that was returned",
            "type": "string"
          },
          "reason": {
            "description": "Additional information regarding the cause of the return",
            "type": "string"
          },
          "reason_code": {
            "description": "The code associated with the return reason",
            "example": "NARR",
            "type": "string"
          }
        },
        "required": [
          "previous_message_id"
        ],
        "title": "Return Data",
        "type": "object"
      },
      "reversal_model": {
        "example": {
          "amount": 80,
          "find_original_window_days": 6,
          "is_advice": false,
          "network_fees": [
            {
              "amount": 123,
              "credit_debit": "C",
              "type": "ISSUER_FEE"
            },
            {
              "amount": 123,
              "credit_debit": "C",
              "type": "ISSUER_FEE"
            }
          ],
          "original_transaction_id": "original_transaction_id"
        },
        "properties": {
          "amount": {
            "description": "The amount of the transaction in the smallest whole denomination of the applicable currency (eg. For USD use cents)",
            "type": "integer"
          },
          "find_original_window_days": {
            "format": "int32",
            "type": "integer"
          },
          "is_advice": {
            "default": false,
            "type": "boolean"
          },
          "network_fees": {
            "items": {
              "$ref": "#/components/schemas/network_fee_model"
            },
            "type": "array"
          },
          "original_transaction_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "amount",
          "original_transaction_id"
        ],
        "type": "object"
      },
      "risk_data": {
        "nullable": true,
        "properties": {
          "client_ip": {
            "description": "Client IP",
            "type": "string"
          }
        },
        "type": "object"
      },
      "risk_info": {
        "description": "Information received by the transaction risk/fraud service related to this transaction",
        "nullable": true,
        "type": "object"
      },
      "routing_identifier": {
        "description": "An object that holds a routing number and its corresponding information",
        "properties": {
          "location": {
            "description": "The address of the institution with the routing number specified in the routing_idetifier object",
            "example": "123 main street",
            "type": "string"
          },
          "payment_rails": {
            "description": "The supported payment types by the routing number specified in routing_identifier",
            "items": {
              "enum": [
                "ACH",
                "WIRE"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "routing_number": {
            "description": "A sequence of digits used to identify specific financial institution",
            "example": 121116739,
            "type": "string"
          }
        },
        "required": [
          "routing_number"
        ],
        "type": "object"
      },
      "savings_summary": {
        "description": "A summary of the accrued interest for the saving account in the current period",
        "properties": {
          "accrual_days": {
            "description": "The number of days for which interest was accrued. In most cases this will match the number of days in the billing period, but may be less if an account was closed part way through the period.\n",
            "format": "int32",
            "type": "integer"
          },
          "apy": {
            "description": "The annual percentage yield (APY) for this account for this statement period, rounded to two decimal points. For example, an APY of 5.5% will display as 5.50.\n",
            "example": 5.5,
            "format": "float",
            "type": "number"
          },
          "interest_earned": {
            "description": "The total interest earned by the depository account for this statement period in ISO 4217 minor currency units. For example, $1.50 USD of interest will be displayed as 150.\n",
            "example": 150,
            "format": "int64",
            "type": "integer"
          },
          "interest_earned_previous_month": {
            "description": "The total interest earned by the depository account in the previous statement period in ISO 4217 minor currency units. For example, $1.50 USD of interest will be displayed as 150.\n",
            "example": 150,
            "format": "int64",
            "type": "integer"
          },
          "interest_earned_previous_year": {
            "description": "The total interest earned by the depository account in the previous year in ISO 4217 minor currency units. For example, $100 USD of interest will be displayed as 10000.\n",
            "example": 10000,
            "format": "int64",
            "type": "integer"
          },
          "interest_earned_ytd": {
            "description": "The total interest earned by the depository account for this year to date in ISO 4217 minor currency units. For example, $100 USD of interest will be displayed as 10000.\n",
            "example": 10000,
            "format": "int64",
            "type": "integer"
          }
        },
        "title": "Saving Summary",
        "type": "object"
      },
      "schedule_config": {
        "description": "Payment schedule recurrence configuration",
        "properties": {
          "count": {
            "description": "Number of times to recur. Exactly one of end_date or count must be provided",
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          },
          "end_date": {
            "description": "End date of the schedule (exclusive). Exactly one of end_date or count must be provided",
            "format": "date",
            "type": "string"
          },
          "frequency": {
            "enum": [
              "DAILY",
              "MONTHLY",
              "WEEKLY"
            ],
            "type": "string"
          },
          "interval": {
            "description": "Interval between recurrences, e.g. interval = 2 with frequency = WEEKLY means every other week.",
            "maximum": 366,
            "minimum": 1,
            "type": "integer"
          },
          "start_date": {
            "description": "Start date of the schedule (inclusive)",
            "format": "date",
            "type": "string"
          },
          "start_search": {
            "description": "start_search determines the direction of the search for a start date that falls on a banking day. If 'BACKWARD' is selected, the search begins from the specified start date and checks each preceding day, up to a month. Conversely, if 'FORWARD' is selected, the search commences from the specified start date and checks each subsequent day, for up to a month.\n",
            "enum": [
              "BACKWARD",
              "FORWARD"
            ],
            "type": "string"
          }
        },
        "required": [
          "frequency",
          "interval",
          "start_date"
        ],
        "type": "object"
      },
      "schemas-bypassable_errors": {
        "enum": [
          "ACCOUNT_CLOSED",
          "ACCOUNT_OWNER_WATCHLIST",
          "BALANCE_VIOLATION",
          "IMPROPER_ACCOUNT_ACCESS_STATUS",
          "IMPROPER_ACCOUNT_CUSTOMER_RELATIONSHIP",
          "IMPROPER_ACCOUNT_STATUS",
          "IMPROPER_ANCESTOR_ACCOUNT_ACCESS_STATUS",
          "IMPROPER_ANCESTOR_ACCOUNT_STATUS",
          "IMPROPER_CUSTOMER_STATUS",
          "IMPROPER_CUSTOMER_VERIFICATION_STATUS",
          "IMPROPER_PARTNER_LIFECYCLE_STATUS",
          "IMPROPER_PARTNER_VERIFICATION_STATUS",
          "INSUFFICIENT_FUNDS",
          "SPEND_CONTROL_VIOLATION",
          "SUSPECTED_FRAUD"
        ],
        "type": "string"
      },
      "security": {
        "properties": {
          "linked_account_id": {
            "description": "ID of linked backing account for use as a security, e.g. for use in a Smart Charge Card\noffering. Must be of type CHECKING or SAVING.\n",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "linked_account_id"
        ],
        "type": "object"
      },
      "shipping": {
        "description": "Details about the shipping method. If supplied this will override the default shipping address of the customer or account.",
        "properties": {
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/address1"
              }
            ],
            "description": "The address to which the card will be shipped - Defaults to account shipping address if none supplied"
          },
          "care_of_line": {
            "description": "The name of the person to send in care of",
            "type": "string"
          },
          "is_expedited_fulfillment": {
            "default": false,
            "deprecated": true,
            "description": "Is the shipment expedited",
            "type": "boolean"
          },
          "method": {
            "default": "LOCAL_MAIL",
            "description": "The shipping method.\n* `INTERNATIONAL_GROUND` is only available for addresses in Canada and Mexico.\n",
            "enum": [
              "INTERNATIONAL",
              "INTERNATIONAL_GROUND",
              "INTERNATIONAL_PRIORITY",
              "LOCAL_MAIL",
              "LOCAL_PRIORITY",
              "OVERNIGHT",
              "TWO_DAY"
            ],
            "example": "LOCAL_MAIL",
            "type": "string"
          },
          "phone_number": {
            "description": "The phone number of the recipient",
            "example": "+14374570680",
            "pattern": "^\\+[1-9]\\d{1,14}$",
            "type": "string"
          },
          "recipient_name": {
            "$ref": "#/components/schemas/recipient_name"
          }
        },
        "type": "object"
      },
      "shipping_address": {
        "allOf": [
          {
            "$ref": "#/components/schemas/address"
          },
          {
            "description": "Shipping address"
          }
        ]
      },
      "simulate_card_fulfillment": {
        "properties": {
          "card_fulfillment_status": {
            "$ref": "#/components/schemas/card_fulfillment_status"
          }
        },
        "required": [
          "card_fulfillment_status"
        ],
        "type": "object"
      },
      "simulation_response_model": {
        "type": "object"
      },
      "single_use_token_request": {
        "properties": {
          "account_id": {
            "description": "The ID of the account to which the token will be linked",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "customer_id": {
            "description": "The ID of the customer to whom the token will be issued",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "account_id",
          "customer_id"
        ],
        "type": "object"
      },
      "single_use_token_response": {
        "example": {
          "customer_account_mapping_id": "user_token",
          "expires": "2000-01-23T04:56:07.000+00:00",
          "token": "token"
        },
        "properties": {
          "customer_account_mapping_id": {
            "type": "string"
          },
          "expires": {
            "description": "yyyy-MM-ddTHH:mm:ssZ",
            "format": "date-time",
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "required": [
          "expires"
        ],
        "type": "object"
      },
      "source_of_wealth": {
        "description": "The source of wealth for the customer.",
        "enum": [
          "INHERITANCE",
          "INVESTMENT",
          "OTHER",
          "PROPERTY_SALE",
          "RETIREMENT",
          "SALARY"
        ],
        "type": "string"
      },
      "specific_involvement": {
        "description": "Defines if the business is involved in a few high risk industries.",
        "properties": {
          "arms_defense_or_security": {
            "description": "Defines if the business is in the arms/defense, private security firms, or private military contractors.",
            "example": true,
            "type": "boolean"
          },
          "cannabis_industry": {
            "description": "Defines if the business is in the cannabis industry.",
            "example": true,
            "type": "boolean"
          },
          "embassies_or_consulates": {
            "description": "Defines if the business is an embassy or a consulate.",
            "example": true,
            "type": "boolean"
          },
          "illegal_activities_prostitution_or_pirated_goods": {
            "description": "Defines if the business is involved in illegal activities, prostitution, or pirated goods.",
            "example": true,
            "type": "boolean"
          },
          "law_firm_or_fiduciary": {
            "description": "Defines if the business is a law firm or a fiduciary.",
            "example": true,
            "type": "boolean"
          },
          "licensed_money_service_business": {
            "description": "Defines if the business is a licensed money service business.",
            "example": true,
            "type": "boolean"
          },
          "lotteries_crypto_currency_or_illegal_internet_gambling": {
            "description": "Defines if the business is a provider of online lottery, mail order lotteries and sweepstakes Non-Fiat Currency (including open loop virtual currency), and Unlawful Internet Gambling.",
            "example": true,
            "type": "boolean"
          },
          "ngo_or_nonprofit": {
            "description": "Defines if the business is a NGO or a nonprofit.",
            "example": true,
            "type": "boolean"
          },
          "precious_metals_stones_or_jewellery": {
            "description": "Defines if the business is in the precious metals, stones, jewellery industry, or rough diamond trade.",
            "example": true,
            "type": "boolean"
          },
          "shell_banks_or_unlicensed_money_service_business": {
            "description": "Defines if the business is a shell bank or a money service business where licensing is required.",
            "example": true,
            "type": "boolean"
          },
          "third_party_processor": {
            "description": "Defines if the business is a third party processor.",
            "example": true,
            "type": "boolean"
          },
          "wellness_gift_cards_wholesaler": {
            "description": "Defines if the business is a salon, massage clinic, spa, gift card retailer, or wholesaler.",
            "example": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "spend_control": {
        "properties": {
          "action_case": {
            "description": "If set, create a case for transactions that do not conform to the spend control",
            "type": "boolean"
          },
          "action_decline": {
            "description": "If set, decline transactions that do not conform to the spend control",
            "type": "boolean"
          },
          "amount_limit": {
            "description": "Monetary limit for the spend control in the smallest currency unit (eg cents)",
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "creation_time": {
            "description": "The timestamp representing when the spend control was created",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "direction": {
            "$ref": "#/components/schemas/spend_control_direction"
          },
          "id": {
            "description": "Spend Control ID",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "readOnly": true,
            "type": "string",
            "x-go-type": "string"
          },
          "is_active": {
            "description": "Indicates if spend control is active",
            "example": true,
            "type": "boolean"
          },
          "last_modified_time": {
            "description": "The timestamp representing when the spend control was last modified",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "merchant_category_codes": {
            "$ref": "#/components/schemas/merchant_category_codes"
          },
          "name": {
            "description": "Name assigned to spend control",
            "type": "string"
          },
          "payment_sub_types": {
            "$ref": "#/components/schemas/payment_sub_type_list"
          },
          "payment_types": {
            "$ref": "#/components/schemas/payment_type_list"
          },
          "time_range": {
            "$ref": "#/components/schemas/spend_control_time_range"
          }
        },
        "required": [
          "action_case",
          "action_decline",
          "amount_limit",
          "is_active",
          "name",
          "time_range"
        ],
        "title": "Spend Control",
        "type": "object"
      },
      "spend_control_direction": {
        "description": "The direction of funds flow to which a spend control applies. To limit the rate of funds flowing out of an\naccount, use DEBIT. To limit the rate of funds flowing in to an account, use CREDIT.\nIf this is not set, the spend control applies to debits (ie spending) only.\n",
        "enum": [
          "CREDITS",
          "DEBITS"
        ],
        "type": "string"
      },
      "spend_control_id": {
        "description": "The unique identifier of a spending control",
        "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
        "format": "uuid",
        "type": "string",
        "x-go-type": "string"
      },
      "spend_control_ids": {
        "description": "List of spend control IDs to control spending for the account",
        "items": {
          "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "format": "uuid",
          "type": "string"
        },
        "maxItems": 20,
        "type": "array"
      },
      "spend_control_response": {
        "allOf": [
          {
            "properties": {
              "number_of_related_accounts": {
                "description": "A count of how many accounts are using this spend control",
                "minimum": 0,
                "type": "integer"
              }
            },
            "required": [
              "number_of_related_accounts"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/spend_control"
          }
        ],
        "required": [
          "action_case",
          "action_decline",
          "amount_limit",
          "creation_time",
          "id",
          "is_active",
          "last_modified_time",
          "name",
          "number_of_related_accounts",
          "time_range"
        ]
      },
      "spend_control_response_list": {
        "allOf": [
          {
            "properties": {
              "spend_controls": {
                "description": "Array of Spend Controls",
                "items": {
                  "$ref": "#/components/schemas/spend_control_response"
                },
                "type": "array"
              }
            },
            "required": [
              "spend_controls"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "spend_control_rolling_window_days": {
        "allOf": [
          {
            "properties": {
              "days": {
                "description": "The number of days to define a rolling window for a spend control",
                "maximum": 31,
                "minimum": 1,
                "type": "integer"
              }
            },
            "required": [
              "days",
              "time_range_type"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/spend_control_time_range_type"
          }
        ]
      },
      "spend_control_single_transaction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/spend_control_time_range_type"
          }
        ],
        "required": [
          "time_range_type"
        ]
      },
      "spend_control_time_range": {
        "description": "The time range to which the spend control applies",
        "discriminator": {
          "mapping": {
            "ROLLING_WINDOW_DAYS": "#/components/schemas/spend_control_rolling_window_days",
            "SINGLE_TRANSACTION": "#/components/schemas/spend_control_single_transaction"
          },
          "propertyName": "time_range_type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/spend_control_single_transaction"
          },
          {
            "$ref": "#/components/schemas/spend_control_rolling_window_days"
          }
        ],
        "type": "object"
      },
      "spend_control_time_range_type": {
        "properties": {
          "time_range_type": {
            "enum": [
              "ROLLING_WINDOW_DAYS",
              "SINGLE_TRANSACTION"
            ],
            "type": "string"
          }
        },
        "required": [
          "time_range_type"
        ],
        "type": "object"
      },
      "spend_control_update_request": {
        "additionalProperties": false,
        "properties": {
          "action_case": {
            "description": "If set, create a case for transactions that do not conform to the spend control",
            "type": "boolean"
          },
          "action_decline": {
            "description": "If set, decline transactions that do not conform to the spend control",
            "type": "boolean"
          },
          "amount_limit": {
            "description": "Monetary limit for the spend control in the smallest currency unit (eg cents)",
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "direction": {
            "$ref": "#/components/schemas/spend_control_direction"
          },
          "is_active": {
            "description": "Indicates if spend control is active",
            "example": true,
            "type": "boolean"
          },
          "merchant_category_codes": {
            "$ref": "#/components/schemas/merchant_category_codes"
          },
          "name": {
            "description": "Name assigned to spend control",
            "type": "string"
          },
          "payment_sub_types": {
            "$ref": "#/components/schemas/payment_sub_type_list"
          },
          "payment_types": {
            "$ref": "#/components/schemas/payment_type_list"
          },
          "time_range": {
            "$ref": "#/components/schemas/spend_control_time_range"
          }
        },
        "type": "object"
      },
      "spending_limit_with_time": {
        "description": "Limit over a specific time period.",
        "properties": {
          "amount": {
            "description": "Maximum amount allowed within the time range. Unit in cents.",
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "transactions": {
            "description": "Maximum number of transactions allowed within the time range",
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "spending_limits": {
        "deprecated": true,
        "description": "Account spending limits is unused and has been deprecated. Instead use the spend controls API.",
        "properties": {
          "day": {
            "$ref": "#/components/schemas/spending_limit_with_time"
          },
          "description": {
            "description": "User provided description on the spending limits",
            "type": "string"
          },
          "lifetime": {
            "$ref": "#/components/schemas/spending_limit_with_time"
          },
          "month": {
            "$ref": "#/components/schemas/spending_limit_with_time"
          },
          "transaction": {
            "description": "Individual transaction limit",
            "properties": {
              "amount": {
                "description": "Maximum amount allowed. Unit in cents.",
                "format": "int64",
                "minimum": 0,
                "type": "integer"
              }
            },
            "type": "object"
          },
          "week": {
            "$ref": "#/components/schemas/spending_limit_with_time"
          }
        },
        "type": "object"
      },
      "ssn_source": {
        "description": "Describes the collection method for the customer's SSN:\n* `MANUAL` – the full 9 digits of the customer's SSN was collected.\n* `PREFILL` – the customer's SSN was collected using SSN Prefill.\n",
        "enum": [
          "MANUAL",
          "PREFILL"
        ],
        "readOnly": true,
        "type": "string"
      },
      "statement": {
        "allOf": [
          {
            "properties": {
              "savings_summary": {
                "$ref": "#/components/schemas/savings_summary"
              }
            },
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/base_statement"
          }
        ],
        "description": "A statement for a depository account",
        "title": "Depository Statement"
      },
      "statement_list": {
        "allOf": [
          {
            "properties": {
              "statements": {
                "description": "Array of statements",
                "items": {
                  "$ref": "#/components/schemas/statement_summary"
                },
                "type": "array"
              }
            },
            "required": [
              "statements"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ],
        "title": "Statement List"
      },
      "statement_summary": {
        "properties": {
          "account_id": {
            "description": "The unique identifier of the account the statement belongs to",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "due_date": {
            "description": "The limit date when the due amount indicated on the statement should be paid",
            "format": "date",
            "readOnly": true,
            "type": "string"
          },
          "end_date": {
            "description": "The date indicating the ending of the time interval covered by the statement",
            "format": "date",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "description": "statement ID",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "issue_date": {
            "description": "The date when the statement has been issued",
            "format": "date",
            "readOnly": true,
            "type": "string"
          },
          "start_date": {
            "description": "The date indicating the beginning of the time interval covered by the statement",
            "format": "date",
            "readOnly": true,
            "type": "string"
          }
        },
        "title": "Statement",
        "type": "object"
      },
      "stop_payment": {
        "properties": {
          "dispute_id": {
            "description": "ID of the dispute that created the stop payment",
            "format": "uuid",
            "type": "string"
          },
          "expires_on": {
            "description": "The date when this stop payment is no longer valid. This is only for business accounts.",
            "format": "date-time",
            "type": "string"
          },
          "originator_name": {
            "description": "Name of the originator",
            "type": "string"
          },
          "stop_payment_id": {
            "format": "uuid",
            "type": "string"
          },
          "transaction_id": {
            "description": "If this stop payment was created from a disputed transaction, transaction_id references the posted transaction.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "originator_name",
          "stop_payment_id"
        ],
        "type": "object"
      },
      "stop_payment_list": {
        "allOf": [
          {
            "properties": {
              "stop_payments": {
                "items": {
                  "$ref": "#/components/schemas/stop_payment_response_w_account"
                },
                "type": "array"
              }
            },
            "required": [
              "stop_payments"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "stop_payment_response_w_account": {
        "allOf": [
          {
            "$ref": "#/components/schemas/stop_payment"
          },
          {
            "properties": {
              "account_id": {
                "format": "uuid",
                "type": "string"
              },
              "creation_time": {
                "description": "Timestamp when the stop payment was created.",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "last_updated_time": {
                "description": "Timestamp when stop payment was updated.",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "tenant": {
                "$ref": "#/components/schemas/tenant_id"
              }
            }
          }
        ],
        "description": "created stop payment",
        "type": "object"
      },
      "template_fields": {
        "discriminator": {
          "mapping": {
            "CHARGE_SECURED": "#/components/schemas/template_fields_charge_secured",
            "CHARGE_UNSECURED": "#/components/schemas/template_fields_charge_unsecured",
            "CHECKING": "#/components/schemas/template_fields_depository",
            "GENERAL_LEDGER": "#/components/schemas/template_fields_general_ledger",
            "LINE_OF_CREDIT": "#/components/schemas/template_fields_line_of_credit",
            "PREPAID": "#/components/schemas/template_fields_depository",
            "REVOLVING_CREDIT_SECURED": "#/components/schemas/template_fields_revolving_credit_secured",
            "REVOLVING_CREDIT_UNSECURED": "#/components/schemas/template_fields_revolving_credit_unsecured",
            "SAVING": "#/components/schemas/template_fields_depository"
          },
          "propertyName": "account_type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/template_fields_general_ledger"
          },
          {
            "$ref": "#/components/schemas/template_fields_revolving_credit_secured"
          },
          {
            "$ref": "#/components/schemas/template_fields_revolving_credit_unsecured"
          },
          {
            "$ref": "#/components/schemas/template_fields_charge_secured"
          },
          {
            "$ref": "#/components/schemas/template_fields_charge_unsecured"
          },
          {
            "$ref": "#/components/schemas/template_fields_line_of_credit"
          },
          {
            "$ref": "#/components/schemas/template_fields_depository"
          }
        ],
        "type": "object"
      },
      "template_fields_charge_secured": {
        "allOf": [
          {
            "properties": {
              "auto_payment_period": {
                "$ref": "#/components/schemas/auto_payment_period"
              },
              "grace_period": {
                "default": 21,
                "description": "The number of days past the billing period to allow for payment before it is considered due. This directly infers the due date for a payment. The default will be set to 21 days.\n",
                "maximum": 28,
                "minimum": 21,
                "type": "integer"
              },
              "minimum_payment": {
                "$ref": "#/components/schemas/minimum_payment_full"
              },
              "spend_control_ids": {
                "$ref": "#/components/schemas/spend_control_ids"
              }
            },
            "required": [
              "minimum_payment"
            ]
          },
          {
            "$ref": "#/components/schemas/base_template_fields"
          }
        ],
        "description": "For creating CHARGE_SECURED accounts, e.g. for use in a Smart Charge Card offering.\n",
        "type": "object"
      },
      "template_fields_charge_unsecured": {
        "allOf": [
          {
            "properties": {
              "grace_period": {
                "default": 21,
                "description": "The number of days past the billing period to allow for payment before it is considered due. This directly infers the due date for a payment. The default will be set to 21 days.\n",
                "maximum": 28,
                "minimum": 21,
                "type": "integer"
              },
              "minimum_payment": {
                "$ref": "#/components/schemas/minimum_payment_full"
              },
              "spend_control_ids": {
                "$ref": "#/components/schemas/spend_control_ids"
              }
            },
            "required": [
              "minimum_payment"
            ]
          },
          {
            "$ref": "#/components/schemas/base_template_fields"
          }
        ],
        "description": "For creating CHARGE_UNSECURED accounts\n",
        "type": "object"
      },
      "template_fields_depository": {
        "allOf": [
          {
            "properties": {
              "balance_ceiling": {
                "$ref": "#/components/schemas/balance_ceiling"
              },
              "balance_floor": {
                "$ref": "#/components/schemas/balance_floor"
              },
              "fee_product_ids": {
                "description": "A list of fee account products that the current account associates with.",
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "interest_product_id": {
                "description": "An interest account product that the current account associates with.\n",
                "format": "uuid",
                "type": "string"
              },
              "is_sar_enabled": {
                "default": false,
                "description": "Enable SAR report.",
                "type": "boolean"
              },
              "overdraft_limit": {
                "deprecated": true,
                "description": "This field is unused and will be removed in a future API version.\n",
                "format": "int64",
                "minimum": 0,
                "type": "integer"
              },
              "spend_control_ids": {
                "$ref": "#/components/schemas/spend_control_ids"
              },
              "spending_limits": {
                "$ref": "#/components/schemas/spending_limits"
              }
            }
          },
          {
            "$ref": "#/components/schemas/base_template_fields"
          },
          {
            "$ref": "#/components/schemas/rails_depository"
          }
        ],
        "type": "object"
      },
      "template_fields_general_ledger": {
        "allOf": [
          {
            "$ref": "#/components/schemas/base_template_fields"
          }
        ],
        "description": "In production, general ledger account templates can only be created or updated by a Synctera administrator.\nGeneral ledger account templates are in Alpha status, and cannot yet be created. We may make breaking changes.",
        "type": "object"
      },
      "template_fields_generic_response": {
        "properties": {
          "account_type": {
            "$ref": "#/components/schemas/account_type"
          },
          "auto_payment_period": {
            "description": "The number of days past the billing period to initiate an auto payment. Only applicable for accounts with type `CHARGE_SECURED`, where the account holder has opted in for auto payment functionality. This value must be lower than or equal the `grace_period` setting on the account. If this value is 0, the auto payment will happen on the same day as the statement is generated. Auto payment only occurs if regular payments are not received on time.\n",
            "example": 20,
            "maximum": 28,
            "minimum": 0,
            "type": "integer"
          },
          "balance_ceiling": {
            "$ref": "#/components/schemas/balance_ceiling"
          },
          "balance_floor": {
            "$ref": "#/components/schemas/balance_floor"
          },
          "bank_account_id": {
            "description": "The bank account ID for this account. This is a unique identifier for the bank side account that this Synctera account belongs to. This field can be auto filled if only one bank account of the appropriate type exist for the tenant of concern.\n",
            "format": "uuid",
            "type": "string"
          },
          "bank_country": {
            "description": "Bank country of the account",
            "example": "US",
            "pattern": "^[A-Z]{2,3}$",
            "type": "string"
          },
          "billing_period": {
            "$ref": "#/components/schemas/billing_period"
          },
          "currency": {
            "description": "Account currency. ISO 4217 alphabetic currency code",
            "example": "USD",
            "pattern": "^[A-Z]{3}$",
            "type": "string"
          },
          "fee_product_ids": {
            "description": "A list of fee account products that the current account associates with.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "grace_period": {
            "default": 21,
            "description": "The number of days past the billing period to allow for payment before it is considered due. This directly infers the due date for a payment. The default will be set to 21 days.\n",
            "maximum": 28,
            "minimum": 21,
            "type": "integer"
          },
          "interest_product_id": {
            "description": "An interest account product that the current account associates with.",
            "format": "uuid",
            "type": "string"
          },
          "is_ach_enabled": {
            "default": false,
            "description": "Enable ACH transaction on ledger.",
            "type": "boolean"
          },
          "is_card_enabled": {
            "default": false,
            "description": "Enable card transaction on ledger.",
            "type": "boolean"
          },
          "is_eft_ca_enabled": {
            "description": "A flag to indicate whether EFT Canada transactions are enabled.",
            "type": "boolean"
          },
          "is_external_card_enabled": {
            "default": false,
            "description": "Enable external card transaction on ledger.",
            "type": "boolean"
          },
          "is_p2p_enabled": {
            "default": false,
            "description": "Enable P2P transaction on ledger.",
            "type": "boolean"
          },
          "is_sar_enabled": {
            "default": false,
            "description": "Enable SAR report.",
            "type": "boolean"
          },
          "is_synctera_pay_enabled": {
            "default": false,
            "description": "Enable Synctera Pay transaction on ledger.",
            "type": "boolean"
          },
          "is_wire_enabled": {
            "default": false,
            "description": "Enable wire transaction on ledger.",
            "type": "boolean"
          },
          "minimum_payment": {
            "$ref": "#/components/schemas/minimum_payment"
          },
          "overdraft_limit": {
            "deprecated": true,
            "description": "This field is unused and will be removed in a future API version.\n",
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "spend_control_ids": {
            "$ref": "#/components/schemas/spend_control_ids"
          },
          "spending_limits": {
            "$ref": "#/components/schemas/spending_limits"
          }
        },
        "required": [
          "account_type",
          "bank_country",
          "currency"
        ],
        "type": "object"
      },
      "template_fields_line_of_credit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/base_template_fields"
          },
          {
            "properties": {
              "grace_period": {
                "default": 21,
                "description": "The number of days past the billing period to allow for payment before it is considered due. This directly infers the due date for a payment. The default will be set to 21 days.\n",
                "maximum": 28,
                "minimum": 21,
                "type": "integer"
              },
              "interest_product_id": {
                "description": "An interest account product that the current account associates with. The account product must have its calculation_method set to COMPOUNDED_DAILY.\n",
                "format": "uuid",
                "type": "string"
              },
              "minimum_payment": {
                "$ref": "#/components/schemas/minimum_payment_partial"
              }
            },
            "required": [
              "minimum_payment"
            ]
          }
        ],
        "type": "object"
      },
      "template_fields_revolving_credit_secured": {
        "allOf": [
          {
            "properties": {
              "application_workflow_id": {
                "description": "Taktile workflow ID for credit application processing",
                "format": "uuid",
                "type": "string"
              },
              "spend_control_ids": {
                "$ref": "#/components/schemas/spend_control_ids"
              },
              "vendor_info": {
                "$ref": "#/components/schemas/template_vendor_info"
              }
            },
            "required": [
              "application_workflow_id",
              "vendor_info"
            ]
          },
          {
            "$ref": "#/components/schemas/base_template_fields"
          }
        ],
        "description": "For creating REVOLVING_CREDIT_SECURED accounts\n",
        "type": "object"
      },
      "template_fields_revolving_credit_unsecured": {
        "allOf": [
          {
            "properties": {
              "application_workflow_id": {
                "description": "Taktile workflow ID for credit application processing",
                "format": "uuid",
                "type": "string"
              },
              "spend_control_ids": {
                "$ref": "#/components/schemas/spend_control_ids"
              },
              "vendor_info": {
                "$ref": "#/components/schemas/template_vendor_info"
              }
            },
            "required": [
              "application_workflow_id",
              "vendor_info"
            ]
          },
          {
            "$ref": "#/components/schemas/base_template_fields"
          }
        ],
        "description": "For creating REVOLVING_CREDIT_UNSECURED accounts\n",
        "type": "object"
      },
      "template_list": {
        "allOf": [
          {
            "$ref": "#/components/schemas/paginated_response"
          },
          {
            "properties": {
              "account_templates": {
                "description": "Array of account templates",
                "items": {
                  "$ref": "#/components/schemas/account_template_response"
                },
                "type": "array"
              }
            },
            "required": [
              "account_templates"
            ],
            "type": "object"
          }
        ]
      },
      "template_vendor_data": {
        "description": "Vendor-specific data for templates",
        "properties": {
          "loanpro": {
            "$ref": "#/components/schemas/loanpro_template_vendor_data"
          }
        },
        "type": "object"
      },
      "template_vendor_info": {
        "description": "Vendor information for account templates",
        "properties": {
          "vendor_data": {
            "$ref": "#/components/schemas/template_vendor_data"
          },
          "vendor_type": {
            "description": "The type of vendor managing accounts created from this template",
            "enum": [
              "LOANPRO"
            ],
            "example": "LOANPRO",
            "type": "string"
          }
        },
        "required": [
          "vendor_data",
          "vendor_type"
        ],
        "type": "object"
      },
      "tenant_id": {
        "description": "The id of the tenant containing the resource. This is relevant for Fintechs that have multiple workspaces.\n",
        "example": "abcdef_ghijkl",
        "type": "string"
      },
      "three_ds_policy": {
        "description": "EMV 3-D Secure policy. Whenever a 3DS decision gateway refers to a card product, the policy for that card\nproduct is always DECISION_GATEWAY.\n\nPolicy           | Description\n---------------- | -----------\nSMS_OTP          | Use the card holder's phone number on file to perform advanced authentication via SMS\nEXEMPT           | Transactions will be exempted from advanced authentication\nDECISION_GATEWAY | Fintech 3DS decision gateway will decide the 3DS action for each transaction\n",
        "enum": [
          "DECISION_GATEWAY",
          "EXEMPT",
          "SMS_OTP"
        ],
        "type": "string"
      },
      "token_list": {
        "properties": {
          "digital_wallet_tokens": {
            "description": "Array of Digital Wallet Token information of a Card",
            "items": {
              "$ref": "#/components/schemas/digital_wallet_token_response"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "token_list_response": {
        "allOf": [
          {
            "$ref": "#/components/schemas/paginated_response"
          },
          {
            "$ref": "#/components/schemas/token_list"
          }
        ],
        "required": [
          "digital_wallet_tokens"
        ]
      },
      "transaction": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/transaction_data"
          },
          "effective_date": {
            "description": "The \"effective date\" of a transaction. This may be earlier than posted_date in some cases (for example, a transaction that occurs on a Saturday may not be posted until the following Monday, but would have an effective date of Saturday)",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "posted_date": {
            "description": "The date the transaction was posted. This is the date any money is considered to be added or removed from an account.",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "subtype": {
            "description": "The specific transaction type. For example, for `ach`, this may be \"outgoing_debit\".",
            "type": "string"
          },
          "type": {
            "description": "The general type of transaction. For example, \"card\" or \"ach\".",
            "type": "string"
          },
          "uuid": {
            "description": "The unique identifier of the transaction.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "data",
          "effective_date",
          "id",
          "posted_date",
          "status",
          "subtype",
          "type",
          "uuid"
        ],
        "title": "A posted transaction",
        "type": "object"
      },
      "transaction_data": {
        "properties": {
          "external_data": {
            "description": "an unstructured json blob representing additional transaction information supplied by the integrator.",
            "nullable": true,
            "type": "object"
          },
          "lines": {
            "description": "The set of accounting entries associated with this transaction. For example, a debit to a customer account will have a corresponding credit in a general ledger account.",
            "items": {
              "$ref": "#/components/schemas/transaction_line"
            },
            "type": "array"
          },
          "memo": {
            "type": "string"
          },
          "metadata": {
            "nullable": true,
            "type": "object"
          }
        },
        "required": [
          "lines",
          "memo"
        ],
        "type": "object"
      },
      "transaction_dispute": {
        "properties": {
          "created": {
            "description": "The creation time of the dispute",
            "format": "date-time",
            "type": "string"
          },
          "external_case_reference": {
            "description": "The external case number or id for the dispute (eg: from a vendor such as Marqeta), if one exists.",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the dispute.",
            "format": "uuid",
            "type": "string",
            "x-go-type": "string"
          },
          "internal_case_reference": {
            "description": "The internal case number or id for the dispute in the Synctera platform, if one exists.",
            "type": "string"
          },
          "status": {
            "enum": [
              "ARBITRATION",
              "CASE_LOST",
              "CASE_OPEN",
              "CASE_WON",
              "CHARGEBACK_INITIATED",
              "NETWORK_REJECTED",
              "PREARBITRATION",
              "REPRESENTMENT"
            ],
            "type": "string"
          },
          "updated": {
            "description": "The time the dispute was last updated",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "created",
          "id",
          "status",
          "updated"
        ],
        "type": "object"
      },
      "transaction_line": {
        "properties": {
          "account_id": {
            "description": "The account uuid associated with this transaction line",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "type": "string"
          },
          "account_no": {
            "description": "The account number associated with this transaction line",
            "type": "string"
          },
          "amount": {
            "description": "The amount (in cents) of the transaction",
            "type": "integer"
          },
          "currency": {
            "description": "ISO 4217 alphabetic currency code of the transfer amount",
            "type": "string"
          },
          "dc_sign": {
            "$ref": "#/components/schemas/dc_sign"
          },
          "uuid": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "account_id",
          "account_no",
          "amount",
          "currency",
          "dc_sign",
          "uuid"
        ],
        "type": "object"
      },
      "transaction_line1": {
        "properties": {
          "account_id": {
            "description": "The account uuid associated with this transaction line",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "type": "string"
          },
          "account_no": {
            "description": "The account number associated with this transaction line",
            "type": "string"
          },
          "amount": {
            "description": "The amount (in cents) of the transaction",
            "format": "int64",
            "type": "integer"
          },
          "avail_balance": {
            "description": "The account \"available balance\" at the point in time this (to be deprecated) transaction was posted",
            "format": "int64",
            "type": "integer"
          },
          "available_balance": {
            "description": "The account \"available balance\" at the point in time this transaction was posted",
            "format": "int64",
            "type": "integer"
          },
          "balance": {
            "description": "The account balance at the point in time this transaction was posted",
            "format": "int64",
            "type": "integer"
          },
          "created": {
            "description": "The creation date of the transaction",
            "format": "date-time",
            "type": "string"
          },
          "currency": {
            "description": "ISO 4217 alphabetic currency code of the transfer amount",
            "type": "string"
          },
          "dc_sign": {
            "$ref": "#/components/schemas/dc_sign"
          },
          "is_fee": {
            "description": "Whether or not this line is considered a fee",
            "type": "boolean"
          },
          "is_gl_acc": {
            "description": "Whether or not this line represents a GL account",
            "type": "boolean"
          },
          "is_offset": {
            "description": "Whether or not this line is considered the \"offset\" line",
            "type": "boolean"
          },
          "is_primary": {
            "description": "Whether or not this line is considered the \"primary\" line",
            "type": "boolean"
          },
          "meta": {
            "nullable": true,
            "type": "object"
          },
          "network": {
            "description": "The network this transaction is associated with",
            "type": "string"
          },
          "related_line": {
            "type": "integer"
          },
          "seq": {
            "type": "integer"
          },
          "sweep_agg_id": {
            "description": "The sweep aggregation that this line is mapped to.",
            "format": "uuid",
            "type": "string"
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          },
          "updated": {
            "description": "The date the transaction was last updated",
            "format": "date-time",
            "type": "string"
          },
          "uuid": {
            "format": "uuid",
            "type": "string",
            "x-go-type": "string"
          }
        },
        "required": [
          "account_id",
          "account_no",
          "amount",
          "avail_balance",
          "available_balance",
          "balance",
          "created",
          "currency",
          "dc_sign",
          "is_fee",
          "is_gl_acc",
          "is_offset",
          "is_primary",
          "meta",
          "network",
          "related_line",
          "seq",
          "tenant",
          "updated",
          "uuid"
        ],
        "type": "object"
      },
      "transaction_list": {
        "allOf": [
          {
            "properties": {
              "transactions": {
                "description": "Array of statement transactions",
                "items": {
                  "$ref": "#/components/schemas/transaction"
                },
                "type": "array"
              }
            },
            "required": [
              "transactions"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ],
        "title": "Statement List"
      },
      "transaction_options": {
        "properties": {
          "additional_data": {
            "type": "string"
          },
          "card_expiration_date_yymm": {
            "type": "string"
          },
          "database_transaction_timeout": {
            "format": "int32",
            "type": "integer"
          },
          "encryption_key_id": {
            "type": "string"
          },
          "is_async": {
            "default": false,
            "type": "boolean"
          },
          "pre_auth_time_limit": {
            "type": "string"
          },
          "send_expiration_date": {
            "default": false,
            "type": "boolean"
          },
          "send_track_data": {
            "default": false,
            "type": "boolean"
          },
          "transaction_id": {
            "type": "string"
          },
          "transaction_timeout_threshold_seconds": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "transaction_volume": {
        "description": "The transaction volume of the business.",
        "properties": {
          "amount": {
            "description": "The amount of the transactions in ISO 4217 minor currency units. For example, a transaction of $100 USD will be displayed as 10000.",
            "example": 1000,
            "type": "integer"
          },
          "channel": {
            "description": "The channel of the transaction volume.",
            "enum": [
              "ACH",
              "CARDS",
              "CASH",
              "EFT",
              "WIRES"
            ],
            "type": "string"
          },
          "channel_coverage": {
            "description": "The channel coverage of the transaction volume.",
            "enum": [
              "DOMESTIC",
              "INTERNATIONAL"
            ],
            "type": "string"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          },
          "frequency": {
            "$ref": "#/components/schemas/frequency"
          },
          "on_synctera": {
            "description": "Whether the transaction volume is on Synctera.",
            "example": true,
            "type": "boolean"
          },
          "transaction_count": {
            "description": "The number of transactions.",
            "example": 1000,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "transfer_list_response": {
        "allOf": [
          {
            "properties": {
              "external_transfers": {
                "description": "Array of External transfer",
                "items": {
                  "$ref": "#/components/schemas/transfer_response"
                },
                "type": "array"
              }
            },
            "required": [
              "external_transfers"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "transfer_request": {
        "discriminator": {
          "mapping": {
            "PULL": "#/components/schemas/transfer_request_pull",
            "PUSH": "#/components/schemas/transfer_request_push"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/transfer_request_push"
          },
          {
            "$ref": "#/components/schemas/transfer_request_pull"
          }
        ],
        "type": "object"
      },
      "transfer_request_base": {
        "description": "Push to card or pull from card",
        "properties": {
          "amount": {
            "description": "Amount of the transfer in cents",
            "minimum": 1,
            "type": "integer"
          },
          "currency": {
            "$ref": "#/components/schemas/currency_code"
          },
          "external_card_id": {
            "description": "The ID of the external card from/to which the transfer will be initiated/received",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "merchant": {
            "$ref": "#/components/schemas/merchant"
          },
          "originating_account_id": {
            "description": "The ID of the account to which the transfer will be initiated/received",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/transfer_type_request"
          }
        },
        "required": [
          "amount",
          "currency",
          "external_card_id",
          "originating_account_id",
          "type"
        ],
        "type": "object"
      },
      "transfer_request_pull": {
        "allOf": [
          {
            "$ref": "#/components/schemas/transfer_request_base"
          },
          {
            "properties": {
              "three_ds_id": {
                "description": "Unique identifier of an External Card Transfer 3-D Secure Authorization - conditionally required according to your program's 3DS policy",
                "example": "40e2de9e-4375-4fa1-9393-92da972a9338",
                "format": "uuid",
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "transfer_request_push": {
        "allOf": [
          {
            "$ref": "#/components/schemas/transfer_request_base"
          },
          {
            "properties": {
              "originating_customer_id": {
                "description": "For person-to-person PUSH transactions, this is the `customer_id` of the sender who must have privileges to access funds in the originating account in order to send funds to the recipient cardholder",
                "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
                "format": "uuid",
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "transfer_response": {
        "discriminator": {
          "mapping": {
            "PULL": "#/components/schemas/transfer_response_pull",
            "PULL_REVERSAL": "#/components/schemas/transfer_response_pull",
            "PUSH": "#/components/schemas/transfer_response_push"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/transfer_response_pull"
          },
          {
            "$ref": "#/components/schemas/transfer_response_push"
          }
        ],
        "type": "object"
      },
      "transfer_response_base": {
        "properties": {
          "account_id": {
            "description": "The ID of the account to which the card will be linked",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "amount": {
            "description": "Amount of the transfer in cents",
            "type": "integer"
          },
          "country_code": {
            "description": "ISO-3166-1 Alpha-2 country code",
            "example": "US",
            "type": "string"
          },
          "created_time": {
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          },
          "currency": {
            "$ref": "#/components/schemas/currency_code"
          },
          "customer_id": {
            "description": "The ID of the customer to whom the card belongs",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "external_card_id": {
            "description": "The ID of the external card from/to which the transfer was initiated/received",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "id": {
            "description": "The ID of the transfer",
            "type": "string"
          },
          "last_modified_time": {
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          },
          "merchant": {
            "$ref": "#/components/schemas/merchant"
          },
          "network_decline_details": {
            "description": "If available, a human readable string indicating why a transfer was declined downstream of our system",
            "type": "string"
          },
          "reason": {
            "description": "The reason for the status, e.g. INSUFFICIENT_FUNDS, SUSPECTED_FRAUD, NETWORK_DECLINED",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/transfer_status"
          },
          "transaction_id": {
            "description": "The transaction ID",
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/transfer_type"
          }
        },
        "required": [
          "account_id",
          "amount",
          "country_code",
          "created_time",
          "currency",
          "customer_id",
          "external_card_id",
          "id",
          "last_modified_time",
          "merchant",
          "status",
          "type"
        ],
        "type": "object"
      },
      "transfer_response_pull": {
        "allOf": [
          {
            "$ref": "#/components/schemas/transfer_response_base"
          },
          {
            "properties": {
              "three_ds_id": {
                "description": "Unique identifier of an External Card Transfer 3-D Secure Authorization - conditionally required according to your program's 3DS policy",
                "example": "40e2de9e-4375-4fa1-9393-92da972a9338",
                "format": "uuid",
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "transfer_response_push": {
        "allOf": [
          {
            "properties": {
              "originating_customer_id": {
                "description": "For person-to-person PUSH transactions, this is the `customer_id` of the sender who must have privileges to access funds in the originating account in order to send funds to the recipient cardholder",
                "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
                "format": "uuid",
                "type": "string"
              }
            },
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/transfer_response_base"
          }
        ],
        "type": "object"
      },
      "transfer_reversal_request": {
        "description": "Reversal for a transfer with type PULL",
        "properties": {
          "amount": {
            "description": "Amount of the refund in cents (Amount can be up to the original amount)",
            "type": "integer"
          },
          "currency": {
            "$ref": "#/components/schemas/currency_code"
          }
        },
        "required": [
          "amount",
          "currency"
        ],
        "type": "object"
      },
      "transfer_status": {
        "description": "The status of the transfer",
        "enum": [
          "CANCELED",
          "DECLINED",
          "PENDING",
          "SUCCEEDED",
          "UNKNOWN"
        ],
        "type": "string"
      },
      "transfer_type": {
        "description": "Type of operation for transfer.\n\nType | Description\n--- | ---\nPUSH | Push fund to the external card from the account_id\nPULL | Pull funds from the external card to the account_id\nPULL_REVERSAL | Reversed pull funds transfer from an external card\n",
        "enum": [
          "PULL",
          "PULL_REVERSAL",
          "PUSH"
        ],
        "example": "PULL",
        "type": "string"
      },
      "transfer_type_request": {
        "description": "Type of operation for transfer.\n\nType | Description\n--- | ---\nPUSH | Push fund to the external card from the account_id\nPULL | Pull funds from the external card to the account_id\n",
        "enum": [
          "PULL",
          "PUSH"
        ],
        "example": "PULL",
        "type": "string"
      },
      "txn_enhancer": {
        "default": "MX",
        "description": "Whether to use a transaction enhancer and/or which vendor to use. Enhancer is a third party service that provides additional data for card transactions. MX is included by default.",
        "enum": [
          "MX",
          "NONE"
        ],
        "example": "NONE",
        "type": "string"
      },
      "type": {
        "default": "NOTE",
        "description": "The type of note.\n",
        "enum": [
          "FEEDBACK",
          "NOTE"
        ],
        "example": "NOTE",
        "type": "string"
      },
      "update_account": {
        "allOf": [
          {
            "$ref": "#/components/schemas/account_depository"
          },
          {
            "description": "Model for updating an account using PUT. Only supports CHECKING and SAVING."
          }
        ],
        "type": "object"
      },
      "update_card_image_request": {
        "properties": {
          "rejection_memo": {
            "type": "string"
          },
          "rejection_reason": {
            "$ref": "#/components/schemas/card_image_rejection_reason"
          },
          "status": {
            "$ref": "#/components/schemas/card_image_status"
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "update_gateway_request": {
        "properties": {
          "active": {
            "description": "Current status of the Authorization gateway",
            "type": "boolean"
          },
          "card_products": {
            "description": "List of Card Product unique identifiers that will utilize the Gateway",
            "items": {
              "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "custom_headers": {
            "$ref": "#/components/schemas/gateway_custom_headers"
          },
          "standin": {
            "$ref": "#/components/schemas/gateway_standin"
          },
          "url": {
            "description": "URL of the Authorization gateway",
            "format": "uri",
            "maxLength": 1000,
            "type": "string"
          }
        },
        "type": "object"
      },
      "update_transfer": {
        "properties": {
          "status": {
            "description": "Field value must be set to CANCELED. It can only be changed when status is PENDING.",
            "enum": [
              "CANCELED"
            ],
            "example": "CANCELED",
            "type": "string"
          }
        },
        "required": [
          "status"
        ],
        "title": "Change Status",
        "type": "object"
      },
      "user_data": {
        "description": "An unstructured JSON blob representing additional transaction information specific to each payment rail.",
        "nullable": true,
        "type": "object"
      },
      "vendor_data": {
        "description": "Vendor-specific data",
        "properties": {
          "loanpro": {
            "$ref": "#/components/schemas/loanpro_vendor_data"
          }
        },
        "type": "object"
      },
      "vendor_info": {
        "description": "Vendor information for external account management systems",
        "properties": {
          "vendor_data": {
            "$ref": "#/components/schemas/vendor_data"
          },
          "vendor_type": {
            "description": "The type of vendor managing this account",
            "enum": [
              "LOANPRO"
            ],
            "example": "LOANPRO",
            "type": "string"
          }
        },
        "required": [
          "vendor_data",
          "vendor_type"
        ],
        "type": "object"
      },
      "vendor_info1": {
        "description": "The information provided to Synctera from the vendor. Interpretation of this object is up to the client.\n",
        "discriminator": {
          "mapping": {
            "application/json": "#/components/schemas/vendor_json",
            "text/xml": "#/components/schemas/vendor_xml"
          },
          "propertyName": "content_type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/vendor_json"
          },
          {
            "$ref": "#/components/schemas/vendor_xml"
          }
        ],
        "title": "Vendor Info",
        "type": "object"
      },
      "vendor_info2": {
        "description": "The information provided to Synctera from the vendor. Interpretation of this object is up to the client.\n",
        "discriminator": {
          "mapping": {
            "application/json": "#/components/schemas/vendor_json",
            "text/xml": "#/components/schemas/vendor_xml"
          },
          "propertyName": "content_type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/vendor_json"
          },
          {
            "$ref": "#/components/schemas/vendor_xml"
          }
        ],
        "title": "Vendor Info",
        "type": "object"
      },
      "vendor_info3": {
        "description": "The information provided to Synctera from the vendor. Interpretation of this object is up to the client.\n",
        "discriminator": {
          "mapping": {
            "application/json": "#/components/schemas/vendor_json",
            "text/xml": "#/components/schemas/vendor_xml"
          },
          "propertyName": "content_type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/vendor_json"
          },
          {
            "$ref": "#/components/schemas/vendor_xml"
          }
        ],
        "title": "Vendor Info",
        "type": "object"
      },
      "vendor_info4": {
        "description": "The information provided to Synctera from the vendor. Interpretation of this object is up to the client.\n",
        "discriminator": {
          "mapping": {
            "application/json": "#/components/schemas/vendor_json",
            "text/xml": "#/components/schemas/vendor_xml"
          },
          "propertyName": "content_type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/vendor_json"
          },
          {
            "$ref": "#/components/schemas/vendor_xml"
          }
        ],
        "title": "Vendor Info",
        "type": "object"
      },
      "vendor_info5": {
        "description": "The information provided to Synctera from the vendor. Interpretation of this object is up to the client.\n",
        "discriminator": {
          "mapping": {
            "application/json": "#/components/schemas/vendor_json",
            "text/xml": "#/components/schemas/vendor_xml"
          },
          "propertyName": "content_type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/vendor_json"
          },
          {
            "$ref": "#/components/schemas/vendor_xml"
          }
        ],
        "title": "Vendor Info",
        "type": "object"
      },
      "vendor_json": {
        "properties": {
          "content_type": {
            "description": "Describes the content-type encoding received from the vendor",
            "enum": [
              "application/json"
            ],
            "type": "string"
          },
          "json": {
            "description": "Data representation in JSON",
            "type": "object"
          },
          "vendor": {
            "example": "SOCURE",
            "type": "string"
          }
        },
        "required": [
          "content_type",
          "json",
          "vendor"
        ]
      },
      "vendor_xml": {
        "properties": {
          "content_type": {
            "description": "Describes the content-type encoding received from the vendor",
            "enum": [
              "text/xml"
            ],
            "type": "string"
          },
          "vendor": {
            "example": "IDOLOGY",
            "type": "string"
          },
          "xml": {
            "description": "Data representaion in XML",
            "type": "string"
          }
        },
        "required": [
          "content_type",
          "vendor",
          "xml"
        ]
      },
      "verification": {
        "allOf": [
          {
            "properties": {
              "business_id": {
                "$ref": "#/components/schemas/business_id6"
              },
              "creation_time": {
                "description": "The date and time the resource was created.",
                "example": "2010-05-06T12:23:34.321Z",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "details": {
                "$ref": "#/components/schemas/details"
              },
              "id": {
                "description": "Unique ID for this verification result.",
                "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
                "format": "uuid",
                "readOnly": true,
                "type": "string"
              },
              "last_updated_time": {
                "description": "The date and time the resource was last updated.",
                "example": "2010-05-06T12:23:34.321Z",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "metadata": {
                "$ref": "#/components/schemas/metadata"
              },
              "person_id": {
                "$ref": "#/components/schemas/person_id"
              },
              "result": {
                "$ref": "#/components/schemas/verification_result"
              },
              "vendor_info": {
                "$ref": "#/components/schemas/vendor_info4"
              },
              "verification_time": {
                "description": "The date and time the verification was completed.",
                "format": "date-time",
                "type": "string"
              },
              "verification_type": {
                "$ref": "#/components/schemas/verification_type"
              }
            },
            "type": "object"
          },
          {
            "required": [
              "result",
              "verification_time",
              "verification_type"
            ]
          }
        ],
        "description": "Verification result.",
        "type": "object"
      },
      "verification_list": {
        "allOf": [
          {
            "$ref": "#/components/schemas/paginated_response"
          },
          {
            "properties": {
              "verifications": {
                "description": "Array of verification results.",
                "items": {
                  "$ref": "#/components/schemas/verification"
                },
                "type": "array"
              }
            },
            "required": [
              "verifications"
            ],
            "type": "object"
          }
        ]
      },
      "verification_request": {
        "allOf": [
          {
            "required": [
              "customer_consent"
            ]
          },
          {
            "properties": {
              "business_id": {
                "$ref": "#/components/schemas/business_id6"
              },
              "customer_consent": {
                "description": "Whether this customer has consented to be verified.",
                "type": "boolean"
              },
              "customer_ip_address": {
                "description": "The customer's IP address.",
                "example": "140.151.183.216",
                "type": "string"
              },
              "document_id": {
                "description": "The ID of the uploaded government-issued identification document provided by the Socure SDK.\n",
                "example": "1ab2c3de-fg45-6789-a01b-23c45678defg",
                "type": "string"
              },
              "person_id": {
                "$ref": "#/components/schemas/person_id"
              }
            }
          }
        ],
        "example": {
          "customer_consent": true,
          "customer_ip_address": "235.2.7.2",
          "person_id": "1bb26bcb-0e1b-4060-972d-80891332aae2"
        },
        "type": "object"
      },
      "verification_result": {
        "description": "The determination of this verification. One of the following:\n* `UNVERIFIED` – record representing the absence of a verification.\n* `PENDING` – verification is in progress for this customer.\n* `PROVISIONAL` – partially verified or verified with restrictions.\n* `ACCEPTED` – the customer has been verified.\n* `REVIEW` – verification has run and issues have been identified and require review.\n* `VENDOR_ERROR` – verification did not successfully run due to an unexpected error or failure.\n* `REJECTED` – the customer was rejected and should not be allowed to take certain actions e.g., open an account.\n",
        "enum": [
          "ACCEPTED",
          "PENDING",
          "PROVISIONAL",
          "REJECTED",
          "REVIEW",
          "UNVERIFIED",
          "VENDOR_ERROR"
        ],
        "example": "ACCEPTED",
        "type": "string"
      },
      "verification_status": {
        "description": "The result of a KYC/KYB verification. One of the following:\n* `UNVERIFIED` – verification has not been completed for this customer.\n* `PENDING` – verification is in progress for this customer.\n* `PROVISIONAL` – partially verified or verified with restrictions.\n* `ACCEPTED` – the customer has been verified.\n* `REVIEW` – verification has run and issues have been identified and require review.\n* `REJECTED` – the customer was rejected and should not be allowed to take certain actions e.g., open an account.\n",
        "enum": [
          "ACCEPTED",
          "PENDING",
          "PROVISIONAL",
          "REJECTED",
          "REVIEW",
          "UNVERIFIED"
        ],
        "example": "ACCEPTED",
        "readOnly": true,
        "type": "string"
      },
      "verification_type": {
        "description": "The verification run on the customer. One the following:\n  * `IDENTITY` – verify that the information provided is associated with the identity of a real person or business.\n  * `WATCHLIST` – checks watchlists for known fraud, money laundering, and other suspicious activity.\n  * `DOCUMENT_VERIFICATION` – verifies the authenticity of a document, such as a driver's license, or other government-issued identification document.\n  * `RELATED_ENTITIES` – represents dependent verification checks for related parties (e.g. all beneficial owners must pass KYC for a business to pass KYB).\n  * `MANUAL_REVIEW` – represents the outcome of a manual review of the verification done on a party (note: overrides the outcome of other verification types).\n  * `LICENSE` – represents the outcome of a license verification.\n",
        "enum": [
          "DOCUMENT_VERIFICATION",
          "IDENTITY",
          "LICENSE",
          "MANUAL_REVIEW",
          "RELATED_ENTITIES",
          "WATCHLIST"
        ],
        "example": "IDENTITY",
        "type": "string"
      },
      "verification_vendor_info": {
        "description": "The information provided to Synctera from the vendor. Interpretation of this object is up to the client.\n",
        "discriminator": {
          "mapping": {
            "application/json": "#/components/schemas/verification_vendor_json",
            "text/xml": "#/components/schemas/verification_vendor_xml"
          },
          "propertyName": "content_type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/verification_vendor_xml"
          },
          {
            "$ref": "#/components/schemas/verification_vendor_json"
          }
        ],
        "type": "object"
      },
      "verification_vendor_info_detail": {
        "properties": {
          "code": {
            "description": "Vendor specific code.",
            "example": "R186",
            "type": "string"
          },
          "description": {
            "description": "Description of vendor specific code.",
            "example": "Global Watchlist sources selected are correlated with the input identifiers",
            "type": "string"
          }
        },
        "type": "object"
      },
      "verification_vendor_json": {
        "properties": {
          "content_type": {
            "description": "Describes the content-type encoding received from the vendor.",
            "enum": [
              "application/json"
            ],
            "type": "string"
          },
          "details": {
            "description": "Array of vendor specific information.",
            "items": {
              "$ref": "#/components/schemas/verification_vendor_info_detail"
            },
            "readOnly": true,
            "type": "array"
          },
          "json": {
            "description": "Data representation in JSON.",
            "type": "object"
          },
          "vendor": {
            "description": "Name of the vendor used.",
            "example": "SOCURE",
            "type": "string"
          }
        },
        "required": [
          "content_type",
          "json",
          "vendor"
        ]
      },
      "verification_vendor_xml": {
        "properties": {
          "content_type": {
            "description": "Describes the content-type encoding received from the vendor.",
            "enum": [
              "text/xml"
            ],
            "type": "string"
          },
          "details": {
            "description": "Array of vendor specific information.",
            "items": {
              "$ref": "#/components/schemas/verification_vendor_info_detail"
            },
            "readOnly": true,
            "type": "array"
          },
          "vendor": {
            "description": "Name of the vendor used.",
            "example": "IDOLOGY",
            "type": "string"
          },
          "xml": {
            "description": "Data representaion in XML.",
            "type": "string"
          }
        },
        "required": [
          "content_type",
          "vendor",
          "xml"
        ]
      },
      "verify_response": {
        "allOf": [
          {
            "$ref": "#/components/schemas/paginated_response"
          },
          {
            "properties": {
              "verification_status": {
                "$ref": "#/components/schemas/verification_status"
              },
              "verifications": {
                "description": "Array of verification results.",
                "items": {
                  "$ref": "#/components/schemas/verification"
                },
                "type": "array"
              }
            },
            "required": [
              "verification_status",
              "verifications"
            ],
            "type": "object"
          }
        ]
      },
      "version": {
        "description": "Version of the disclosure document.",
        "example": "1.0",
        "pattern": "^v?[0-9]+\\.[0-9]+$",
        "type": "string"
      },
      "virtual_card": {
        "allOf": [
          {
            "$ref": "#/components/schemas/base_card"
          }
        ],
        "description": "A virtual card",
        "title": "Virtual Card"
      },
      "virtual_card_issuance_request": {
        "allOf": [
          {
            "required": [
              "account_id",
              "card_product_id",
              "form",
              "type"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/virtual_card"
          }
        ],
        "example": {
          "account_id": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "card_product_id": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "customer_id": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "form": "VIRTUAL",
          "type": "DEBIT"
        }
      },
      "virtual_card_plus_status": {
        "allOf": [
          {
            "$ref": "#/components/schemas/virtual_card_response_status"
          },
          {
            "$ref": "#/components/schemas/virtual_card"
          }
        ]
      },
      "virtual_card_response": {
        "allOf": [
          {
            "$ref": "#/components/schemas/virtual_card_plus_status"
          },
          {
            "properties": {
              "bin": {
                "description": "The bin number",
                "type": "string"
              },
              "card_brand": {
                "$ref": "#/components/schemas/card_brand"
              },
              "tenant": {
                "$ref": "#/components/schemas/tenant_id"
              }
            },
            "required": [
              "account_id",
              "card_brand",
              "card_product_id",
              "creation_time",
              "emboss_name",
              "expiration_month",
              "expiration_year",
              "form",
              "id",
              "last_four",
              "tenant",
              "type"
            ],
            "type": "object"
          }
        ],
        "title": "Virtual Card"
      },
      "virtual_card_response_status": {
        "allOf": [
          {
            "required": [
              "card_status",
              "status_reason"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/card_status_object"
          }
        ]
      },
      "wallet_provider_card_on_file": {
        "properties": {
          "address_verification": {
            "$ref": "#/components/schemas/digital_wallet_token_address_verification"
          },
          "enabled": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "watchlist_alert": {
        "properties": {
          "created": {
            "description": "When this alert was created",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for this alert",
            "format": "uuid",
            "type": "string"
          },
          "provider_info": {
            "description": "The information provided to Synctera that triggered this alert, as an arbitrary JSON object. Interpretation of this object is up to the client.\n",
            "type": "object"
          },
          "provider_subject_id": {
            "description": "The id of the provider subject for this alert",
            "type": "string"
          },
          "provider_subscription_id": {
            "description": "The id of the provider subscription for this alert",
            "type": "string"
          },
          "provider_watchlist_name": {
            "description": "The name of the provider for this alert",
            "type": "string"
          },
          "status": {
            "description": "The status of this alert",
            "enum": [
              "ACTIVE",
              "SUPPRESSED"
            ],
            "type": "string"
          },
          "urls": {
            "description": "Where to get more information about this alert (according to our third-party data provider).\n",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "vendor_info": {
            "$ref": "#/components/schemas/vendor_info5"
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "watchlist_subscription": {
        "properties": {
          "auto_renew": {
            "description": "Whether this subscription should automatically renew when the subscription period is over (default: vendor-dependent).\n",
            "type": "boolean"
          },
          "created": {
            "description": "When this subscription was created",
            "format": "date-time",
            "type": "string"
          },
          "customer_consent": {
            "description": "Whether this customer has consented to being enrolled for watchlist monitoring\n",
            "type": "boolean"
          },
          "id": {
            "description": "Unique identifier for this subscription",
            "format": "uuid",
            "type": "string"
          },
          "period_end": {
            "description": "The date when monitoring of this individual should end.",
            "format": "date",
            "type": "string"
          },
          "period_start": {
            "description": "The date when monitoring of this individual should begin (default: today).",
            "format": "date",
            "type": "string"
          },
          "provider_subscription_id": {
            "description": "External provider subscription id",
            "type": "string"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ],
            "type": "string"
          }
        },
        "required": [
          "customer_consent"
        ],
        "type": "object"
      },
      "watchlist_subscription_list": {
        "allOf": [
          {
            "$ref": "#/components/schemas/paginated_response"
          },
          {
            "properties": {
              "subscriptions": {
                "items": {
                  "$ref": "#/components/schemas/watchlist_subscription"
                },
                "type": "array"
              }
            },
            "required": [
              "subscriptions"
            ],
            "type": "object"
          }
        ]
      },
      "webhook": {
        "description": "Webhook object",
        "properties": {
          "description": {
            "description": "A description of what the webhook is used for",
            "type": "string"
          },
          "enabled_events": {
            "description": "A list of the events that will trigger the webhook. Subscribing to a wildcard event, e.g. ACCOUNT.*, will send all webhooks for all events that match that pattern. Note that this can include new event types added after the subscription was created.",
            "items": {
              "$ref": "#/components/schemas/event_type"
            },
            "type": "array"
          },
          "id": {
            "description": "The unique ID of the webhook",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_enabled": {
            "description": "Set the webhook to be enabled or disabled",
            "type": "boolean"
          },
          "last_updated": {
            "description": "Timestamp that this webhook was created or the last time any field was changed",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "metadata": {
            "description": "Additional information stored to the webhook",
            "maxLength": 1024,
            "type": "string"
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          },
          "url": {
            "description": "URL that the webhook will send request to",
            "format": "uri",
            "maxLength": 1000,
            "type": "string"
          }
        },
        "required": [
          "enabled_events",
          "is_enabled",
          "url"
        ],
        "title": "Webhook",
        "type": "object"
      },
      "webhook_list": {
        "allOf": [
          {
            "properties": {
              "webhooks": {
                "description": "Array of webhooks",
                "items": {
                  "$ref": "#/components/schemas/webhook"
                },
                "type": "array"
              }
            },
            "required": [
              "webhooks"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "webhook_request_object": {
        "description": "Request body for webhook http request",
        "properties": {
          "event_resource": {
            "description": "Json string of object associated with the event. For example, if your event is ACCOUNT.CREATED, You can refer to Acccount to parse the account event to obtain the ID, status etc.\n",
            "type": "string"
          },
          "event_resource_changed_fields": {
            "description": "Json string of object associated with the event related to a resource change. This only contains those fields that have value changed on the event, and the field values are prior to the resource change event.\n",
            "type": "string"
          },
          "event_time": {
            "description": "Timestamp of the current event raised",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "The unique ID of the current event",
            "format": "uuid",
            "type": "string"
          },
          "metadata": {
            "description": "Metadata that stored in the webhook subscription",
            "maxLength": 1024,
            "type": "string"
          },
          "resource_id": {
            "description": "The ID of the resource this event occurred on, if available.",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "response_history": {
            "deprecated": true,
            "description": "Response history of the webhook request",
            "items": {
              "$ref": "#/components/schemas/response_history_item"
            },
            "type": "array"
          },
          "status": {
            "deprecated": true,
            "description": "Current event status. Failing event will keep retry until it is purged.",
            "enum": [
              "FAILED",
              "RETRYING",
              "RUNNING",
              "SUCCESS"
            ],
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/event_type_explicit"
          },
          "url": {
            "description": "URL that you specified for the webhook and where this request will be sent",
            "format": "uri",
            "maxLength": 1000,
            "type": "string"
          },
          "webhook_id": {
            "description": "Id of the Webhook the current request belongs to",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "event_time",
          "id",
          "metadata",
          "type",
          "url",
          "webhook_id"
        ],
        "title": "Webhook request object",
        "type": "object"
      },
      "widget_type": {
        "description": "The widget type",
        "enum": [
          "activate_card",
          "set_pin"
        ],
        "type": "string"
      },
      "wire": {
        "properties": {
          "amount": {
            "description": "Transfer amount in cents ($100 would be 10000)",
            "example": 10000,
            "type": "integer"
          },
          "bank_message": {
            "description": "Instructions intended for the financial institutions that are processing the wire.",
            "type": "string"
          },
          "batch_id": {
            "description": "The batch ID associated with the wire if it was created via the batch payment API.",
            "format": "uuid",
            "type": "string"
          },
          "case_id": {
            "description": "The case id associated with the wire.",
            "example": 53,
            "format": "integer64",
            "type": "integer"
          },
          "creation_time": {
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "currency": {
            "description": "3-character currency code",
            "example": "USD",
            "type": "string"
          },
          "customer_id": {
            "description": "The customer UUID representing the person initiating the Wire transfer",
            "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
            "format": "uuid",
            "type": "string"
          },
          "effective_date": {
            "description": "The effective date of the transaction once it gets posted",
            "example": "2022-03-18",
            "format": "date",
            "type": "string"
          },
          "fed_input_message_accountability_data": {
            "description": "The Synctera-generated IMAD can be overwritten when the wire is uploaded to the FED. If that happens and we are provided with the new IMAD, it will be populated in this field.",
            "example": "10220318BANK0001123456",
            "type": "string"
          },
          "id": {
            "description": "wire ID",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "input_message_accountability_data": {
            "description": "The input message accountability data consists of a 8 character cycle date (CCYYMMDD) an 8 character source and a 6 character sequence number.",
            "example": "10220318BANK0001123456",
            "readOnly": true,
            "type": "string"
          },
          "is_bulk": {
            "description": "Whether or not the wire is a \"bulk\" wire created via the batch payment API.",
            "type": "boolean"
          },
          "last_updated_time": {
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "network": {
            "description": "The network used to process the wire",
            "example": "fedwire",
            "type": "string"
          },
          "originating_account_id": {
            "description": "Sender account ID",
            "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
            "format": "uuid",
            "type": "string"
          },
          "originating_account_number": {
            "description": "The account number representing the sender account. If the outgoing wire is a return, it refers to the sender of the initial wire not the sender of the return.",
            "example": 1961234745,
            "format": "string",
            "type": "string"
          },
          "receiving_account_id": {
            "description": "The external account uuid representing the recipient of the wire.",
            "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
            "format": "uuid",
            "type": "string"
          },
          "receiving_account_number": {
            "description": "The account number representing the recipient account. If the outgoing wire is a return, it refers to the recipient of the initial wire not the destination of the return.",
            "example": 1961234745,
            "format": "string",
            "type": "string"
          },
          "recipient_message": {
            "description": "Information from the originator to the beneficiary (recipient).",
            "type": "string"
          },
          "return_data": {
            "$ref": "#/components/schemas/return_data1"
          },
          "sender_reference_id": {
            "description": "Sender's id associated with fedwire transfer",
            "example": "9F564A6124E65",
            "readOnly": true,
            "type": "string"
          },
          "settlement_date": {
            "description": "The settlement date of the transaction once it gets posted",
            "example": "2022-03-18",
            "format": "date",
            "type": "string"
          },
          "status": {
            "description": "The current status of the transfer",
            "enum": [
              "CANCELED",
              "COMPLETED",
              "DECLINED",
              "PENDING"
            ],
            "example": "PENDING",
            "readOnly": true,
            "type": "string"
          },
          "status_details": {
            "description": "Additional details about the status of the transfer",
            "enum": [
              "APPROVED",
              "CANCELED",
              "DECLINED_DUAL_APPROVAL",
              "PENDING_DUAL_APPROVAL"
            ],
            "example": "PENDING_DUAL_APPROVAL",
            "type": "string"
          },
          "transaction_id": {
            "description": "ID of the resulting transaction resource",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "transaction_in_id": {
            "description": "The transaction uuid of the incoming wire that triggered an outgoing return. This is only used if the outgoing wire is a return.",
            "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "amount",
          "creation_time",
          "currency",
          "effective_date",
          "id",
          "is_bulk",
          "last_updated_time",
          "originating_account_number",
          "receiving_account_number",
          "sender_reference_id",
          "status",
          "transaction_id"
        ],
        "title": "Wire",
        "type": "object"
      },
      "wire_list": {
        "allOf": [
          {
            "properties": {
              "wires": {
                "description": "Array of wires",
                "items": {
                  "$ref": "#/components/schemas/wire"
                },
                "type": "array"
              }
            },
            "required": [
              "wires"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ],
        "title": "Wire List"
      },
      "wire_request": {
        "properties": {
          "amount": {
            "description": "Transfer amount in cents ($100 would be 10000)",
            "example": 10000,
            "minimum": 1,
            "type": "integer"
          },
          "bank_message": {
            "description": "Instructions intended for the financial institutions that are processing the wire.",
            "maxLength": 210,
            "type": "string"
          },
          "currency": {
            "description": "3-character currency code",
            "enum": [
              "USD"
            ],
            "example": "USD",
            "type": "string"
          },
          "customer_id": {
            "description": "The customer UUID representing the person initiating the Wire transfer",
            "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
            "format": "uuid",
            "type": "string"
          },
          "metadata": {
            "description": "Additional transfer metadata structured as key-value pairs",
            "type": "object"
          },
          "originating_account_id": {
            "description": "Sender account ID",
            "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
            "format": "uuid",
            "type": "string"
          },
          "receiving_account_id": {
            "description": "The external account uuid representing the recipient of the wire.",
            "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
            "format": "uuid",
            "type": "string"
          },
          "recipient_message": {
            "description": "Information from the originator to the beneficiary (recipient).",
            "maxLength": 140,
            "type": "string"
          }
        },
        "required": [
          "amount",
          "currency",
          "customer_id",
          "originating_account_id",
          "receiving_account_id",
          "recipient_message"
        ],
        "title": "Wire payment request payload",
        "type": "object"
      },
      "wire_return_simulation_request": {
        "description": "Simulate receiving a returned Wire transfer",
        "properties": {
          "wire_id": {
            "description": "ID of an outgoing Wire transfer to be returned.",
            "example": "23a37f14-16eb-461d-9331-b78182adbad4",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "wire_id"
        ],
        "title": "Incoming Wire return simulation request",
        "type": "object"
      },
      "wire_simulation_datasoft_response": {
        "description": "Incoming Wire simulation result with the webhook ID",
        "properties": {
          "webhook_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "webhook_id"
        ],
        "type": "object"
      },
      "wire_simulation_fedwire_response": {
        "description": "Incoming Wire simulation result with the created file name",
        "properties": {
          "file_name": {
            "example": "SIMULATION.20230709T222327.086_221.txt",
            "type": "string"
          }
        },
        "required": [
          "file_name"
        ],
        "type": "object"
      },
      "wire_simulation_response": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/wire_simulation_fedwire_response"
          },
          {
            "$ref": "#/components/schemas/wire_simulation_datasoft_response"
          }
        ],
        "type": "object"
      },
      "wire_transaction_simulation_request": {
        "description": "Simulate receiving a Wire transaction",
        "properties": {
          "account_number": {
            "description": "Number of the receiving account",
            "example": "123638791329",
            "type": "string"
          },
          "amount": {
            "description": "Amount to transfer in cents (e.g. 100 = $1).",
            "example": 607,
            "minimum": 1,
            "type": "integer"
          },
          "network": {
            "default": "FEDWIRE",
            "description": "Network to use for the Wire transfer",
            "enum": [
              "DATASOFT",
              "FEDWIRE"
            ],
            "example": "FEDWIRE",
            "type": "string"
          }
        },
        "required": [
          "account_number",
          "amount"
        ],
        "title": "Incoming Wire transaction simulation request",
        "type": "object"
      },
      "withdrawal_request_model": {
        "properties": {
          "account_type": {
            "enum": [
              "checking",
              "credit",
              "savings"
            ],
            "type": "string"
          },
          "amount": {
            "description": "The amount of the transaction in the smallest whole denomination of the applicable currency (eg. For USD use cents)",
            "type": "integer"
          },
          "card_acceptor": {
            "$ref": "#/components/schemas/card_acceptor_model"
          },
          "card_id": {
            "format": "uuid",
            "type": "string"
          },
          "mid": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "pin": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "amount",
          "card_id",
          "mid"
        ],
        "type": "object"
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "bearerFormat": "api_key",
        "scheme": "bearer",
        "type": "http"
      }
    }
  },
  "info": {
    "description": "This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>",
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "title": "Synctera API",
    "version": "0.171.0"
  },
  "openapi": "3.0.3",
  "paths": {
    "/accounts": {
      "get": {
        "description": "Get a paginated list of accounts.\n\nGENERAL_LEDGER accounts are not included by default. To include them, set include_general_ledger=true, or account_type=GENERAL_LEDGER.\n\nNote: GENERAL_LEDGER accounts are in Alpha status, and cannot yet be created. We may make breaking changes.\n",
        "operationId": "listAccounts",
        "parameters": [
          {
            "$ref": "#/components/parameters/nickname_query"
          },
          {
            "$ref": "#/components/parameters/account_number"
          },
          {
            "$ref": "#/components/parameters/last_name"
          },
          {
            "$ref": "#/components/parameters/general_ledger_type_query"
          },
          {
            "$ref": "#/components/parameters/account_status"
          },
          {
            "$ref": "#/components/parameters/first_chosen_name"
          },
          {
            "$ref": "#/components/parameters/overflow_account_id_query"
          },
          {
            "$ref": "#/components/parameters/account_type_query"
          },
          {
            "$ref": "#/components/parameters/business_id_query"
          },
          {
            "$ref": "#/components/parameters/overdraft_account_id_query"
          },
          {
            "$ref": "#/components/parameters/spend_control_ids_query"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/person_id_query"
          },
          {
            "$ref": "#/components/parameters/customer_type"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/customer_id_query_one"
          },
          {
            "$ref": "#/components/parameters/interest_product_id_query"
          },
          {
            "$ref": "#/components/parameters/linked_account_id_query"
          },
          {
            "$ref": "#/components/parameters/account_id_query"
          },
          {
            "$ref": "#/components/parameters/account_sort_by_query"
          },
          {
            "$ref": "#/components/parameters/account_access_status"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account_list"
                }
              }
            },
            "description": "List of accounts"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List accounts",
        "tags": [
          "Accounts"
        ],
        "x-external": true,
        "x-permissions": [
          "accounts:read"
        ]
      },
      "post": {
        "description": "Creates an account copying values from account template into the account resource. Any fields defined as part of account creation will overwrite the ones provided from the account template. Account holder `verification_status` must be `ACCEPTED` to create an account.\n\nRequired fields:\n  - relationships\n",
        "operationId": "createAccount",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/account_creation"
              }
            }
          },
          "description": "Account to create",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account_generic_response"
                }
              }
            },
            "description": "Created account"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "409": {
            "$ref": "#/components/responses/already_exists"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          }
        },
        "summary": "Create an account",
        "tags": [
          "Accounts"
        ],
        "x-external": true
      },
      "summary": "Accounts"
    },
    "/accounts/products": {
      "get": {
        "description": "List account products\n\nThe FEE account product has been deprecated. Instead, use the /v1/fee_templates and /v1/fees endpoints.\n",
        "operationId": "listAccountResourceProducts",
        "parameters": [
          {
            "description": "Date range filtering for type INTEREST. All rates in interest resource have to have valid_to earlier or equal to end_date.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "description": "Type of account product",
            "in": "query",
            "name": "product_type",
            "required": true,
            "schema": {
              "enum": [
                "FEE",
                "INTEREST"
              ],
              "type": "string"
            }
          },
          {
            "description": "ID of account product. Multiple IDs can be provided as a comma-separated list.",
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "description": "Date range filtering for type INTEREST. All rates in interest resource have to have valid_from later or equal to start_date.",
            "in": "query",
            "name": "start_date",
            "schema": {
              "format": "date",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account_product_list"
                }
              }
            },
            "description": "List of account products"
          }
        },
        "summary": "List account products",
        "tags": [
          "Accounts"
        ],
        "x-external": true
      },
      "post": {
        "description": "Create an account product. Rates cannot be nil or empty.\n\nThe FEE account product has been deprecated. Instead, use the /v1/fee_templates and /v1/fees endpoints.\n",
        "operationId": "createAccountResourceProduct",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/account_product"
              }
            }
          },
          "description": "Account product to create",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account_product"
                }
              }
            },
            "description": "Account product created"
          }
        },
        "summary": "Create an account product",
        "tags": [
          "Accounts"
        ],
        "x-external": true
      },
      "summary": "Account products"
    },
    "/accounts/products/{product_id}": {
      "patch": {
        "description": "Patch account product. Rates requires at minimum 1 entry if specified.\n\nThe FEE account product has been deprecated. Instead, use the /v1/fee_templates and /v1/fees endpoints.\n",
        "operationId": "patchAccountProduct",
        "parameters": [
          {
            "$ref": "#/components/parameters/product_id"
          },
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patch_account_product"
              }
            }
          },
          "description": "Account product fields to be patched",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account_product"
                }
              }
            },
            "description": "Updated account product"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          }
        },
        "summary": "Patch account product",
        "tags": [
          "Accounts"
        ],
        "x-external": true
      },
      "summary": "Account products"
    },
    "/accounts/stop_payments": {
      "get": {
        "description": "List stop payments associated with account",
        "operationId": "listStopPayment",
        "parameters": [
          {
            "$ref": "#/components/parameters/transaction_ids_in_query"
          },
          {
            "$ref": "#/components/parameters/originator_names_in_query"
          },
          {
            "$ref": "#/components/parameters/account_ids_in_query"
          },
          {
            "$ref": "#/components/parameters/stop_payment_ids_in_query"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stop_payment_list"
                }
              }
            },
            "description": "list of stop payments"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List stop payments",
        "tags": [
          "Accounts"
        ],
        "x-external": true,
        "x-permissions": [
          "accounts:read"
        ]
      },
      "summary": "Account Stop Payments"
    },
    "/accounts/templates": {
      "get": {
        "description": "List account templates\n",
        "operationId": "listAccountTemplates",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_type_query"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/template_list"
                }
              }
            },
            "description": "List of account templates"
          }
        },
        "summary": "List account templates",
        "tags": [
          "Accounts"
        ],
        "x-external": true,
        "x-permissions": [
          "accounts:read"
        ]
      },
      "post": {
        "description": "Create an account template. An account template is needed to create an account in a lead mode.\n",
        "operationId": "createAccountTemplate",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/account_template"
              }
            }
          },
          "description": "Account template to create",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account_template_response"
                }
              }
            },
            "description": "Account template created"
          }
        },
        "summary": "Create an account template",
        "tags": [
          "Accounts"
        ],
        "x-external": true
      },
      "summary": "Accounts"
    },
    "/accounts/templates/{template_id}": {
      "delete": {
        "description": "Delete account template",
        "operationId": "DeleteAccountTemplate",
        "parameters": [
          {
            "$ref": "#/components/parameters/template_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/delete_response"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          }
        },
        "summary": "Delete account template",
        "tags": [
          "Accounts"
        ],
        "x-external": true
      },
      "get": {
        "description": "Get an account template",
        "operationId": "getAccountTemplate",
        "parameters": [
          {
            "$ref": "#/components/parameters/template_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account_template_response"
                }
              }
            },
            "description": "Account Template"
          }
        },
        "summary": "Get account template",
        "tags": [
          "Accounts"
        ],
        "x-external": true,
        "x-permissions": [
          "accounts:read"
        ]
      },
      "patch": {
        "description": "Patch account template",
        "operationId": "PatchAccountTemplate",
        "parameters": [
          {
            "$ref": "#/components/parameters/template_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patch_account_template"
              }
            }
          },
          "description": "patch Account template",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account_template_response"
                }
              }
            },
            "description": "Patch Account template"
          }
        },
        "summary": "Patch account template",
        "tags": [
          "Accounts"
        ],
        "x-external": true
      },
      "put": {
        "description": "Update account template\n",
        "operationId": "updateAccountTemplate",
        "parameters": [
          {
            "$ref": "#/components/parameters/template_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/account_template"
              }
            }
          },
          "description": "Account template to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account_template_response"
                }
              }
            },
            "description": "Account template updated"
          }
        },
        "summary": "Update account template",
        "tags": [
          "Accounts"
        ],
        "x-external": true
      },
      "summary": "account"
    },
    "/accounts/{account_id}": {
      "get": {
        "description": "Get an account by account_id.\n\nNote: GENERAL_LEDGER accounts are in Alpha status, and cannot yet be created. We may make breaking changes.\n",
        "operationId": "getAccount",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id_path"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account_generic_response"
                }
              }
            },
            "description": "Account"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "461": {
            "$ref": "#/components/responses/account_closed"
          }
        },
        "summary": "Get account",
        "tags": [
          "Accounts"
        ],
        "x-external": true,
        "x-permissions": [
          "accounts:read"
        ]
      },
      "patch": {
        "description": "Patch account.\n\nImmutable fields:\n  - account_number\n  - account_type\n  - account_template_id\n  - customer_type\n\nPlease note:\n  - Other fields cannot be modified when access_status is FROZEN.\n  - access_status has to be patched individually without other fields.\n",
        "operationId": "patchAccount",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          },
          {
            "$ref": "#/components/parameters/account_id_path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patch_account"
              }
            }
          },
          "description": "Account fields to be patched",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account_generic_response"
                }
              }
            },
            "description": "Updated account"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "461": {
            "$ref": "#/components/responses/account_closed"
          }
        },
        "summary": "Patch account",
        "tags": [
          "Accounts"
        ],
        "x-external": true
      },
      "put": {
        "deprecated": true,
        "description": "> Deprecated. Please use PATCH /v0/accounts. This route only supports types CHECKING and SAVING.\n\nUpdate account\n\nShadow mode required fields:\n  - account_number\n  - status\n\nLead mode required fields:\n  - All fields are required.\n\nPlease note:\n  - access_status needs to be in ACTIVE.\n  - PUT request cannot change access_status.\n",
        "operationId": "updateAccount",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id_path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_account"
              }
            }
          },
          "description": "Account to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account_generic_response"
                }
              }
            },
            "description": "Updated account"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "461": {
            "$ref": "#/components/responses/account_closed"
          }
        },
        "summary": "Update account",
        "tags": [
          "Accounts"
        ],
        "x-external": true
      },
      "summary": "account"
    },
    "/accounts/{account_id}/initiate_closure": {
      "patch": {
        "description": "Update an account closure.\n",
        "operationId": "updateAccountClosure",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          },
          {
            "$ref": "#/components/parameters/account_id_path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/account_closure_update_request"
              }
            }
          },
          "description": "Account to close",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account_generic_response"
                }
              }
            },
            "description": "Account to close"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Update account closure",
        "tags": [
          "Accounts"
        ],
        "x-external": true
      },
      "post": {
        "description": "Initiates an account closure. It immediately changes the account status to `IN_CLOSING`. Once the account status\nis `IN_CLOSING`, the account can no longer be used to create new transactions.\n",
        "operationId": "initiateAccountClosure",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          },
          {
            "$ref": "#/components/parameters/account_id_path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/account_closure_request"
              }
            }
          },
          "description": "Account to close",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account_generic_response"
                }
              }
            },
            "description": "Account to close"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Initiate account closure",
        "tags": [
          "Accounts"
        ],
        "x-external": true
      },
      "summary": "Accounts"
    },
    "/accounts/{account_id}/relationships": {
      "get": {
        "description": "List all customers of an account",
        "operationId": "listAccountRelationship",
        "parameters": [
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/account_id_path"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/relationship_list"
                }
              }
            },
            "description": "List of account relationships"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "461": {
            "$ref": "#/components/responses/account_closed"
          }
        },
        "summary": "List account relationships",
        "tags": [
          "Accounts"
        ],
        "x-external": true
      },
      "post": {
        "description": "Add a customer to an account",
        "operationId": "createAccountRelationship",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          },
          {
            "$ref": "#/components/parameters/account_id_path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/account_relationship"
              }
            }
          },
          "description": "Account relationship object",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/relationship_response"
                }
              }
            },
            "description": "Account relationship object"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "461": {
            "$ref": "#/components/responses/account_closed"
          }
        },
        "summary": "Create account relationship",
        "tags": [
          "Accounts"
        ],
        "x-external": true
      },
      "summary": "Account Relationship"
    },
    "/accounts/{account_id}/relationships/{relationship_id}": {
      "delete": {
        "description": "Delete account relationship",
        "operationId": "DeleteAccountRelationship",
        "parameters": [
          {
            "$ref": "#/components/parameters/relationship_id"
          },
          {
            "$ref": "#/components/parameters/account_id_path"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/delete_response"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "461": {
            "$ref": "#/components/responses/account_closed"
          }
        },
        "summary": "Delete account relationship",
        "tags": [
          "Accounts"
        ],
        "x-external": true
      },
      "get": {
        "description": "Get account relationship by ID",
        "operationId": "getAccountRelationship",
        "parameters": [
          {
            "$ref": "#/components/parameters/relationship_id"
          },
          {
            "$ref": "#/components/parameters/account_id_path"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/relationship_response"
                }
              }
            },
            "description": "Account relationship"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "461": {
            "$ref": "#/components/responses/account_closed"
          }
        },
        "summary": "Get account relationship",
        "tags": [
          "Accounts"
        ],
        "x-external": true
      },
      "put": {
        "description": "Update account relationship. Only relationship_type can be updated. customer_id should not be modified.",
        "operationId": "updateAccountRelationship",
        "parameters": [
          {
            "$ref": "#/components/parameters/relationship_id"
          },
          {
            "$ref": "#/components/parameters/account_id_path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/account_relationship"
              }
            }
          },
          "description": "Account relationship to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/relationship_response"
                }
              }
            },
            "description": "Updated account relationship"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "461": {
            "$ref": "#/components/responses/account_closed"
          }
        },
        "summary": "Update account relationship",
        "tags": [
          "Accounts"
        ],
        "x-external": true
      },
      "summary": "Account Relationship"
    },
    "/ach": {
      "description": "The ACH object represents your sent ACH.\n",
      "get": {
        "description": "List sent ACH transactions",
        "operationId": "listTransactionsOut",
        "parameters": [
          {
            "$ref": "#/components/parameters/incoming_ach_id"
          },
          {
            "$ref": "#/components/parameters/end_effective_date"
          },
          {
            "$ref": "#/components/parameters/start_effective_date"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/effective_date"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/outgoing_ach_list"
                }
              }
            },
            "description": "List of sent ACH transactions."
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List sent ACH transactions",
        "tags": [
          "ACH"
        ],
        "x-external": true
      },
      "post": {
        "description": "Send an ACH\n",
        "operationId": "addTransactionOut",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/outgoing_ach_request"
              }
            }
          },
          "description": "Send ACH request",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/outgoing_ach"
                }
              }
            },
            "description": "Sent ACH response"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Send an ACH",
        "tags": [
          "ACH"
        ],
        "x-external": true
      },
      "summary": "Sent ACH"
    },
    "/ach/gateways": {
      "description": "Gateway Endpoint Configuration object represents the URL and additional parameters\nfor external HTTP request to Fintech to get final authorization for the ACH transaction\n",
      "get": {
        "description": "Gateway Endpoint Configuration object represents details required for Auth flow Request to the Fintech (Tenant)",
        "operationId": "getAllGatewayConfigs",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/gateway_config"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Gateway Configuration for Tenant"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List All Gateway Configurations",
        "tags": [
          "ACH"
        ],
        "x-external": true,
        "x-permissions": [
          "sub_ledger:read"
        ]
      },
      "post": {
        "description": "By creating Gateway Endpoint Configuration object for Fintech,\nyou enable ACH in Auth flow for all the ACH transactions for specified Fintech (Tenant)\n",
        "operationId": "addGatewayConfig",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/gateway_post"
              }
            }
          },
          "description": "Gateway Config Create Request",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gateway_config"
                }
              }
            },
            "description": "Created Gateway Config Object"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create New Gateway Endpoint Configuration",
        "tags": [
          "ACH"
        ],
        "x-external": true
      },
      "summary": "Gateway Endpoint Configuration"
    },
    "/ach/gateways/{id}": {
      "delete": {
        "description": "Use this to permanently remove Gateway Configuration and disable Auth Flow for Fintech (Tenant)",
        "operationId": "deleteGatewayConfigByID",
        "parameters": [
          {
            "$ref": "#/components/parameters/id_path"
          }
        ],
        "responses": {
          "200": {
            "description": "Gateway Config Object was successfully deleted"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Delete Gateway Endpoint Configuration by ID",
        "tags": [
          "ACH"
        ],
        "x-external": true
      },
      "description": "Gateway Endpoint Configuration object represents the URL and additional parameters\nfor external HTTP request to Fintech to get final authorization for the ACH transaction\n",
      "get": {
        "description": "Gateway Endpoint Configuration object represents details required for Auth flow Request to the Fintech (Tenant)",
        "operationId": "getGatewayConfigByID",
        "parameters": [
          {
            "$ref": "#/components/parameters/id_path"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gateway_config"
                }
              }
            },
            "description": "Gateway Configuration"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get Gateway Endpoint Configuration By ID",
        "tags": [
          "ACH"
        ],
        "x-external": true,
        "x-permissions": [
          "sub_ledger:read"
        ]
      },
      "patch": {
        "description": "Gateway Endpoint Configuration object represents details required for Auth flow Request to the Fintech (Tenant)",
        "operationId": "patchGatewayConfigByID",
        "parameters": [
          {
            "$ref": "#/components/parameters/id_path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/gateway_patch"
              }
            }
          },
          "description": "Gateway Config Object fields allowed for update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gateway_config"
                }
              }
            },
            "description": "Updated Gateway Config Object"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Update Gateway Endpoint Configuration By ID",
        "tags": [
          "ACH"
        ],
        "x-external": true
      },
      "summary": "Gateway Endpoint Configuration"
    },
    "/ach/incoming": {
      "get": {
        "description": "> 🚧 Beta\n> This is a Beta endpoint for use by early adopters. Do not use this endpoint with real customers. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced.\n",
        "operationId": "getIncomingACHList",
        "parameters": [
          {
            "$ref": "#/components/parameters/status"
          },
          {
            "$ref": "#/components/parameters/settlement_date_to"
          },
          {
            "$ref": "#/components/parameters/settlement_date_from"
          },
          {
            "$ref": "#/components/parameters/account_id"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/incoming_ach_list"
                }
              }
            },
            "description": "Incoming ACH transactions list"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List Incoming ACH Transactions",
        "tags": [
          "ACH"
        ],
        "x-external": true
      },
      "summary": "Incoming ACH transactions"
    },
    "/ach/incoming/{id}": {
      "get": {
        "description": "> 🚧 Beta\n> This is a Beta endpoint for use by early adopters. Do not use this endpoint with real customers. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced.\n",
        "operationId": "getIncomingACHByID",
        "parameters": [
          {
            "$ref": "#/components/parameters/id_path"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/incoming_ach"
                }
              }
            },
            "description": "Incoming ACH transaction"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get Incoming ACH Transaction By ID",
        "tags": [
          "ACH"
        ],
        "x-external": true
      },
      "summary": "Incoming ACH transaction"
    },
    "/ach/transaction_simulations/receiving_return": {
      "post": {
        "description": "Use to simulate receiving ACH return in test environments. Creates an incoming ACH file with a single return entry based on a previously created outgoing transaction. The file gets automatically processed.",
        "operationId": "achReturnSimulation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ach_return_simulation_request"
              }
            }
          },
          "description": "Incoming ACH return simulation",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ach_simulation_response"
                }
              }
            },
            "description": "Simulated receiving ACH return"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Simulate receiving ACH return",
        "tags": [
          "ACH Transaction Simulations"
        ],
        "x-external": true
      },
      "summary": "Receiving ACH return simulation"
    },
    "/ach/transaction_simulations/receiving_transaction": {
      "post": {
        "description": "Use to simulate receiving ACH transaction in test environments. Creates an incoming ACH file with a single transaction, which gets automatically processed.",
        "operationId": "achTransactionSimulation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ach_transaction_simulation_request"
              }
            }
          },
          "description": "Sent ACH request",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ach_simulation_response"
                }
              }
            },
            "description": "Simulated receiving ACH transaction"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Simulate receiving ACH transaction",
        "tags": [
          "ACH Transaction Simulations"
        ],
        "x-external": true
      },
      "summary": "Receiving ACH simulation"
    },
    "/ach/{transaction_id}": {
      "get": {
        "description": "Get a single sent ACH transaction",
        "operationId": "getTransactionOut",
        "parameters": [
          {
            "$ref": "#/components/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/outgoing_ach"
                }
              }
            },
            "description": "Sent ACH transaction representation."
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get a sent ACH transaction",
        "tags": [
          "ACH"
        ],
        "x-external": true
      },
      "patch": {
        "description": "Update a sent ACH transaction (either status or funds availability)",
        "operationId": "patchTransactionOut",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/outgoing_ach_patch"
              }
            }
          },
          "description": "Update sent ach transaction",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/outgoing_ach"
                }
              }
            },
            "description": "Sent ACH transaction representation."
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Update a sent ACH transaction",
        "tags": [
          "ACH"
        ],
        "x-external": true
      },
      "summary": "Sent ACH detail"
    },
    "/addresses": {
      "get": {
        "operationId": "listAddresses",
        "parameters": [
          {
            "$ref": "#/components/parameters/country"
          },
          {
            "$ref": "#/components/parameters/business_id"
          },
          {
            "$ref": "#/components/parameters/is_registered_agent"
          },
          {
            "$ref": "#/components/parameters/customer_id"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/is_active"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/address_type"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/addresses_list"
                }
              }
            },
            "description": "List of addresses"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List Addresses",
        "tags": [
          "Addresses"
        ],
        "x-external": true
      },
      "post": {
        "description": "Create a address.",
        "operationId": "createAddress",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/address_post"
              }
            }
          },
          "description": "Address to create",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/address_response"
                }
              }
            },
            "description": "Created address"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          }
        },
        "summary": "Create a address",
        "tags": [
          "Addresses"
        ],
        "x-external": true
      },
      "summary": "Addresses"
    },
    "/addresses/{address_id}": {
      "get": {
        "description": "Get address information by its unique identifier",
        "operationId": "getAddress",
        "parameters": [
          {
            "$ref": "#/components/parameters/address_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/address_response"
                }
              }
            },
            "description": "Address information"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get address information by id",
        "tags": [
          "Addresses"
        ],
        "x-external": true
      },
      "patch": {
        "description": "Update address\n",
        "operationId": "updateAddress",
        "parameters": [
          {
            "$ref": "#/components/parameters/address_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/address_patch"
              }
            }
          },
          "description": "Address patch details",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/address_response"
                }
              }
            },
            "description": "Updated address information"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Update address information by id",
        "tags": [
          "Addresses"
        ],
        "x-external": true
      },
      "summary": "Addresses"
    },
    "/businesses": {
      "get": {
        "description": "Retrieves paginated list of businesses associated with the authorized requester.",
        "operationId": "listBusinesses",
        "parameters": [
          {
            "$ref": "#/components/parameters/is_customer"
          },
          {
            "$ref": "#/components/parameters/business_sort_by_query"
          },
          {
            "$ref": "#/components/parameters/uuid_query"
          },
          {
            "$ref": "#/components/parameters/has_accounts_query"
          },
          {
            "$ref": "#/components/parameters/classifications"
          },
          {
            "$ref": "#/components/parameters/phone_number"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/business_status"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/entity_name"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/business_list"
                }
              }
            },
            "description": "List of businesses."
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List business",
        "tags": [
          "Businesses"
        ],
        "x-external": true,
        "x-status": "alpha"
      },
      "post": {
        "description": "Create a business who may act as a customer or a related business. You can then verify the identity of this customer and associate them with other people and accounts.\n",
        "operationId": "createBusiness",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/business"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/business"
                }
              }
            },
            "description": "The created business."
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/already_exists"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create a business",
        "tags": [
          "Businesses"
        ],
        "x-external": true,
        "x-status": "alpha"
      },
      "summary": "Businesses"
    },
    "/businesses/{business_id}": {
      "get": {
        "description": "Get business by ID.",
        "operationId": "getBusiness",
        "parameters": [
          {
            "$ref": "#/components/parameters/business_id_path"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/business"
                }
              }
            },
            "description": "Business representation."
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get business",
        "tags": [
          "Businesses"
        ],
        "x-external": true,
        "x-status": "alpha"
      },
      "patch": {
        "description": "Update business by ID.",
        "operationId": "updateBusiness",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          },
          {
            "$ref": "#/components/parameters/business_id_path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patch_business"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/business"
                }
              }
            },
            "description": "Updated business representation."
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Patch business",
        "tags": [
          "Businesses"
        ],
        "x-external": true,
        "x-status": "alpha"
      }
    },
    "/cards": {
      "description": "The Card object represents your customer's spending card.\n",
      "get": {
        "description": "List of cards matching query parameters\n",
        "operationId": "listCards",
        "parameters": [
          {
            "$ref": "#/components/parameters/last_four_query"
          },
          {
            "$ref": "#/components/parameters/postal_code_query"
          },
          {
            "$ref": "#/components/parameters/customer_id_query"
          },
          {
            "$ref": "#/components/parameters/card_brand_query"
          },
          {
            "$ref": "#/components/parameters/bin_prefix_query"
          },
          {
            "$ref": "#/components/parameters/emboss_name_query"
          },
          {
            "$ref": "#/components/parameters/card_type_query"
          },
          {
            "$ref": "#/components/parameters/form_query"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/card_status_query"
          },
          {
            "$ref": "#/components/parameters/card_product_id_query"
          },
          {
            "$ref": "#/components/parameters/account_id_query_array"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/barcode_query"
          },
          {
            "$ref": "#/components/parameters/expiration_date_query"
          },
          {
            "$ref": "#/components/parameters/card_sort_by_query"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card_list_response"
                }
              }
            },
            "description": "Cards"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List Cards",
        "tags": [
          "Cards"
        ],
        "x-external": true
      },
      "post": {
        "description": "Issue or reissue a new card for a customer\n",
        "operationId": "issueCard",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/card_issuance_request"
              }
            }
          },
          "description": "Card to issue",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card_response"
                }
              }
            },
            "description": "Card issued"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Issue a Card",
        "tags": [
          "Cards"
        ],
        "x-external": true
      },
      "summary": "Cards"
    },
    "/cards/activate": {
      "description": "Activate a card\n",
      "post": {
        "description": "Activate a card\n",
        "operationId": "activateCard",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/card_activation_request"
              }
            }
          },
          "description": "Card activation code",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card_response"
                }
              }
            },
            "description": "Card activated successfully"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Activate a card",
        "tags": [
          "Cards"
        ],
        "x-external": true
      },
      "summary": "Card Activation"
    },
    "/cards/card_widget_url": {
      "get": {
        "description": "This endpoint returns a URL address of the specified widget for a given card\n",
        "operationId": "getCardWidgetURL",
        "parameters": [
          {
            "description": "The ID of the card (required for set PIN widget)",
            "in": "query",
            "name": "card_id",
            "schema": {
              "$ref": "#/components/schemas/card_id"
            }
          },
          {
            "in": "query",
            "name": "account_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/account_id"
            }
          },
          {
            "in": "query",
            "name": "customer_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/customer_id1"
            }
          },
          {
            "description": "The type of widget for which to construct the URL",
            "in": "query",
            "name": "widget_type",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/widget_type"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card_widget_url_response"
                }
              }
            },
            "description": "Card issued"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get card widget URL",
        "tags": [
          "Cards"
        ],
        "x-external": true
      },
      "summary": "Get Card Widget URL"
    },
    "/cards/digital_wallet_tokens": {
      "get": {
        "description": "List Digital Wallet Tokens\n\nNB: Digital wallet tokens cannot be created outside of production.\n",
        "operationId": "listDigitalWalletTokens",
        "parameters": [
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/digital_wallet_token_state_query"
          },
          {
            "$ref": "#/components/parameters/card_id_query"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/token_list_response"
                }
              }
            },
            "description": "List of Digital Wallet Tokens of a card"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List Digital Wallet Tokens",
        "tags": [
          "Digital Wallet Tokens"
        ],
        "x-external": true
      }
    },
    "/cards/digital_wallet_tokens/{digital_wallet_token_id}": {
      "description": "The Digital Wallet token object represents your card's digital wallet token(s).\n",
      "get": {
        "description": "Get the details about the digital wallet token of a card\n\nNB: Digital wallet tokens cannot be created outside of production.\n",
        "operationId": "getDigitalWalletToken",
        "parameters": [
          {
            "$ref": "#/components/parameters/digital_wallet_token_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/digital_wallet_token_response"
                }
              }
            },
            "description": "Digital Wallet Token details"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get Digital Wallet Token",
        "tags": [
          "Digital Wallet Tokens"
        ],
        "x-external": true
      },
      "patch": {
        "description": "The status of a digital wallet token can be updated as, ACTIVE to SUSPENDED, SUSPENDED to ACTIVE, ACTIVE to TERMINATED or SUSPENDED to TERMINATED.\n",
        "operationId": "updateDigitalWalletTokenStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/digital_wallet_token_id"
          },
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/digital_wallet_token_edit_request"
              }
            }
          },
          "description": "Update Digital wallet token status",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/digital_wallet_token_response"
                }
              }
            },
            "description": "Digital wallet token Status updated"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Update Digital Wallet Token's life cycle status",
        "tags": [
          "Digital Wallet Tokens"
        ],
        "x-external": true
      },
      "summary": "Digital Wallet Token"
    },
    "/cards/gateways": {
      "description": "The Gateway object represents the Authorization gateway configuration.\n",
      "get": {
        "description": "List of gateways matching query parameters\n",
        "operationId": "listGateways",
        "parameters": [
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gateway_list_response"
                }
              }
            },
            "description": "Gateways"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List Gateways",
        "tags": [
          "Cards"
        ],
        "x-external": true
      },
      "post": {
        "description": "Create a new Authorization Gateway Configuration\n",
        "operationId": "createGateway",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_gateway_request"
              }
            }
          },
          "description": "Create a new Authorization Gateway Configuration",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gateway_response"
                }
              }
            },
            "description": "New Authorization Gateway Configuration created"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create Gateway",
        "tags": [
          "Cards"
        ],
        "x-external": true
      },
      "summary": "Authorization Gateway Configuration"
    },
    "/cards/gateways/{gateway_id}": {
      "description": "The Gateway object represents the Authorization gateway configuration.\n",
      "get": {
        "description": "Get the details of an Authorization Gateway that has been configured\n",
        "operationId": "getGateway",
        "parameters": [
          {
            "$ref": "#/components/parameters/gateway_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gateway_response"
                }
              }
            },
            "description": "Gateway details"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get Gateway",
        "tags": [
          "Cards"
        ],
        "x-external": true
      },
      "patch": {
        "description": "Update Authorization Gateway configuration\n",
        "operationId": "updateGateway",
        "parameters": [
          {
            "$ref": "#/components/parameters/gateway_id"
          },
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_gateway_request"
              }
            }
          },
          "description": "Gateway edits",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gateway_response"
                }
              }
            },
            "description": "Gateway Updated"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Update Gateway",
        "tags": [
          "Cards"
        ],
        "x-external": true
      },
      "summary": "Authorization Gateway"
    },
    "/cards/images": {
      "get": {
        "description": "List all card image details\n",
        "operationId": "listCardImageDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_query_required"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card_image_details_list"
                }
              }
            },
            "description": "List of details for images uploaded by the given customer"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List Card Image Details",
        "tags": [
          "Cards"
        ],
        "x-external": true
      },
      "post": {
        "description": "Create a card image entity. Note that this does not include the image data itself. You can upload the image data via a subsequent uploadCardImageData request using the ID created here.\n",
        "operationId": "createCardImage",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_card_image_request"
              }
            }
          },
          "description": "Details of the image to create",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card_image_details"
                }
              }
            },
            "description": "Card image entity created"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create Card Image",
        "tags": [
          "Cards"
        ],
        "x-external": true
      }
    },
    "/cards/images/{card_image_id}": {
      "get": {
        "description": "Get card image details",
        "operationId": "getCardImageDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/card_image_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card_image_details"
                }
              }
            },
            "description": "Details of the card image"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get Card Image Details",
        "tags": [
          "Cards"
        ],
        "x-external": true
      },
      "patch": {
        "description": "Update card image details. The only detail that can be updated is the card status as APPROVED or REJECTED.",
        "operationId": "updateCardImageDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          },
          {
            "$ref": "#/components/parameters/card_image_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_card_image_request"
              }
            }
          },
          "description": "Details of the image to create",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card_image_details"
                }
              }
            },
            "description": "Details of the card image"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Update Card Image Details",
        "tags": [
          "Cards"
        ],
        "x-external": true
      }
    },
    "/cards/images/{card_image_id}/data": {
      "get": {
        "description": "Get card image data",
        "operationId": "getCardImageData",
        "parameters": [
          {
            "$ref": "#/components/parameters/card_image_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "image/jpeg": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "Image data"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get Card Image Data",
        "tags": [
          "Cards"
        ],
        "x-external": true
      },
      "post": {
        "description": "Upload card image data",
        "operationId": "uploadCardImageData",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          },
          {
            "$ref": "#/components/parameters/card_image_id"
          }
        ],
        "requestBody": {
          "content": {
            "image/jpeg": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            }
          },
          "description": "Binary image data",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card_image_details"
                }
              }
            },
            "description": "Card image data was successfully uploaded"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Upload Card Image",
        "tags": [
          "Cards"
        ],
        "x-external": true
      }
    },
    "/cards/products": {
      "get": {
        "operationId": "listCardProducts",
        "parameters": [
          {
            "$ref": "#/components/parameters/form_query"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card_product_list_response"
                }
              }
            },
            "description": "List of available Card Products"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List Card Products",
        "tags": [
          "Cards"
        ],
        "x-external": true
      }
    },
    "/cards/single_use_token": {
      "post": {
        "description": "This endpoint returns a single-use access token. This type of token authorizes a single request to access API endpoints and data associated with a particular user\n",
        "operationId": "getClientSingleUseToken",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/single_use_token_request"
              }
            }
          },
          "description": "User token details",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/single_use_token_response"
                }
              }
            },
            "description": "Token Created"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get single-use token",
        "tags": [
          "Cards"
        ],
        "x-external": true
      },
      "summary": "Get Single-Use Token"
    },
    "/cards/transaction_simulations/authorization": {
      "post": {
        "description": "Simulate an `authorization` type transaction by including the `card_token` and other authorization details in your request.\n",
        "operationId": "simulateAuthorization",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/auth_request_model"
              }
            }
          },
          "description": "Authorization details"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/simulation_response_model"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Simulate authorization",
        "tags": [
          "Card Transaction Simulations"
        ],
        "x-external": true
      },
      "summary": "Simulate Authorization"
    },
    "/cards/transaction_simulations/authorization/advice": {
      "post": {
        "description": "An authorization advice allows an amount to be decreased after the authorization. This endpoint allows you to simulate post-swipe adjustments.\n\nSimulate an `authorization.advice` type transaction by including the `original_transaction_token` and other authorization details in your request.\n",
        "operationId": "simulateAuthorizationAdvice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/authorization_advice_model"
              }
            }
          },
          "description": "Authorization advice details"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/simulation_response_model"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Simulate authorization advice",
        "tags": [
          "Card Transaction Simulations"
        ],
        "x-external": true
      },
      "summary": "Simulate Authorization Advice"
    },
    "/cards/transaction_simulations/clearing": {
      "post": {
        "description": "Simulate an `authorization.clearing` type transaction by including the `original_transaction_token` and `amount` in your request. To simulate a refund type transaction, set the `is_refund` field to true.\n",
        "operationId": "simulateClearing",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/clearing_model"
              }
            }
          },
          "description": "Transaction clearing or refund details"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/simulation_response_model"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Simulate clearing or refund",
        "tags": [
          "Card Transaction Simulations"
        ],
        "x-external": true
      },
      "summary": "Simulate Clearing or Refund"
    },
    "/cards/transaction_simulations/clearing/l2l3": {
      "post": {
        "description": "> 🚧 Alpha\n> This is a Alpha endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.\n\nSimulate a l2l3 type transaction by including the original_transaction_id and enhanced data in your request.\n\nL2L3 events enhance the data of a transaction with the `l2l3` details from your request.\n",
        "operationId": "simulatel2l3",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/l2l3_model"
              }
            }
          },
          "description": "L2l3 details",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/simulation_response_model"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Simulate L2l3",
        "tags": [
          "Card Transaction Simulations"
        ],
        "x-external": true
      },
      "summary": "Simulate L2l3"
    },
    "/cards/transaction_simulations/financial": {
      "post": {
        "description": "A \"financial\" is a transaction message class that includes ATM transactions, PIN-debit transactions, and balance inquiries.\n\nSimulate a `pindebit` type transaction by including the `card_token` and `amount` in your request.\n",
        "operationId": "simulateFinancial",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/financial_request_model"
              }
            }
          },
          "description": "Financial details",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/simulation_response_model"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Simulate financial",
        "tags": [
          "Card Transaction Simulations"
        ],
        "x-external": true
      },
      "summary": "Simulate Financial"
    },
    "/cards/transaction_simulations/financial/advice": {
      "post": {
        "description": "Simulate a financial advice by including the `original_transaction_token` and other authorization details in JSON format in the body of the request.\n",
        "operationId": "simulateFinancialAdvice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/authorization_advice_model"
              }
            }
          },
          "description": "Financial advice details",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/simulation_response_model"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Simulate financial advice",
        "tags": [
          "Card Transaction Simulations"
        ],
        "x-external": true
      },
      "summary": "Simulate Financial Advice"
    },
    "/cards/transaction_simulations/financial/balance_inquiry": {
      "post": {
        "description": "Simulate a `pindebit.balanceinquiry` type transaction by sending a POST request to the `/simulate/financial/balanceinquiry` endpoint.\n",
        "operationId": "simulateBalanceInquiry",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/balance_inquiry_request_model"
              }
            }
          },
          "description": "Balance inquiry details",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/simulation_response_model"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Simulate balance inquiry",
        "tags": [
          "Card Transaction Simulations"
        ],
        "x-external": true
      },
      "summary": "Simulate Balance Inquiry"
    },
    "/cards/transaction_simulations/financial/original_credit": {
      "post": {
        "description": "This Original Credit Transaction (OCT) enables the cardholder to receive funds on the specified card from an external source via the card network. Use this endpoint to simulate a transaction that is similar to a wire transfer and not linked to any purchase.\n\nSimulate an OCT by including the `card_token`, `amount`, `mid`, and `type` in your request.\n",
        "operationId": "simulateOriginalCredit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/original_credit_request_model"
              }
            }
          },
          "description": "OCT details",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/simulation_response_model"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Simulate OCT",
        "tags": [
          "Card Transaction Simulations"
        ],
        "x-external": true
      },
      "summary": "Simulate OCT"
    },
    "/cards/transaction_simulations/financial/withdrawal": {
      "post": {
        "description": "Simulate a `pindebit.atm.withdrawal` type transaction by including the `card_token` and `amount` in your request.\n",
        "operationId": "simulateWithdrawal",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/withdrawal_request_model"
              }
            }
          },
          "description": "ATM withdrawal details",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/simulation_response_model"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Simulate ATM withdrawal",
        "tags": [
          "Card Transaction Simulations"
        ],
        "x-external": true
      },
      "summary": "Simulate ATM Withdrawal"
    },
    "/cards/transaction_simulations/reversal": {
      "post": {
        "description": "A reversal releases the hold that was placed on account funds by an authorization, thus returning the funds to the account.\n\nSimulate an `authorization.reversal` type transaction by including the `original_transaction_token` and `amount` in your request.\n",
        "operationId": "simulateReversal",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/reversal_model"
              }
            }
          },
          "description": "Reversal details",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/simulation_response_model"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Simulate reversal",
        "tags": [
          "Card Transaction Simulations"
        ],
        "x-external": true
      },
      "summary": "Simulate Reversal"
    },
    "/cards/{card_id}": {
      "description": "The Card object represents your customer's spending card.\n",
      "get": {
        "description": "Get the details about a card that has been issued\n",
        "operationId": "getCard",
        "parameters": [
          {
            "$ref": "#/components/parameters/card_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card_response"
                }
              }
            },
            "description": "Card details"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get Card",
        "tags": [
          "Cards"
        ],
        "x-external": true
      },
      "patch": {
        "description": "Integrators can update the card resource to change status, update shipping (if the card hasn't been shipped) or edit metadata.\n",
        "operationId": "updateCard",
        "parameters": [
          {
            "$ref": "#/components/parameters/card_id"
          },
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/card_edit_request"
              }
            }
          },
          "description": "Card edits",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card_response"
                }
              }
            },
            "description": "Card issued"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Update Card",
        "tags": [
          "Cards"
        ],
        "x-external": true
      },
      "summary": "Cards"
    },
    "/cards/{card_id}/barcodes": {
      "get": {
        "description": "This endpoint is for testing environment only to provide access to barcode of a test card\n",
        "operationId": "getCardBarcode",
        "parameters": [
          {
            "$ref": "#/components/parameters/card_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "barcode": {
                      "description": "Barcode of the card",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Barcode"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get Card Barcode",
        "tags": [
          "Cards"
        ],
        "x-external": true
      },
      "summary": "Cards"
    },
    "/cards/{card_id}/changes": {
      "get": {
        "description": "List card change history\n",
        "operationId": "listChanges",
        "parameters": [
          {
            "$ref": "#/components/parameters/card_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card_changes_list"
                }
              }
            },
            "description": "List of card changes"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List Card Changes",
        "tags": [
          "Cards"
        ],
        "x-external": true
      }
    },
    "/cards/{card_id}/client_token": {
      "description": "Client access token for accessing privileged details about a card\n",
      "post": {
        "description": "Create a client access token for interacting with a card.  This token will be used on the client to identify the card for flows like viewing Full PAN or setting the PIN in a PCI compliant manner.\n",
        "operationId": "getClientAccessToken",
        "parameters": [
          {
            "$ref": "#/components/parameters/card_id"
          },
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/client_token"
                }
              }
            },
            "description": "Client token"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get a client token",
        "tags": [
          "Cards"
        ],
        "x-external": true
      },
      "summary": "Get Client Access Token"
    },
    "/cards/{card_id}/digital_wallet_tokens/applepay": {
      "post": {
        "operationId": "createDigitalWalletApple",
        "parameters": [
          {
            "$ref": "#/components/parameters/card_id"
          },
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/apple_digital_wallet_provision_request"
              }
            }
          },
          "description": "Request to provision digital wallet card data to pass to Apple Pay digital wallet. \n\nNB: Cannot be used outside of production.\n",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apple_digital_wallet_provision_response"
                }
              }
            },
            "description": "Digital wallet token provision request data"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create digital wallet token provision request for Apple Pay",
        "tags": [
          "Digital Wallet Tokens"
        ],
        "x-external": true
      }
    },
    "/cards/{card_id}/digital_wallet_tokens/googlepay": {
      "post": {
        "operationId": "createDigitalWalletGoogle",
        "parameters": [
          {
            "$ref": "#/components/parameters/card_id"
          },
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/google_digital_wallet_provision_request"
              }
            }
          },
          "description": "Request to provision digital wallet card data to pass to Google Pay digital wallet.\nNB: Cannot be used outside of production.\n",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google_digital_wallet_provision_response"
                }
              }
            },
            "description": "Digital wallet token provision request data"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create digital wallet token provision request for Google Pay",
        "tags": [
          "Digital Wallet Tokens"
        ],
        "x-external": true
      }
    },
    "/cards/{card_id}/webhook_simulations/fulfillment": {
      "description": "Simulate card fulfillment event\n",
      "post": {
        "description": "This endpoint is for testing environment only to trigger a simulated change in card fulfillment status event\n",
        "operationId": "simulateCardFulfillmentEvent",
        "parameters": [
          {
            "$ref": "#/components/parameters/card_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/simulate_card_fulfillment"
              }
            }
          },
          "description": "Desired simulated fulfillment status change value",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/simulate_card_fulfillment"
                }
              }
            },
            "description": "Simulated fulfillment status change value"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Simulate Card Fulfillment Event",
        "tags": [
          "Card Webhook Simulations"
        ],
        "x-external": true
      },
      "summary": "Card Webhook Simulations"
    },
    "/cash": {
      "description": "The Cashier API allows you to create, retrieve, and update cash transfers.\n",
      "get": {
        "description": "Get all cash transfers\n> 🚧 Alpha > This is an Alpha spec-only endpoint. Feedback from the community is welcome. We may make breaking changes.\n",
        "operationId": "getCashTransfers",
        "parameters": [
          {
            "$ref": "#/components/parameters/cash_from_posting_date_query"
          },
          {
            "$ref": "#/components/parameters/cash_currency_query"
          },
          {
            "$ref": "#/components/parameters/cash_to_effective_date_query"
          },
          {
            "$ref": "#/components/parameters/cash_to_posting_date_query"
          },
          {
            "$ref": "#/components/parameters/cash_customer_id_query"
          },
          {
            "$ref": "#/components/parameters/cash_dc_sign_query"
          },
          {
            "$ref": "#/components/parameters/cash_from_effective_date_query"
          },
          {
            "$ref": "#/components/parameters/cash_max_amount_query"
          },
          {
            "$ref": "#/components/parameters/cash_destination_account_id_query"
          },
          {
            "$ref": "#/components/parameters/cash_is_same_day_query"
          },
          {
            "$ref": "#/components/parameters/cash_id_query"
          },
          {
            "$ref": "#/components/parameters/cash_effective_date_query"
          },
          {
            "$ref": "#/components/parameters/cash_destination_account_number_query"
          },
          {
            "$ref": "#/components/parameters/cash_posting_date_query"
          },
          {
            "$ref": "#/components/parameters/cash_network_status_query"
          },
          {
            "$ref": "#/components/parameters/cash_originating_account_number_query"
          },
          {
            "$ref": "#/components/parameters/cash_subtype_query"
          },
          {
            "$ref": "#/components/parameters/cash_originating_account_id_query"
          },
          {
            "$ref": "#/components/parameters/cash_partner_id_query"
          },
          {
            "$ref": "#/components/parameters/cash_destination_account_owner_name_query"
          },
          {
            "$ref": "#/components/parameters/cash_bank_id_query"
          },
          {
            "$ref": "#/components/parameters/cash_reference_id_query"
          },
          {
            "$ref": "#/components/parameters/cash_status_query"
          },
          {
            "$ref": "#/components/parameters/cash_amount_query"
          },
          {
            "$ref": "#/components/parameters/cash_min_amount_query"
          },
          {
            "$ref": "#/components/parameters/cash_originating_account_owner_name_query"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cash_list"
                }
              }
            },
            "description": "Retrieve all Cashier transfers"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get cash transfers",
        "tags": [
          "Cash Orders and Deposits (alpha)"
        ],
        "x-alpha": true,
        "x-external": true
      },
      "summary": "Cashier"
    },
    "/cash/authorization": {
      "description": "The Cashier API allows you to create, retrieve, and update cash transfers.\n",
      "get": {
        "description": "Get all cash authorizations\n> 🚧 Alpha > This is an Alpha spec-only endpoint. Feedback from the community is welcome. We may make breaking changes.\n",
        "operationId": "getCashAuthorizations",
        "parameters": [
          {
            "$ref": "#/components/parameters/cash_max_amount_query"
          },
          {
            "$ref": "#/components/parameters/cash_destination_account_id_query"
          },
          {
            "$ref": "#/components/parameters/cash_authorization_client_name_query"
          },
          {
            "$ref": "#/components/parameters/authorization_from_order_date_query"
          },
          {
            "$ref": "#/components/parameters/authorization_to_order_date_query"
          },
          {
            "$ref": "#/components/parameters/authorization_id_query"
          },
          {
            "$ref": "#/components/parameters/authorization_order_date_query"
          },
          {
            "$ref": "#/components/parameters/cash_originating_account_id_query"
          },
          {
            "$ref": "#/components/parameters/cash_partner_id_query"
          },
          {
            "$ref": "#/components/parameters/cash_bank_id_query"
          },
          {
            "$ref": "#/components/parameters/cash_authorization_account_number_query"
          },
          {
            "$ref": "#/components/parameters/cash_amount_query"
          },
          {
            "$ref": "#/components/parameters/cash_min_amount_query"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cash_authorization_response_list"
                }
              }
            },
            "description": "Retrieve all cash authorizations"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get cash authorizations",
        "tags": [
          "Cash Orders and Deposits (alpha)"
        ],
        "x-alpha": true,
        "x-external": true
      },
      "post": {
        "description": "Create a new cash authorization\n> 🚧 Alpha > This is an Alpha spec-only endpoint. Feedback from the community is welcome. We may make breaking changes.\n",
        "operationId": "createCashAuthorization",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cash_authorization_post"
              }
            }
          },
          "description": "The cash authorization to be created."
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cash_authorization_response"
                }
              }
            },
            "description": "Successful creation of an cash order authorization"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Cash Authorization for an upcoming transfer",
        "tags": [
          "Cash Orders and Deposits (alpha)"
        ],
        "x-alpha": true,
        "x-external": true
      },
      "summary": "Cashier"
    },
    "/cash/authorization/{id}": {
      "description": "The Cashier API allows you to create, retrieve, and update cash transfers.\n",
      "get": {
        "description": "Get a specific cash order authorization\n> 🚧 Alpha > This is an Alpha spec-only endpoint. Feedback from the community is welcome. We may make breaking changes.\n",
        "operationId": "getCashOrderAuthorization",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorization_id_path"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cash_order_authorization_response"
                }
              }
            },
            "description": "Retrieve a single cash authorization"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get cash order authorization",
        "tags": [
          "Cash Orders and Deposits (alpha)"
        ],
        "x-alpha": true,
        "x-external": true
      },
      "patch": {
        "description": "> 🚧 Alpha > This is an Alpha spec-only endpoint. Feedback from the community is welcome. We may make breaking changes.\n",
        "operationId": "patchCashOrderAuthorization",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorization_id_path"
          },
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cash_order_authorization_patch"
              }
            }
          },
          "description": "Properties of the Cashier order authorization to update."
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cash_order_authorization_response"
                }
              }
            },
            "description": "The updated Cashier transfer."
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Update a cash order authorization",
        "tags": [
          "Cash Orders and Deposits (alpha)"
        ],
        "x-alpha": true,
        "x-external": true
      },
      "summary": "Cashier"
    },
    "/cash/{id}": {
      "description": "The Cashier API allows you to create, retrieve, and update cash transfers.\n",
      "get": {
        "description": "Get a specific cash transfer\n> 🚧 Alpha > This is an Alpha spec-only endpoint. Feedback from the community is welcome. We may make breaking changes.\n",
        "operationId": "getCashTransfer",
        "parameters": [
          {
            "$ref": "#/components/parameters/cash_id_path"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cash_response"
                }
              }
            },
            "description": "Retrieve a single cash transfer"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get cash transfer",
        "tags": [
          "Cash Orders and Deposits (alpha)"
        ],
        "x-alpha": true,
        "x-external": true
      },
      "patch": {
        "description": "To cancel a transfer, update the status to 'CANCELLED'. Only 'INITIATED' or 'PENDING` transfers can be cancelled.\n> 🚧 Alpha > This is an Alpha spec-only endpoint. Feedback from the community is welcome. We may make breaking changes.\n",
        "operationId": "patchCashTransfer",
        "parameters": [
          {
            "$ref": "#/components/parameters/cash_id_path"
          },
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cash_patch"
              }
            }
          },
          "description": "Properties of the Cashier transfer to update."
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cash_response"
                }
              }
            },
            "description": "The updated Cashier transfer."
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Update a cash transfer",
        "tags": [
          "Cash Orders and Deposits (alpha)"
        ],
        "x-alpha": true,
        "x-external": true
      },
      "summary": "Cashier"
    },
    "/customers": {
      "description": "The Customer object represents your customer's identity.  You can then verify the identity of this customer and associate them with other people and accounts\n",
      "get": {
        "description": "Retrieves paginated list of Customers associated with the authorized requester",
        "operationId": "listCustomers",
        "parameters": [
          {
            "$ref": "#/components/parameters/has_accounts_query"
          },
          {
            "$ref": "#/components/parameters/ssn_last_4"
          },
          {
            "$ref": "#/components/parameters/last_name"
          },
          {
            "$ref": "#/components/parameters/email"
          },
          {
            "$ref": "#/components/parameters/first_chosen_name"
          },
          {
            "$ref": "#/components/parameters/classifications"
          },
          {
            "$ref": "#/components/parameters/phone_number"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/customer_sort_by_query"
          },
          {
            "$ref": "#/components/parameters/customer_status"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_list"
                }
              }
            },
            "description": "List of customers"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List Customers",
        "tags": [
          "Customers"
        ],
        "x-external": true
      },
      "post": {
        "description": "The customer object represents your customer's identity. You can then verify the identity of this customer and associate them with other people and accounts.\nNote that if no shipping_address attribute is provided in the request, the shipping_address will be set to a copy of the legal_address.\n",
        "operationId": "createCustomer",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer_in_body"
              }
            }
          },
          "description": "Customer to create",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_in_body"
                }
              }
            },
            "description": "Created customer"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/already_exists"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create a Customer",
        "tags": [
          "Customers"
        ],
        "x-external": true
      },
      "summary": "Customer"
    },
    "/customers/{customer_id}": {
      "description": "This resource represents a customer.  Each customer is identified by a customer `ID`\n",
      "get": {
        "description": "Get Customer based on ID",
        "operationId": "getCustomer",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_path"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_in_body"
                }
              }
            },
            "description": "Customer"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get Customer",
        "tags": [
          "Customers"
        ],
        "x-external": true
      },
      "patch": {
        "description": "Patch fields of customer based on ID\nNote that if:\n  * legal address is provided in the request, AND\n  * shipping_address is not provided in the request, AND\n  * the customer resource does not have shipping_address\n  then shipping_address will be set to a copy of the legal_address.\n",
        "operationId": "patchCustomer",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_path"
          },
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patch_customer"
              }
            }
          },
          "description": "Customer to be patched",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_in_body"
                }
              }
            },
            "description": "Patched customer"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Patch Customer",
        "tags": [
          "Customers"
        ],
        "x-external": true
      },
      "put": {
        "description": "Update customer based on ID\nNote that if no shipping_address attribute is provided in the request, the shipping_address will be set to a copy of the legal_address.\n",
        "operationId": "updateCustomer",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer_in_body"
              }
            }
          },
          "description": "Customer to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_in_body"
                }
              }
            },
            "description": "Updated customer"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Update Customer",
        "tags": [
          "Customers"
        ],
        "x-external": true
      },
      "summary": "Customer"
    },
    "/customers/{customer_id}/disclosures": {
      "description": "Disclosures to be made to customers\n",
      "get": {
        "deprecated": true,
        "description": "Retrieves paginated list of disclosures associated with the authorized requester",
        "operationId": "listDisclosures1",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_path"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/disclosure_response"
                }
              }
            },
            "description": "List of disclosures"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List Disclosures",
        "tags": [
          "Disclosures (deprecated)"
        ],
        "x-external": true,
        "x-status": "deprecated"
      },
      "post": {
        "deprecated": true,
        "description": "Disclosures to be made to customers\n",
        "operationId": "createDisclosure1",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_path"
          },
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/disclosure1"
              }
            }
          },
          "description": "Disclosure to create",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/disclosure1"
                }
              }
            },
            "description": "Created disclosure"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create a Disclosure",
        "tags": [
          "Disclosures (deprecated)"
        ],
        "x-external": true,
        "x-status": "deprecated"
      },
      "summary": "Disclosures"
    },
    "/customers/{customer_id}/verifications": {
      "get": {
        "deprecated": true,
        "description": "List verification results.\n\nThis endpoint will be removed in API v1. Use `GET /v0/verifications?customer_id={customer_id}` instead.\n",
        "operationId": "listVerifications",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_path"
          },
          {
            "$ref": "#/components/parameters/include_history"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_verification_result_list"
                }
              }
            },
            "description": "List of customer verification results."
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List verification results",
        "tags": [
          "KYC Verification (deprecated)"
        ],
        "x-external": true,
        "x-status": "deprecated"
      },
      "post": {
        "deprecated": true,
        "description": "Create a verification result for a customer.\nThis endpoint will be removed in API v1. Use `POST /v0/verifications` instead.\n",
        "operationId": "createCustomerVerificationResult",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_path"
          },
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer_verification_result"
              }
            }
          },
          "description": "Customer verification result to create.",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_verification_result"
                }
              }
            },
            "description": "Created customer verification result."
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create a customer verification result",
        "tags": [
          "KYC Verification (deprecated)"
        ],
        "x-external": true,
        "x-status": "deprecated"
      }
    },
    "/customers/{customer_id}/verifications/{verification_id}": {
      "get": {
        "deprecated": true,
        "description": "Get verification result by ID.\n\nThis endpoint will be removed in API v1. Use `GET /v0/verifications/{verification_id}` instead.\n",
        "operationId": "getVerification",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_path"
          },
          {
            "$ref": "#/components/parameters/verification_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_verification_result"
                }
              }
            },
            "description": "Verification result."
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get verification result",
        "tags": [
          "KYC Verification (deprecated)"
        ],
        "x-external": true,
        "x-status": "deprecated"
      }
    },
    "/customers/{customer_id}/verify": {
      "post": {
        "deprecated": true,
        "description": "Initiate identity verification for a customer and run the specified identity checks.\n\nVerifying a personal customer requires that the following fields already be set:\n* `first_name`\n* `last_name`\n* `dob`\n* `email`\n* `phone_number`\n* `legal_address`\n* `ssn`\n\nThis endpoint will be removed in API v1. Use `POST /v0/verifications/verify` instead.\n",
        "operationId": "verifyCustomer",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_path"
          },
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer_verification"
              }
            }
          },
          "description": "Customer verification request.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_verify_response"
                }
              }
            },
            "description": "Customer verification result."
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Verify a customer's identity",
        "tags": [
          "KYC Verification (deprecated)"
        ],
        "x-external": true,
        "x-status": "deprecated"
      }
    },
    "/customers/{customer_id}/watchlists/alerts/{alert_id}": {
      "description": "Retrieve or update a single watchlist alert. **Deprecated:** use `/v0/monitoring/alerts/{alert_id}` instead.\n",
      "put": {
        "deprecated": true,
        "operationId": "updateWatchlistAlert",
        "parameters": [
          {
            "$ref": "#/components/parameters/alert_id"
          },
          {
            "$ref": "#/components/parameters/customer_id_path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/watchlist_alert"
              }
            }
          },
          "description": "A watchlist body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Watchlist alert was updated"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Update watchlist alert",
        "tags": [
          "Watchlist (deprecated)"
        ],
        "x-external": true,
        "x-status": "deprecated"
      },
      "summary": "Retrieve or update a single watchlist alert."
    },
    "/customers/{customer_id}/watchlists/subscriptions": {
      "description": "Create, list, or retrieve watchlist subscriptions **Deprecated:** use `/v0/monitoring/subscriptions`\n",
      "get": {
        "deprecated": true,
        "operationId": "listWatchlistSubscriptions",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_path"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/watchlist_subscription_list"
                }
              }
            },
            "description": "List of watchlist subscriptions"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List watchlist monitoring subscriptions for a customer",
        "tags": [
          "Watchlist (deprecated)"
        ],
        "x-external": true,
        "x-status": "deprecated"
      },
      "summary": "Subscriptions to watchlist monitoring"
    },
    "/customers/{customer_id}/watchlists/subscriptions/{subscription_id}": {
      "description": "Retrieve or update a single watchlist subscription **Deprecated:** use `/v0/monitoring/subscriptions/{subscription_id}`.\n",
      "put": {
        "deprecated": true,
        "operationId": "updateWatchlistSubscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/subscription_id"
          },
          {
            "$ref": "#/components/parameters/customer_id_path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/watchlist_subscription"
              }
            }
          },
          "description": "Watchlist monitoring subscription to be updated. The only field that matters is `status`; all other fields are ignored.\n",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/watchlist_subscription"
                }
              }
            },
            "description": "Updated watchlist subscription"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Update watchlist monitoring subscription",
        "tags": [
          "Watchlist (deprecated)"
        ],
        "x-external": true,
        "x-status": "deprecated"
      },
      "summary": "Watchlist monitoring subscription"
    },
    "/disclosures": {
      "get": {
        "description": "Retrieves paginated list of disclosures associated with the authorized requester.",
        "operationId": "listDisclosures",
        "parameters": [
          {
            "$ref": "#/components/parameters/business_id_query"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/person_id_query"
          },
          {
            "$ref": "#/components/parameters/acknowledging_person_id"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/disclosure_list"
                }
              }
            },
            "description": "List of disclosures."
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List disclosures",
        "tags": [
          "Disclosures"
        ],
        "x-external": true,
        "x-status": "alpha"
      },
      "post": {
        "description": "Record the fact that a regulatory document was disclosed to a customer.",
        "operationId": "createDisclosure",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/disclosure"
              }
            }
          },
          "description": "Disclosure to create.",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/disclosure"
                }
              }
            },
            "description": "Created disclosure."
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create disclosure record",
        "tags": [
          "Disclosures"
        ],
        "x-external": true,
        "x-status": "alpha"
      }
    },
    "/disclosures/{disclosure_id}": {
      "get": {
        "description": "Get disclosure by ID.",
        "operationId": "getDisclosure",
        "parameters": [
          {
            "$ref": "#/components/parameters/disclosure_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/disclosure"
                }
              }
            },
            "description": "Disclosure representation."
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get disclosure",
        "tags": [
          "Disclosures"
        ],
        "x-external": true,
        "x-status": "alpha"
      }
    },
    "/documents": {
      "get": {
        "description": "Returns a paginated list of documents (metadata only, not contents).",
        "operationId": "listDocuments",
        "parameters": [
          {
            "$ref": "#/components/parameters/related_resource_id"
          },
          {
            "$ref": "#/components/parameters/batch_id"
          },
          {
            "$ref": "#/components/parameters/type"
          },
          {
            "$ref": "#/components/parameters/encryption"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/related_resource_type"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/document_list"
                }
              }
            },
            "description": "List documents."
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List documents",
        "tags": [
          "Documents"
        ],
        "x-external": true,
        "x-permissions": [
          "documents:read"
        ]
      },
      "post": {
        "description": "Store a document in the Synctera platform.\n",
        "operationId": "createDocument",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/document_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/document_response"
                }
              }
            },
            "description": "Created document representation."
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/already_exists"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create a document",
        "tags": [
          "Documents"
        ],
        "x-external": true
      },
      "summary": "Documents"
    },
    "/documents/{document_id}": {
      "delete": {
        "description": "Delete a document. Before a document can be deleted, it must have a deletion_reason explaining why the document was deleted. Use the [PATCH endpoint](ref:updatedocument) to set the `deletion_reason` property.\n",
        "operationId": "deleteDocument",
        "parameters": [
          {
            "$ref": "#/components/parameters/document_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/delete_response"
                }
              }
            },
            "description": "Updated document properties."
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Delete a document",
        "tags": [
          "Documents"
        ],
        "x-external": true
      },
      "get": {
        "description": "Returns the document attributes. Use /documents/{document_id}/contents to get the contents.\n",
        "operationId": "getDocument",
        "parameters": [
          {
            "$ref": "#/components/parameters/document_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/document_response"
                }
              }
            },
            "description": "The requested document."
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get a document",
        "tags": [
          "Documents"
        ],
        "x-external": true,
        "x-permissions": [
          "documents:read"
        ]
      },
      "patch": {
        "description": "Update attributes of the latest document version.",
        "operationId": "updateDocument",
        "parameters": [
          {
            "$ref": "#/components/parameters/document_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/document_patch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/document_response"
                }
              }
            },
            "description": "Updated document properties."
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Update a document",
        "tags": [
          "Documents"
        ],
        "x-external": true
      },
      "summary": "Document"
    },
    "/documents/{document_id}/contents": {
      "get": {
        "description": "Returns the bytes of the requested document.",
        "operationId": "getDocumentContents",
        "parameters": [
          {
            "$ref": "#/components/parameters/document_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "The requested document."
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get contents of latest document version",
        "tags": [
          "Documents"
        ],
        "x-external": true,
        "x-permissions": [
          "documents:read"
        ]
      },
      "summary": "Document"
    },
    "/documents/{document_id}/versions": {
      "post": {
        "description": "Docs\n",
        "operationId": "createDocumentVersion",
        "parameters": [
          {
            "$ref": "#/components/parameters/document_id"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/document_version_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/document_response"
                }
              }
            },
            "description": "Created document representation."
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/already_exists"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create a new document version",
        "tags": [
          "Documents"
        ],
        "x-external": true
      },
      "summary": "Documents"
    },
    "/documents/{document_id}/versions/{document_version}": {
      "get": {
        "description": "Returns the document (attributes). Use /documents/{document_id}/versions/{version}/contents to get the contents.\n",
        "operationId": "getDocumentVersion",
        "parameters": [
          {
            "$ref": "#/components/parameters/document_version"
          },
          {
            "$ref": "#/components/parameters/document_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/document_response"
                }
              }
            },
            "description": "The requested document."
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get a document by version",
        "tags": [
          "Documents"
        ],
        "x-external": true
      },
      "summary": "Document"
    },
    "/documents/{document_id}/versions/{document_version}/contents": {
      "get": {
        "description": "Returns the bytes of the requested document.",
        "operationId": "getDocumentVersionContents",
        "parameters": [
          {
            "$ref": "#/components/parameters/document_version"
          },
          {
            "$ref": "#/components/parameters/document_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "The requested document."
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get document contents by version",
        "tags": [
          "Documents"
        ],
        "x-external": true
      },
      "summary": "Document"
    },
    "/edd": {
      "get": {
        "description": "Get paginated list of EDD",
        "operationId": "listEDD",
        "parameters": [
          {
            "$ref": "#/components/parameters/related_resource_id_query"
          },
          {
            "$ref": "#/components/parameters/related_resource_type_query"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/edd_list"
                }
              }
            },
            "description": "List of EDD based on related resource type"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List EDD",
        "tags": [
          "EDD"
        ],
        "x-external": true,
        "x-status": "beta"
      },
      "post": {
        "description": "Create a EDD",
        "operationId": "createEDD",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_edd_request"
              }
            }
          },
          "description": "EDD to create",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/create_edd_response"
                }
              }
            },
            "description": "Created EDD"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/already_exists"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create a EDD",
        "tags": [
          "EDD"
        ],
        "x-external": true,
        "x-status": "beta"
      },
      "summary": "EDD"
    },
    "/edd/{edd_id}": {
      "delete": {
        "description": "Delete a EDD",
        "operationId": "deleteEDD",
        "parameters": [
          {
            "$ref": "#/components/parameters/edd_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/delete_response"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Delete a EDD",
        "tags": [
          "EDD"
        ],
        "x-external": true,
        "x-status": "beta"
      },
      "get": {
        "description": "Get a EDD",
        "operationId": "getEDD",
        "parameters": [
          {
            "$ref": "#/components/parameters/edd_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/create_edd_response"
                }
              }
            },
            "description": "EDD"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get a EDD",
        "tags": [
          "EDD"
        ],
        "x-external": true,
        "x-status": "beta"
      },
      "summary": "EDD"
    },
    "/eft_ca": {
      "description": "The EFT Canada API allows you to create, retrieve, and update EFT Canada transfers.\n",
      "get": {
        "description": "Get all EFT Canada transfers\n> 🚧 Beta > This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes.\n",
        "operationId": "getEFTCATransfers",
        "parameters": [
          {
            "$ref": "#/components/parameters/eft_ca_id_query"
          },
          {
            "$ref": "#/components/parameters/eft_ca_is_same_day_query"
          },
          {
            "$ref": "#/components/parameters/eft_ca_network_status_query"
          },
          {
            "$ref": "#/components/parameters/eft_ca_subtype_query"
          },
          {
            "$ref": "#/components/parameters/eft_ca_to_posting_date_query"
          },
          {
            "$ref": "#/components/parameters/eft_ca_min_amount_query"
          },
          {
            "$ref": "#/components/parameters/eft_ca_originating_account_owner_name_query"
          },
          {
            "$ref": "#/components/parameters/eft_ca_from_effective_date_query"
          },
          {
            "$ref": "#/components/parameters/eft_ca_originating_account_number_query"
          },
          {
            "$ref": "#/components/parameters/eft_ca_originating_account_id_query"
          },
          {
            "$ref": "#/components/parameters/eft_ca_currency_query"
          },
          {
            "$ref": "#/components/parameters/eft_ca_to_effective_date_query"
          },
          {
            "$ref": "#/components/parameters/eft_ca_dc_sign_query"
          },
          {
            "$ref": "#/components/parameters/eft_ca_posting_date_query"
          },
          {
            "$ref": "#/components/parameters/eft_ca_effective_date_query"
          },
          {
            "$ref": "#/components/parameters/eft_ca_customer_id_query"
          },
          {
            "$ref": "#/components/parameters/eft_ca_amount_query"
          },
          {
            "$ref": "#/components/parameters/eft_ca_destination_account_owner_name_query"
          },
          {
            "$ref": "#/components/parameters/eft_ca_reference_id_query"
          },
          {
            "$ref": "#/components/parameters/eft_ca_from_posting_date_query"
          },
          {
            "$ref": "#/components/parameters/eft_ca_status_query"
          },
          {
            "$ref": "#/components/parameters/eft_ca_partner_id_query"
          },
          {
            "$ref": "#/components/parameters/eft_ca_destination_account_id_query"
          },
          {
            "$ref": "#/components/parameters/eft_ca_destination_account_number_query"
          },
          {
            "$ref": "#/components/parameters/eft_ca_bank_id_query"
          },
          {
            "$ref": "#/components/parameters/eft_ca_max_amount_query"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/eft_ca_list"
                }
              }
            },
            "description": "Retrieve all EFT Canada transfers"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get EFT Canada Transfers",
        "tags": [
          "EFT Canada (Beta)"
        ],
        "x-external": true
      },
      "post": {
        "description": "Create a new EFT Canada transfer\n> 🚧 Beta > This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes.\n",
        "operationId": "createEFTCATransfer",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/eft_ca_create"
              }
            }
          },
          "description": "The EFT Canada transfer to be created."
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/eft_ca_response"
                }
              }
            },
            "description": "Successful creation of an EFT Canada transfer"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create EFT Canada Transfer",
        "tags": [
          "EFT Canada (Beta)"
        ],
        "x-external": true
      },
      "summary": "EFT_CA Transfers"
    },
    "/eft_ca/{id}": {
      "description": "The EFT Canada API allows you to create, retrieve, and update EFT Canada transfers.\n",
      "get": {
        "description": "Get a specific EFT Canada transfer\n> 🚧 Beta > This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes.\n",
        "operationId": "getEFTCATransfer",
        "parameters": [
          {
            "$ref": "#/components/parameters/eft_ca_id_path"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/eft_ca_response"
                }
              }
            },
            "description": "Retrieve a single EFT Canada transfer"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get EFT Canada Transfer",
        "tags": [
          "EFT Canada (Beta)"
        ],
        "x-external": true
      },
      "patch": {
        "description": "To cancel a transfer, update the status to 'CANCELLED'. Only 'INITIATED' or 'PENDING` transfers can be cancelled.\n> 🚧 Beta > This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes.\n",
        "operationId": "patchEFTCATransfer",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          },
          {
            "$ref": "#/components/parameters/eft_ca_id_path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/eft_ca_patch"
              }
            }
          },
          "description": "Properties of the EFT Canada transfer to update."
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/eft_ca_response"
                }
              }
            },
            "description": "The updated EFT Canada transfer."
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Update a EFT Canada Transfer",
        "tags": [
          "EFT Canada (Beta)"
        ],
        "x-external": true
      },
      "summary": "EFT_CA Transfers"
    },
    "/external_accounts": {
      "description": "The External Account resource is used for managing links to accounts that operate outside of the Synctera ecosystem.\n",
      "get": {
        "description": "Returns a list of all external accounts assigned to customers.\n",
        "operationId": "listExternalAccounts",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_query_array"
          },
          {
            "$ref": "#/components/parameters/nickname"
          },
          {
            "$ref": "#/components/parameters/external_account_id_query"
          },
          {
            "$ref": "#/components/parameters/include_history"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/business_id_query_array"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/external_accounts_list"
                }
              }
            },
            "description": "List of external accounts"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List external accounts",
        "tags": [
          "External Accounts"
        ],
        "x-external": true
      },
      "post": {
        "description": "Add an external account for a customer. The account will be created in an unverified state.\n",
        "operationId": "addExternalAccounts",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/add_accounts_request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/external_account"
                }
              }
            },
            "description": "The external account added."
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/already_exists"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Add an external account",
        "tags": [
          "External Accounts"
        ],
        "x-external": true
      },
      "summary": "External Accounts"
    },
    "/external_accounts/access_tokens": {
      "description": "Create a permanent access token for an external account\n",
      "post": {
        "operationId": "createAccessToken",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/external_account_access_token"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/external_account_access_token"
                }
              }
            },
            "description": "New verification link token"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create a permanent access token for an external account",
        "tags": [
          "External Accounts"
        ],
        "x-external": true
      },
      "summary": "External account access token"
    },
    "/external_accounts/add_vendor_accounts": {
      "description": "The External Account resource is used for managing links to accounts that operate outside of the Synctera ecosystem.\n",
      "post": {
        "description": "Add external accounts for a customer through an existing access token. The token must be valid, and the information on the accounts returned by the vendor must correspond to the customer. A success response for this route may include failures if an account could not be added, so it's important that the caller checks the response body.\n",
        "operationId": "addVendorExternalAccounts",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/add_vendor_accounts_request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/add_vendor_accounts_response"
                }
              }
            },
            "description": "Result of adding accounts through the vendor.\n"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Add external accounts through a vendor, such as Plaid.",
        "tags": [
          "External Accounts"
        ],
        "x-external": true
      },
      "summary": "External Accounts"
    },
    "/external_accounts/link_tokens": {
      "description": "Create a link token to verify an external account\n",
      "post": {
        "operationId": "createVerificationLinkToken",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/external_account_link_token"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/external_account_link_token"
                }
              }
            },
            "description": "New verification link token"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create a link token to verify an external account",
        "tags": [
          "External Accounts"
        ],
        "x-external": true
      },
      "summary": "External account verification link token"
    },
    "/external_accounts/sync_vendor_accounts": {
      "description": "The External Account resource is used for managing links to accounts that operate outside of the Synctera ecosystem.\n",
      "post": {
        "description": "Sync external accounts for a customer through an existing access token. The token must be valid, and the information on the accounts returned by the vendor must correspond to the customer. A success response for this route may include failures if an account could not be added and deletions if the account is removed by the end user, so it's important that the caller checks the response body.\n",
        "operationId": "syncVendorExternalAccounts",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/add_vendor_accounts_request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/add_vendor_accounts_response"
                }
              }
            },
            "description": "Result of syncing accounts through the vendor.\n"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Sync external accounts through a vendor, such as Plaid.",
        "tags": [
          "External Accounts"
        ],
        "x-external": true
      },
      "summary": "External Accounts"
    },
    "/external_accounts/{external_account_id}": {
      "delete": {
        "description": "Deletes an external account, given an external account ID. If no accounts left, the access token to the financial institution will be removed\n",
        "operationId": "deleteExternalAccount",
        "parameters": [
          {
            "$ref": "#/components/parameters/external_account_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/delete_response"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "409": {
            "$ref": "#/components/responses/already_exists"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Delete an external account",
        "tags": [
          "External Accounts"
        ],
        "x-external": true
      },
      "description": "The External Account resource is used for managing links to accounts that operate outside of the Synctera ecosystem.\n",
      "get": {
        "description": "Returns an external account, given an external account ID.\n",
        "operationId": "getExternalAccount",
        "parameters": [
          {
            "$ref": "#/components/parameters/external_account_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/external_account"
                }
              }
            },
            "description": "The external account"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get an external account",
        "tags": [
          "External Accounts"
        ],
        "x-external": true
      },
      "patch": {
        "description": "Edits an unverified external account, given an external account ID.\n",
        "operationId": "updateExternalAccount",
        "parameters": [
          {
            "$ref": "#/components/parameters/external_account_id"
          },
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patch_external_account"
              }
            }
          },
          "description": "External account to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/external_account"
                }
              }
            },
            "description": "Updated external account"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "409": {
            "$ref": "#/components/responses/already_exists"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Patch an external account",
        "tags": [
          "External Accounts"
        ],
        "x-external": true
      },
      "summary": "External Accounts"
    },
    "/external_accounts/{external_account_id}/balance": {
      "description": "The External Account resource is used for managing links to accounts that operate outside of the Synctera ecosystem.\n",
      "get": {
        "description": "Given an external account ID, return the account balances in real time.\n\nThe data returned by this endpoint is always fetched synchronously; it is not cached by Synctera.\nAs a result, response latency is often high.\n",
        "operationId": "getExternalAccountBalance",
        "parameters": [
          {
            "$ref": "#/components/parameters/external_account_id"
          },
          {
            "$ref": "#/components/parameters/max_age"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/external_account_balance"
                }
              }
            },
            "description": "A collection of fields that represent funds available in the account. The\nrelationship between these fields is complex and can depend on geography and/or\nthe external financial institution. You should not assume that all of these fields\nwill be set, and you should not expect consistent results for different customers\nat different financial institutions.\n\nIf you use Plaid as your backing vendor, see https://plaid.com/docs/api/products/balance/\nfor precise details on when these fields are set and how they relate.\n"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get external account balances",
        "tags": [
          "External Accounts"
        ],
        "x-external": true
      },
      "summary": "External Accounts"
    },
    "/external_accounts/{external_account_id}/refresh_transactions": {
      "description": "The External Account resource is used for managing links to accounts that operate outside of the Synctera ecosystem.\n",
      "post": {
        "description": "Sync external accounts for a customer through an existing access token. The token must be valid. Accounts linked in the same auth session (having the same access token) will be synced together.\n",
        "operationId": "externalAccountRefreshTransactions",
        "parameters": [
          {
            "$ref": "#/components/parameters/external_account_id"
          },
          {
            "$ref": "#/components/parameters/restricted"
          },
          {
            "$ref": "#/components/parameters/force_vendor_refresh"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/external_account_transaction_refresh_response"
                }
              }
            },
            "description": "Result of syncing accounts through the vendor.\n"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Sync external account transactions through a vendor, such as Plaid",
        "tags": [
          "External Accounts"
        ],
        "x-external": true
      },
      "summary": "External Accounts"
    },
    "/external_accounts/{external_account_id}/transactions": {
      "description": "The External Account resource is used for managing links to accounts that operate outside of the Synctera ecosystem.\n",
      "get": {
        "description": "Returns a list of transactions on from the external account, given an external account ID. Maximum 500 transctions will be returned.\n",
        "operationId": "getExternalAccountTransactions",
        "parameters": [
          {
            "description": "Date range filtering for transactions. Date is inclusive. Date must be in UTC.",
            "in": "query",
            "name": "start_date",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/external_account_id"
          },
          {
            "description": "Date range filtering for transactions. Date is exclusive. Date must be in UTC.",
            "in": "query",
            "name": "end_date",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/external_accounts_transaction_list"
                }
              }
            },
            "description": "The external account"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List transactions of a given external account",
        "tags": [
          "External Accounts"
        ],
        "x-external": true
      },
      "summary": "External Accounts"
    },
    "/external_cards": {
      "get": {
        "description": "Get a paginated list of External Cards\n",
        "operationId": "listExternalCards",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_query"
          },
          {
            "$ref": "#/components/parameters/business_id_query1"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/external_card_status_query"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/external_card_list_response"
                }
              }
            },
            "description": "External Card list"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List External Cards",
        "tags": [
          "External Cards"
        ],
        "x-external": true
      }
    },
    "/external_cards/authenticate_3ds": {
      "post": {
        "description": "Validates the results of an External Card Transfer 3DS authentication challenge.\n",
        "operationId": "authenticate3DS",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/authenticate_3ds_request"
              }
            }
          },
          "description": "Details of the External Card Transfer 3DS authentication challenge validation.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authenticate_3ds_response"
                }
              }
            },
            "description": "External Card Transfer 3DS authentication challenge validation complete"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Authenticate 3DS",
        "tags": [
          "External Cards"
        ],
        "x-external": true
      }
    },
    "/external_cards/initialize_3ds": {
      "post": {
        "description": "Initializes an External Card Transfer 3DS authentication.\n",
        "operationId": "initialize3DS",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/initialize_3ds_request"
              }
            }
          },
          "description": "Details of the External Card Transfer 3DS authentication to initialize.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/initialize_3ds_response"
                }
              }
            },
            "description": "External Card Transfer 3DS authentication initialized"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Initialize 3DS",
        "tags": [
          "External Cards"
        ],
        "x-external": true
      }
    },
    "/external_cards/lookup_3ds": {
      "post": {
        "description": "Using device collection data, performs a lookup for an External Card Transfer 3DS authentication. The results will indicate whether the transfer is successfully authenticated or if a 3DS challenge is required.\n",
        "operationId": "lookup3DS",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/lookup_3ds_request"
              }
            }
          },
          "description": "Details of the External Card Transfer 3DS authentication lookup.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/lookup_3ds_response"
                }
              }
            },
            "description": "External Card Transfer 3DS authentication lookup complete"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Lookup 3DS",
        "tags": [
          "External Cards"
        ],
        "x-external": true
      }
    },
    "/external_cards/tokens": {
      "post": {
        "description": "Create an External Card from token. The token and cardholder name are obtained through the iFrame. The token must be used within 5 minutes or else it will expire. If a Business ID is provided, address verification will be performed against the legal address of the business. Otherwise, the legal address of the Customer will be used. In either case, the name of the Customer will be used to match against the cardholder name.\n\nEach unique External Card is limited to a single Customer, so once an External Card is created for a Customer, it cannot be used for any other Customers, even if the card is deleted. Given there is a limited number of test cards, to allow easier testing, this restriction is relaxed in the sandbox environment.\n",
        "operationId": "createExternalCardFromToken",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/external_card_request"
              }
            }
          },
          "description": "Details of the External Card to create",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/external_card_response"
                }
              }
            },
            "description": "External Card created"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create External Card from token",
        "tags": [
          "External Cards"
        ],
        "x-external": true
      }
    },
    "/external_cards/transfers": {
      "get": {
        "description": "Get a paginated list of External Card Transfers\n",
        "operationId": "listExternalCardTransfers",
        "parameters": [
          {
            "explode": false,
            "in": "query",
            "name": "type",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/transfer_type"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "explode": false,
            "in": "query",
            "name": "amount",
            "schema": {
              "items": {
                "type": "integer"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "explode": false,
            "in": "query",
            "name": "three_ds_id",
            "schema": {
              "items": {
                "format": "uuid",
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "explode": false,
            "in": "query",
            "name": "originating_account_id",
            "schema": {
              "items": {
                "format": "uuid",
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "explode": false,
            "in": "query",
            "name": "account_id",
            "schema": {
              "items": {
                "format": "uuid",
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "from_creation_time",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "explode": false,
            "in": "query",
            "name": "status",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/transfer_status"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "explode": false,
            "in": "query",
            "name": "originating_customer_id",
            "schema": {
              "items": {
                "format": "uuid",
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "from_last_updated_time",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "from_amount",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "to_last_updated_time",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "to_amount",
            "schema": {
              "type": "integer"
            }
          },
          {
            "explode": false,
            "in": "query",
            "name": "tenant",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/tenant_id"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "explode": false,
            "in": "query",
            "name": "external_card_id",
            "schema": {
              "items": {
                "format": "uuid",
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "explode": false,
            "in": "query",
            "name": "transaction_id",
            "schema": {
              "items": {
                "format": "uuid",
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "explode": false,
            "in": "query",
            "name": "original_transfer_id",
            "schema": {
              "items": {
                "format": "uuid",
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "to_creation_time",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "payment_account_reference",
            "schema": {
              "type": "string"
            }
          },
          {
            "explode": false,
            "in": "query",
            "name": "customer_id",
            "schema": {
              "items": {
                "format": "uuid",
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "explode": false,
            "in": "query",
            "name": "id",
            "schema": {
              "items": {
                "format": "uuid",
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transfer_list_response"
                }
              }
            },
            "description": "External Card Transfer list"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List External Card Transfers",
        "tags": [
          "External Cards"
        ],
        "x-external": true
      },
      "post": {
        "description": "Create an External Card Transfer\n",
        "operationId": "createExternalCardTransfer",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/transfer_request"
              }
            }
          },
          "description": "Details of the External Card Transfer to create",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transfer_response"
                }
              }
            },
            "description": "External Card Transfer created"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create External Card Transfer",
        "tags": [
          "External Cards"
        ],
        "x-external": true
      }
    },
    "/external_cards/transfers/{transfer_id}": {
      "get": {
        "description": "Get an External Card Transfer\n",
        "operationId": "getExternalCardTransfer",
        "parameters": [
          {
            "$ref": "#/components/parameters/transfer_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transfer_response"
                }
              }
            },
            "description": "External Card Transfer details"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get External Card Transfer",
        "tags": [
          "External Cards"
        ],
        "x-external": true
      }
    },
    "/external_cards/transfers/{transfer_id}/reversals": {
      "post": {
        "description": "Create an External Card Transfer Reversal\n",
        "operationId": "createExternalCardTransferReversal",
        "parameters": [
          {
            "$ref": "#/components/parameters/transfer_id"
          },
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/transfer_reversal_request"
              }
            }
          },
          "description": "Details of the External Card Transfer Reversal to create",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transfer_response"
                }
              }
            },
            "description": "External Card Transfer Reversal created"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create External Card Transfer Reversal",
        "tags": [
          "External Cards"
        ],
        "x-external": true
      }
    },
    "/external_cards/{external_card_id}": {
      "delete": {
        "description": "Delete an External Card",
        "operationId": "deleteExternalCard",
        "parameters": [
          {
            "$ref": "#/components/parameters/external_card_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/delete_response"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Delete External Card",
        "tags": [
          "External Cards"
        ],
        "x-external": true
      },
      "get": {
        "description": "Get an External Card\n",
        "operationId": "getExternalCard",
        "parameters": [
          {
            "$ref": "#/components/parameters/external_card_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/external_card_response"
                }
              }
            },
            "description": "External Card details"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get External Card",
        "tags": [
          "External Cards"
        ],
        "x-external": true
      },
      "patch": {
        "description": "Update External Card data\n",
        "operationId": "updateExternalCard",
        "parameters": [
          {
            "$ref": "#/components/parameters/external_card_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/external_card_update_request"
              }
            }
          },
          "description": "Fields to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/external_card_response"
                }
              }
            },
            "description": "External Card details"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Update External Card",
        "tags": [
          "External Cards"
        ],
        "x-external": true
      }
    },
    "/institutions": {
      "description": "Institutions refers to a financial institution, such as a bank or credit union.\n> 🚧 Beta > This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes.\n",
      "get": {
        "operationId": "getInstitutions",
        "parameters": [
          {
            "$ref": "#/components/parameters/country_codes"
          },
          {
            "$ref": "#/components/parameters/routing_numbers"
          },
          {
            "$ref": "#/components/parameters/page_token"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/institution_list"
                }
              }
            },
            "description": "list of institutions"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Retrieve a list of institutions",
        "tags": [
          "Institutions (Beta)"
        ],
        "x-external": true
      },
      "summary": "Institutions"
    },
    "/internal_accounts": {
      "description": "The internal account resource is used for managing links to internal accounts where the funds are managed by integrators.\n",
      "get": {
        "description": "Returns a list of all internal accounts.\n",
        "operationId": "listInternalAccounts",
        "parameters": [
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/sort_by"
          },
          {
            "$ref": "#/components/parameters/internal_account_id_query"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/internal_accounts_list"
                }
              }
            },
            "description": "List of internal accounts"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List internal accounts",
        "tags": [
          "Internal Accounts"
        ],
        "x-external": true,
        "x-permissions": [
          "accounts:read"
        ]
      },
      "post": {
        "description": "Add an internal account. \nNote: In production, this action can only be performed by Synctera administrators.\n",
        "operationId": "addInternalAccounts",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/internal_account_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/internal_account_response"
                }
              }
            },
            "description": "The internal account added."
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/already_exists"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Add internal accounts",
        "tags": [
          "Internal Accounts"
        ],
        "x-external": true
      },
      "summary": "Internal Accounts"
    },
    "/internal_accounts/{internal_account_id}": {
      "get": {
        "description": "Returns an internal account by id\n",
        "operationId": "getInternalAccounts",
        "parameters": [
          {
            "$ref": "#/components/parameters/internal_account_id_path"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/internal_account_response"
                }
              }
            },
            "description": "Internal Account"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get internal account by id",
        "tags": [
          "Internal Accounts"
        ],
        "x-external": true
      },
      "patch": {
        "description": "Patch internal account.\n\nNote: In production, this action can only be performed by Synctera administrators.\n",
        "operationId": "patchInternalAccount",
        "parameters": [
          {
            "$ref": "#/components/parameters/internal_account_id_path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/internal_account_patch"
              }
            }
          },
          "description": "Internal Account fields to be patched",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/internal_account_response"
                }
              }
            },
            "description": "Updated internal account"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "461": {
            "$ref": "#/components/responses/account_closed"
          }
        },
        "summary": "Patch internal account",
        "tags": [
          "Internal Accounts"
        ],
        "x-external": true
      },
      "summary": "Internal Accounts"
    },
    "/licenses": {
      "description": "License could be a business permit, like a cannabis business license for example.\n",
      "get": {
        "operationId": "listLicenses",
        "parameters": [
          {
            "$ref": "#/components/parameters/business_id_query"
          },
          {
            "$ref": "#/components/parameters/customer_id_query_one"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/license_list"
                }
              }
            },
            "description": "list of licenses"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "list licenses",
        "tags": [
          "Licenses"
        ],
        "x-external": true,
        "x-permissions": [
          "customers:read"
        ]
      },
      "post": {
        "description": "License represents a business permit that will be verified\n",
        "operationId": "createLicenses",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/post_license"
              }
            }
          },
          "description": "license to be created",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/response_license"
                }
              }
            },
            "description": "Created license representation."
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create a license and associate it with a business",
        "tags": [
          "Licenses"
        ],
        "x-external": true,
        "x-permissions": [
          "customers:read",
          "customers:write"
        ]
      },
      "summary": "Licenses"
    },
    "/licenses/{license_id}": {
      "description": "This resource represents a license record.\n",
      "get": {
        "description": "Get license record by id",
        "operationId": "getLicense",
        "parameters": [
          {
            "$ref": "#/components/parameters/license_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/response_license"
                }
              }
            },
            "description": "license information"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get license",
        "tags": [
          "Licenses"
        ],
        "x-external": true,
        "x-permissions": [
          "customers:read"
        ]
      },
      "patch": {
        "description": "Update a License by ID.",
        "operationId": "patchLicense",
        "parameters": [
          {
            "$ref": "#/components/parameters/license_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/license_patch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/response_license"
                }
              }
            },
            "description": "Updated License representation."
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Patch License",
        "tags": [
          "Licenses"
        ],
        "x-external": true,
        "x-permissions": [
          "customers:read",
          "customers:write"
        ]
      },
      "summary": "Licenses"
    },
    "/monitoring/alerts": {
      "get": {
        "operationId": "listAlerts",
        "parameters": [
          {
            "$ref": "#/components/parameters/uuid_query"
          },
          {
            "$ref": "#/components/parameters/business_id_query"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/person_id_query"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/monitoring_alert_list"
                }
              }
            },
            "description": "List of alerts."
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List monitoring alerts",
        "tags": [
          "Monitoring"
        ],
        "x-external": true,
        "x-status": "alpha"
      }
    },
    "/monitoring/alerts/{alert_id}": {
      "get": {
        "operationId": "getAlert",
        "parameters": [
          {
            "$ref": "#/components/parameters/monitoring_alert_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/monitoring_alert"
                }
              }
            },
            "description": "A single monitoring alert."
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Retrieve a monitoring alert",
        "tags": [
          "Monitoring"
        ],
        "x-external": true,
        "x-status": "alpha"
      },
      "patch": {
        "operationId": "updateAlert",
        "parameters": [
          {
            "$ref": "#/components/parameters/monitoring_alert_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/monitoring_alert"
              }
            }
          },
          "description": "Monitoring alert to update.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated monitoring alert."
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Update a monitoring alert",
        "tags": [
          "Monitoring"
        ],
        "x-external": true,
        "x-status": "alpha"
      }
    },
    "/monitoring/subscriptions": {
      "get": {
        "operationId": "listSubscriptions",
        "parameters": [
          {
            "$ref": "#/components/parameters/uuid_query"
          },
          {
            "$ref": "#/components/parameters/business_id_query"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/person_id_query"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/monitoring_subscription_list"
                }
              }
            },
            "description": "List of monitoring subscriptions."
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List monitoring subscriptions",
        "tags": [
          "Monitoring"
        ],
        "x-external": true,
        "x-status": "alpha"
      },
      "post": {
        "description": "This endpoint is rarely needed. Since August 2022, watchlist monitoring is automatically enabled for all businesses and customers who are verified (KYC/KYB) through Synctera's platform.\n",
        "operationId": "createSubscription",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/monitoring_subscription"
              }
            }
          },
          "description": "The monitoring subscription.",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/monitoring_subscription"
                }
              }
            },
            "description": "The new monitoring subscription."
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Subscribe a customer or business to monitoring",
        "tags": [
          "Monitoring"
        ],
        "x-external": true,
        "x-status": "alpha"
      }
    },
    "/monitoring/subscriptions/{subscription_id}": {
      "delete": {
        "operationId": "deleteSubscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/monitoring_subscription_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/delete_response"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Delete monitoring subscription",
        "tags": [
          "Monitoring"
        ],
        "x-external": true,
        "x-status": "alpha"
      },
      "get": {
        "operationId": "getSubscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/monitoring_subscription_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/monitoring_subscription"
                }
              }
            },
            "description": "A single monitoring subscription."
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Retrieve monitoring subscription",
        "tags": [
          "Monitoring"
        ],
        "x-external": true,
        "x-status": "alpha"
      }
    },
    "/mx/merchants/{merchant_guid}": {
      "get": {
        "description": "Returns information about a particular merchant from MX, such as a logo, name, and website.\n",
        "operationId": "mxReadMerchant",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant_guid"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/merchant_response"
                }
              }
            },
            "description": "Pending Transaction"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get merchant from MX",
        "tags": [
          "Merchants"
        ],
        "x-external": true
      },
      "summary": "MX"
    },
    "/notes": {
      "get": {
        "description": "Get paginated list of notes",
        "operationId": "listNotes",
        "parameters": [
          {
            "$ref": "#/components/parameters/author_user_id_query"
          },
          {
            "$ref": "#/components/parameters/related_resource_id_query1"
          },
          {
            "$ref": "#/components/parameters/note_id_query"
          },
          {
            "$ref": "#/components/parameters/related_resource_type_query1"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/tenant_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/note_list"
                }
              }
            },
            "description": "List of notes"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List notes",
        "tags": [
          "Notes"
        ],
        "x-external": true
      },
      "post": {
        "description": "Create a note",
        "operationId": "createNote",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/note_create"
              }
            }
          },
          "description": "note to create",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/note_response"
                }
              }
            },
            "description": "Created note"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/already_exists"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create a note",
        "tags": [
          "Notes"
        ],
        "x-external": true
      },
      "summary": "Notes"
    },
    "/notes/{note_id}": {
      "patch": {
        "description": "Update a Note by ID.",
        "operationId": "patchNote",
        "parameters": [
          {
            "$ref": "#/components/parameters/note_id_path"
          },
          {
            "$ref": "#/components/parameters/idempotency_key"
          },
          {
            "$ref": "#/components/parameters/related_resource_type_query1"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patch_note"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/note_response"
                }
              }
            },
            "description": "Updated Note representation."
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Patch Note",
        "tags": [
          "Notes"
        ],
        "x-external": true
      }
    },
    "/payment_schedules": {
      "get": {
        "description": "Get paginated list of payment schedules",
        "operationId": "listPaymentSchedules",
        "parameters": [
          {
            "explode": false,
            "in": "query",
            "name": "payment_schedule_id",
            "schema": {
              "items": {
                "format": "uuid",
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "explode": false,
            "in": "query",
            "name": "originating_customer",
            "schema": {
              "items": {
                "format": "uuid",
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "to_next_schedule_date",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "explode": false,
            "in": "query",
            "name": "receiving_account",
            "schema": {
              "items": {
                "format": "uuid",
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "to_next_execution_date",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "explode": false,
            "in": "query",
            "name": "receiving_customer",
            "schema": {
              "items": {
                "format": "uuid",
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Case insensitive wildcard search for description, wildcards can be specified with '*'. Wildcards at both the start and the end of the input is assumed.",
            "in": "query",
            "name": "description_like",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "from_next_schedule_date",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "explode": false,
            "in": "query",
            "name": "account_id",
            "schema": {
              "items": {
                "format": "uuid",
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "from_creation_time",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "explode": false,
            "in": "query",
            "name": "description",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "from_last_updated_time",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "from_next_execution_date",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "in_queue",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "to_last_updated_time",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "explode": false,
            "in": "query",
            "name": "tenant",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/tenant_id"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "explode": false,
            "in": "query",
            "name": "originating_account",
            "schema": {
              "items": {
                "format": "uuid",
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "explode": false,
            "in": "query",
            "name": "sort_by",
            "schema": {
              "items": {
                "enum": [
                  "creation_time:asc",
                  "creation_time:desc",
                  "payment_type:asc",
                  "payment_type:desc"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "explode": false,
            "in": "query",
            "name": "status",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/payment_schedule_status"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "in": "query",
            "name": "to_creation_time",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "explode": false,
            "in": "query",
            "name": "customer_id",
            "schema": {
              "items": {
                "format": "uuid",
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "explode": false,
            "in": "query",
            "name": "id",
            "schema": {
              "items": {
                "format": "uuid",
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment_schedule_list"
                }
              }
            },
            "description": "List of payment schedules"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List payment schedules",
        "tags": [
          "PaymentSchedules"
        ],
        "x-external": true,
        "x-permissions": [
          "sub_ledger:read"
        ]
      },
      "post": {
        "description": "Create a payment schedule",
        "operationId": "createPaymentSchedule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/payment_schedule"
              }
            }
          },
          "description": "payment schedule to create",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment_schedule_response"
                }
              }
            },
            "description": "Created payment schedule"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/already_exists"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create a payment schedule",
        "tags": [
          "PaymentSchedules"
        ],
        "x-external": true
      },
      "summary": "PaymentSchedules"
    },
    "/payment_schedules/payments": {
      "get": {
        "description": "Get paginated list of payments",
        "operationId": "listPayments",
        "parameters": [
          {
            "$ref": "#/components/parameters/id_query"
          },
          {
            "$ref": "#/components/parameters/account_id_query1"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/payment_schedule_id_query"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/customer_id_query1"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment_list"
                }
              }
            },
            "description": "List of payment schedules"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List payments",
        "tags": [
          "PaymentSchedules"
        ],
        "x-external": true,
        "x-permissions": [
          "sub_ledger:read"
        ]
      },
      "summary": "PaymentSchedules"
    },
    "/payment_schedules/{payment_schedule_id}": {
      "patch": {
        "description": "Update a payment schedule",
        "operationId": "patchPaymentSchedule",
        "parameters": [
          {
            "$ref": "#/components/parameters/schedule_id_path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patch_payment_schedule"
              }
            }
          },
          "description": "payment schedule to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment_schedule_response"
                }
              }
            },
            "description": "Updated payment schedule"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "409": {
            "$ref": "#/components/responses/already_exists"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Update a payment schedule",
        "tags": [
          "PaymentSchedules"
        ],
        "x-external": true
      }
    },
    "/persons": {
      "get": {
        "description": "Retrieves paginated list of persons associated with the authorized requester.",
        "operationId": "listPersons",
        "parameters": [
          {
            "$ref": "#/components/parameters/person_sort_by_query"
          },
          {
            "$ref": "#/components/parameters/is_customer"
          },
          {
            "$ref": "#/components/parameters/uuid_query"
          },
          {
            "$ref": "#/components/parameters/has_accounts_query"
          },
          {
            "$ref": "#/components/parameters/ssn_last_4"
          },
          {
            "$ref": "#/components/parameters/dob"
          },
          {
            "$ref": "#/components/parameters/last_name"
          },
          {
            "$ref": "#/components/parameters/person_status"
          },
          {
            "$ref": "#/components/parameters/email"
          },
          {
            "$ref": "#/components/parameters/first_chosen_name"
          },
          {
            "$ref": "#/components/parameters/classifications"
          },
          {
            "$ref": "#/components/parameters/verification_status"
          },
          {
            "$ref": "#/components/parameters/phone_number"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/include_console_users"
          },
          {
            "$ref": "#/components/parameters/ban_status"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/person_list"
                }
              }
            },
            "description": "List of persons."
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List persons",
        "tags": [
          "Persons"
        ],
        "x-external": true,
        "x-status": "alpha"
      },
      "post": {
        "description": "Create a person who may act as a personal customer or a director/officer/owner of a business. You can then verify the identity of this customer and associate them with other people and accounts.\nNote that if no shipping_address attribute is provided in the request, the shipping_address will be set to a copy of the legal_address.\n",
        "operationId": "createPerson",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/post_person"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/response_person"
                }
              }
            },
            "description": "Created person representation."
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/already_exists"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create a person",
        "tags": [
          "Persons"
        ],
        "x-external": true,
        "x-status": "alpha"
      },
      "summary": "Persons"
    },
    "/persons/personal_ids": {
      "post": {
        "description": "Create a personal identifier, e.g. SSN, for this customer",
        "operationId": "createPersonalId",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/post_personal_id_w_cust"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/response_personal_id_w_cust"
                }
              }
            },
            "description": "Created personal identifier."
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create a personal identifier",
        "tags": [
          "Persons"
        ],
        "x-external": true
      },
      "summary": "Personal Identifiers"
    },
    "/persons/personal_ids/{personal_id_id}": {
      "delete": {
        "description": "Delete personal identifier\n",
        "operationId": "DeletePersonalId",
        "parameters": [
          {
            "$ref": "#/components/parameters/personal_id_id_path"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/delete_response"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          }
        },
        "summary": "Delete a personal identifier",
        "tags": [
          "Persons"
        ],
        "x-external": true
      },
      "patch": {
        "description": "Update a personal identifier, e.g. SSN, for this customer",
        "operationId": "updatePersonalId",
        "parameters": [
          {
            "$ref": "#/components/parameters/personal_id_id_path"
          },
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patch_personal_id"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/response_personal_id_w_cust"
                }
              }
            },
            "description": "Created personal identifier."
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Update a personal identifier",
        "tags": [
          "Persons"
        ],
        "x-external": true
      },
      "summary": "Personal Identifiers"
    },
    "/persons/{person_id}": {
      "get": {
        "description": "Get person by ID.",
        "operationId": "getPerson",
        "parameters": [
          {
            "$ref": "#/components/parameters/person_id_path"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/response_person"
                }
              }
            },
            "description": "Person representation."
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get person",
        "tags": [
          "Persons"
        ],
        "x-external": true,
        "x-status": "alpha"
      },
      "patch": {
        "description": "Update person by ID.\n\nNote that if:\n* legal address is provided in the request, AND\n* shipping_address is not provided in the request, AND\n* the customer resource does not have shipping_address\nthen shipping_address will be set to a copy of the legal_address.\n",
        "operationId": "updatePerson",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          },
          {
            "$ref": "#/components/parameters/person_id_path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patch_person"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/response_person"
                }
              }
            },
            "description": "Updated person representation."
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Update person",
        "tags": [
          "Persons"
        ],
        "x-external": true,
        "x-status": "alpha"
      },
      "summary": "Persons"
    },
    "/rdc/deposits": {
      "description": "The Remote Check Deposits collection represents all the deposits made using remote deposit capture associated with an account\n",
      "get": {
        "description": "Retrieves a paginated list of the deposits made using remote deposit capture associated with an account",
        "operationId": "listRdcDeposits",
        "parameters": [
          {
            "in": "query",
            "name": "to_deposit_amount",
            "schema": {
              "type": "integer"
            }
          },
          {
            "explode": false,
            "in": "query",
            "name": "deposit_check_number",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "business_id",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "explode": false,
            "in": "query",
            "name": "tenant",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/tenant_id"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "explode": false,
            "in": "query",
            "name": "deposit_amount",
            "schema": {
              "items": {
                "type": "integer"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "from_deposit_amount",
            "schema": {
              "type": "integer"
            }
          },
          {
            "explode": false,
            "in": "query",
            "name": "deposit_currency",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "in": "query",
            "name": "person_id",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "explode": false,
            "in": "query",
            "name": "id",
            "schema": {
              "items": {
                "format": "uuid",
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deposit_list"
                }
              }
            },
            "description": "List of deposits made with remote deposit capture"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          }
        },
        "summary": "List Remote Check Deposits",
        "tags": [
          "Remote Check Deposit (beta)"
        ],
        "x-external": true
      },
      "post": {
        "description": "Create a new deposit using remote deposit capture to an account\n",
        "operationId": "createRdcDeposit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/deposit_post"
              }
            }
          },
          "description": "Attributes of the Remote Check Deposit to create"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deposit_get"
                }
              }
            },
            "description": "Successful creation of a deposit using remote deposit capture"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "422": {
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "The submitted deposit has been flagged as a duplicate submission"
          }
        },
        "summary": "Create a Remote Check Deposit",
        "tags": [
          "Remote Check Deposit (beta)"
        ],
        "x-external": true
      },
      "summary": "Remote Check Deposits"
    },
    "/rdc/deposits/{deposit_id}": {
      "description": "The Remote Check Deposit represents one deposit made using remote deposit capture associated with an account\n",
      "get": {
        "description": "Retrieves one deposit made using remote deposit capture associated with an account",
        "operationId": "getRdcDeposit",
        "parameters": [
          {
            "$ref": "#/components/parameters/deposit_id_path"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deposit_get"
                }
              }
            },
            "description": "Successful retrieval of a Remote Check Deposit"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          }
        },
        "summary": "Get Remote Check Deposit",
        "tags": [
          "Remote Check Deposit (beta)"
        ],
        "x-external": true
      },
      "summary": "Remote Check Deposit by Id"
    },
    "/relationships": {
      "get": {
        "description": "Retrieves paginated list of relationships viewable by the authorized requester.",
        "operationId": "listRelationships",
        "parameters": [
          {
            "$ref": "#/components/parameters/to_business_id_query"
          },
          {
            "$ref": "#/components/parameters/from_person_id_query"
          },
          {
            "$ref": "#/components/parameters/relationship_type"
          },
          {
            "$ref": "#/components/parameters/from_business_id_query"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/relationships_list"
                }
              }
            },
            "description": "Relationship representation."
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List relationships",
        "tags": [
          "Relationships"
        ],
        "x-external": true,
        "x-status": "alpha"
      },
      "post": {
        "description": "Create a party relationship.",
        "operationId": "createRelationship",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/relationship_in"
              }
            }
          },
          "description": "Party relationship to create.",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/relationship_in"
                }
              }
            },
            "description": "Created relationship representation."
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/already_exists"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create a relationship",
        "tags": [
          "Relationships"
        ],
        "x-external": true,
        "x-status": "alpha"
      },
      "summary": "Relationships"
    },
    "/relationships/{relationship_id}": {
      "delete": {
        "description": "Delete party relationship by ID.",
        "operationId": "deleteRelationship",
        "parameters": [
          {
            "$ref": "#/components/parameters/relationship_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/delete_response"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Delete relationship",
        "tags": [
          "Relationships"
        ],
        "x-external": true,
        "x-status": "alpha"
      },
      "get": {
        "description": "Get relationship by ID.",
        "operationId": "getRelationship",
        "parameters": [
          {
            "$ref": "#/components/parameters/relationship_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/relationship_in"
                }
              }
            },
            "description": "Relationship representation."
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get relationship",
        "tags": [
          "Relationships"
        ],
        "x-external": true,
        "x-status": "alpha"
      },
      "patch": {
        "description": "Update relationship by ID.",
        "operationId": "updateRelationship",
        "parameters": [
          {
            "$ref": "#/components/parameters/relationship_id"
          },
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patch_relationship_in"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/patch_relationship_in"
                }
              }
            },
            "description": "Updated relationship representation."
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "409": {
            "$ref": "#/components/responses/already_exists"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Update relationship",
        "tags": [
          "Relationships"
        ],
        "x-external": true,
        "x-status": "alpha"
      },
      "summary": "Relationship"
    },
    "/spend_controls": {
      "get": {
        "description": "List spend controls\n",
        "operationId": "listSpendControls",
        "parameters": [
          {
            "$ref": "#/components/parameters/amount_limit_gte_query"
          },
          {
            "$ref": "#/components/parameters/amount_limit_lte_query"
          },
          {
            "$ref": "#/components/parameters/num_related_accounts_gte_query"
          },
          {
            "$ref": "#/components/parameters/num_related_accounts_query"
          },
          {
            "$ref": "#/components/parameters/num_related_accounts_lte_query"
          },
          {
            "$ref": "#/components/parameters/spend_control_sort_by_query"
          },
          {
            "$ref": "#/components/parameters/payment_type_query"
          },
          {
            "$ref": "#/components/parameters/name_query"
          },
          {
            "$ref": "#/components/parameters/id_query1"
          },
          {
            "$ref": "#/components/parameters/spend_control_direction_query"
          },
          {
            "$ref": "#/components/parameters/is_active_query"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/account_id_query2"
          },
          {
            "$ref": "#/components/parameters/amount_limit_query"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/spend_control_response_list"
                }
              }
            },
            "description": "Spend control details"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List Spend Controls",
        "tags": [
          "Spend Controls"
        ],
        "x-external": true
      },
      "post": {
        "description": "Create a spend control\n",
        "operationId": "createSpendControl",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/spend_control"
              }
            }
          },
          "description": "Details of the spend control to create",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/spend_control_response"
                }
              }
            },
            "description": "Spend control details"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create Spend Control",
        "tags": [
          "Spend Controls"
        ],
        "x-external": true
      }
    },
    "/spend_controls/{spend_control_id}": {
      "get": {
        "description": "Get spend control\n",
        "operationId": "getSpendControl",
        "parameters": [
          {
            "$ref": "#/components/parameters/spend_control_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/spend_control_response"
                }
              }
            },
            "description": "Spend control details"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get Spend Control",
        "tags": [
          "Spend Controls"
        ],
        "x-external": true
      },
      "patch": {
        "description": "Update spend control\n",
        "operationId": "updateSpendControl",
        "parameters": [
          {
            "$ref": "#/components/parameters/spend_control_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/spend_control_update_request"
              }
            }
          },
          "description": "Fields to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/spend_control_response"
                }
              }
            },
            "description": "Spend control details"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Update Spend Control",
        "tags": [
          "Spend Controls"
        ],
        "x-external": true
      }
    },
    "/statements": {
      "get": {
        "description": "Gets a list of statement summaries for an account.",
        "operationId": "listStatements",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id1"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/statement_list"
                }
              }
            },
            "description": "List of statements for a given account"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List statements",
        "tags": [
          "Statements"
        ],
        "x-external": true
      },
      "summary": "Statements"
    },
    "/statements/{statement_id}": {
      "get": {
        "description": "Gets a full statement by its ID.",
        "operationId": "getStatement",
        "parameters": [
          {
            "$ref": "#/components/parameters/statement_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/statement"
                }
              }
            },
            "description": "statement"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get a statement",
        "tags": [
          "Statements"
        ],
        "x-external": true
      },
      "summary": "Statements"
    },
    "/statements/{statement_id}/transactions": {
      "get": {
        "description": "Gets the list of transactions for a statement's period.",
        "operationId": "getStatementTransactions",
        "parameters": [
          {
            "$ref": "#/components/parameters/statement_id"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transaction_list"
                }
              }
            },
            "description": "List of transactions for a given statement."
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get a statement's transactions",
        "tags": [
          "Statements"
        ],
        "x-external": true
      },
      "summary": "Statements"
    },
    "/transactions/batchable": {
      "get": {
        "description": "Get all transactions that have the potential to be included in a batch payment.\n",
        "operationId": "getTransactionsBatchPayments",
        "parameters": [
          {
            "$ref": "#/components/parameters/enabled_query"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/posted_transactions"
                }
              }
            },
            "description": "The posted transactions that are able to be included in a batch payment."
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get Transactions From Batch Payments Templates",
        "tags": [
          "Transactions"
        ],
        "x-external": true
      }
    },
    "/transactions/internal_transfer": {
      "post": {
        "description": "An internal transfer is an payment between two accounts within the same Fintech.\n\nBy default, the payment is posted immediately. To indicate that you want to separate the authorization from the completion of the payment, use `capture_mode` = `MANUAL`. In that case, a separate call to update the status of the transfer will be required to complete the payment.",
        "operationId": "createInternalTransfer",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/internal_transfer"
              }
            }
          },
          "description": "Internal transfer request body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/internal_transfer_response"
                }
              }
            },
            "description": "Internal transfer response"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create an internal transfer",
        "tags": [
          "Internal Transfer"
        ],
        "x-external": true
      },
      "summary": "Initiate an internal account-to-account transfer"
    },
    "/transactions/internal_transfer/{id}": {
      "description": "Returns details about an internal transfer.",
      "get": {
        "description": "Get an internal transfer auth by ID",
        "operationId": "getInternalTransferByID",
        "parameters": [
          {
            "$ref": "#/components/parameters/id1"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/internal_transfer_response"
                }
              }
            },
            "description": "Internal transfer response"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get an internal transfer",
        "tags": [
          "Internal Transfer"
        ],
        "x-external": true
      },
      "patch": {
        "description": "Update an internal transfer.\n\nThis is only relevant when committing or cancelling an internal transfer authorization (created with `capture_mode` = `MANUAL`) that hasn't already been completed.",
        "operationId": "updateInternalTransferByID",
        "parameters": [
          {
            "$ref": "#/components/parameters/id1"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/internal_transfer_patch"
              }
            }
          },
          "description": "Internal transfer request body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/internal_transfer_response"
                }
              }
            },
            "description": "Internal transfer response"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Update an internal transfer",
        "tags": [
          "Internal Transfer"
        ],
        "x-external": true
      },
      "summary": "Get an internal transfer by ID"
    },
    "/transactions/pending": {
      "description": "Pending transactions represent a \"hold\" of a paricular amount on an account balance.\n",
      "get": {
        "description": "Get paginated list of pending transactions matching the provided filters\n",
        "operationId": "listPendingTransactions",
        "parameters": [
          {
            "$ref": "#/components/parameters/include_child_transactions"
          },
          {
            "$ref": "#/components/parameters/status1"
          },
          {
            "$ref": "#/components/parameters/amount"
          },
          {
            "$ref": "#/components/parameters/total_amount"
          },
          {
            "$ref": "#/components/parameters/from_date"
          },
          {
            "$ref": "#/components/parameters/to_date"
          },
          {
            "$ref": "#/components/parameters/transaction_id1"
          },
          {
            "$ref": "#/components/parameters/cashback"
          },
          {
            "$ref": "#/components/parameters/type1"
          },
          {
            "$ref": "#/components/parameters/idempotency_key_query"
          },
          {
            "$ref": "#/components/parameters/account_no"
          },
          {
            "$ref": "#/components/parameters/exclude_jit_transactions"
          },
          {
            "$ref": "#/components/parameters/uuid_query1"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/account_id2"
          },
          {
            "$ref": "#/components/parameters/card_id1"
          },
          {
            "$ref": "#/components/parameters/reference_id"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/subtype"
          },
          {
            "$ref": "#/components/parameters/uuid_nin_query"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pending_transactions"
                }
              }
            },
            "description": "Paginated list of pending transactions"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List pending transactions",
        "tags": [
          "Transactions"
        ],
        "x-external": true,
        "x-permissions": [
          "sub_ledger:read"
        ]
      },
      "summary": "List pending transactions"
    },
    "/transactions/pending/{id}": {
      "description": "A pending transaction represent a \"hold\" of a paricular amount on an account balance.\n",
      "get": {
        "description": "Get a pending transaction by its uuid\n",
        "operationId": "getPendingTransactionByID",
        "parameters": [
          {
            "$ref": "#/components/parameters/id1"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pending_transaction"
                }
              }
            },
            "description": "Pending Transaction"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get a pending transaction",
        "tags": [
          "Transactions"
        ],
        "x-external": true,
        "x-permissions": [
          "sub_ledger:read"
        ]
      },
      "summary": "Get pending transaction"
    },
    "/transactions/posted": {
      "description": "Posted transactions represent a completed money movement.\n",
      "get": {
        "description": "Get paginated list of posted transactions matching the provided filters\n",
        "operationId": "listPostedTransactions",
        "parameters": [
          {
            "$ref": "#/components/parameters/is_batched_query"
          },
          {
            "$ref": "#/components/parameters/include_child_transactions"
          },
          {
            "$ref": "#/components/parameters/batch_ids_query"
          },
          {
            "$ref": "#/components/parameters/amount"
          },
          {
            "$ref": "#/components/parameters/from_date"
          },
          {
            "$ref": "#/components/parameters/to_date"
          },
          {
            "$ref": "#/components/parameters/dc_sign_query"
          },
          {
            "$ref": "#/components/parameters/cashback"
          },
          {
            "$ref": "#/components/parameters/type1"
          },
          {
            "$ref": "#/components/parameters/idempotency_key_query"
          },
          {
            "$ref": "#/components/parameters/account_no"
          },
          {
            "$ref": "#/components/parameters/exclude_jit_transactions"
          },
          {
            "$ref": "#/components/parameters/uuid_query1"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/account_id2"
          },
          {
            "$ref": "#/components/parameters/card_id1"
          },
          {
            "$ref": "#/components/parameters/reference_id"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/subtype"
          },
          {
            "$ref": "#/components/parameters/uuid_nin_query"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/posted_transactions"
                }
              }
            },
            "description": "Paginated list of posted transactions"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List posted transactions",
        "tags": [
          "Transactions"
        ],
        "x-external": true,
        "x-permissions": [
          "sub_ledger:read"
        ]
      },
      "summary": "List posted transactions"
    },
    "/transactions/posted/{id}": {
      "description": "A posted transaction represents a completed money movement.\n",
      "get": {
        "description": "Get a posted transaction by its uuid\n",
        "operationId": "getPostedTransactionByID",
        "parameters": [
          {
            "$ref": "#/components/parameters/id1"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/posted_transaction"
                }
              }
            },
            "description": "Posted Transaction"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get a posted transaction",
        "tags": [
          "Transactions"
        ],
        "x-external": true,
        "x-permissions": [
          "sub_ledger:read"
        ]
      },
      "summary": "Get posted transaction"
    },
    "/verifications": {
      "get": {
        "description": "List customer verification results.",
        "operationId": "listVerifications1",
        "parameters": [
          {
            "$ref": "#/components/parameters/uuid_query"
          },
          {
            "$ref": "#/components/parameters/verification_type_query"
          },
          {
            "$ref": "#/components/parameters/business_id_query"
          },
          {
            "$ref": "#/components/parameters/include_history"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/result_query"
          },
          {
            "$ref": "#/components/parameters/person_id_query"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/verification_list"
                }
              }
            },
            "description": "List verifications."
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List verifications",
        "tags": [
          "KYC/KYB Verifications"
        ],
        "x-external": true,
        "x-status": "alpha"
      },
      "post": {
        "description": "Upload evidence of an externally performed KYC/KYB. \n\nYou may use your own KYC/KYB provider and upload evidence of those results instead of using one of Synctera's providers.\n\nVerifying a personal customer requires that the following fields already be set:\n* `first_name`\n* `last_name`\n* `dob`\n* `email` or `phone_number`\n* `legal_address`\n* `shippings_address`\n* `ssn` or at least one other identifier in `personal_ids`\n\nVerifying a business customer requires that the following fields already be set:\n* `entity_name`\n* `legal_address`\n* `email` or `phone_number`\n* `ein` not required for sole proprietorships\n\nPlease refer to https://learn.synctera.com/docs/using-your-own-kyc-vendor for more details using external KYC/KYB.\n",
        "operationId": "createVerification",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/verification"
              }
            }
          },
          "description": "Verification result to create.",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/verification"
                }
              }
            },
            "description": "Created verification."
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create a verification",
        "tags": [
          "KYC/KYB Verifications"
        ],
        "x-external": true,
        "x-status": "alpha"
      }
    },
    "/verifications/adhoc": {
      "description": "Check if an individual is on any watchlists. Intended for use before a transfer payment, to ensure that the payee is not flagged.\n",
      "post": {
        "operationId": "verifyAdHoc",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/adhoc_verification_request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/adhoc_verification_response"
                }
              }
            },
            "description": "successful check"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Check if an individual is on any watchlists",
        "tags": [
          "KYC/KYB Verifications"
        ],
        "x-external": true
      },
      "summary": "Check if an individual is on any watchlists"
    },
    "/verifications/verify": {
      "post": {
        "description": "Initiate identity verification and run the specified identity checks.\n\nVerifying a personal customer requires that the following fields already be set:\n* `first_name`\n* `last_name`\n* `dob`\n* `email`\n* `phone_number`\n* `legal_address`\n* `ssn`\n\nVerifying a business customer requires that the following fields already be set:\n* `entity_name`\n* `legal_address`\n",
        "operationId": "verify",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/verification_request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/verify_response"
                }
              }
            },
            "description": "Created identity request."
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Verify a customer's identity",
        "tags": [
          "KYC/KYB Verifications"
        ],
        "x-external": true,
        "x-status": "alpha"
      }
    },
    "/verifications/{verification_id}": {
      "get": {
        "description": "Get customer verification result.",
        "operationId": "getVerification1",
        "parameters": [
          {
            "$ref": "#/components/parameters/verification_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/verification"
                }
              }
            },
            "description": "Verification representation."
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get verification",
        "tags": [
          "KYC/KYB Verifications"
        ],
        "x-external": true,
        "x-status": "alpha"
      }
    },
    "/webhook_secrets": {
      "delete": {
        "description": "Revoke the existing webhook secret. If this is called at the rolling secret time, then both old and new secrets will be revoked",
        "operationId": "revokeSecret",
        "parameters": [
          {
            "in": "query",
            "name": "old_secret_only",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret has been revoked"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Revoke the secret",
        "tags": [
          "Webhooks"
        ],
        "x-external": true
      },
      "post": {
        "description": "Create a webhook secret. The secret will be used to verify all subsequent webhook request signature.",
        "operationId": "createSecret",
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "secret": {
                      "description": "Generated secret. Do not share. This secret will be used to verify that webhook requests were sent from Synctera.",
                      "maxLength": 64,
                      "minLength": 64,
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Webhook secret response"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "409": {
            "$ref": "#/components/responses/already_exists"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create a secret",
        "tags": [
          "Webhooks"
        ],
        "x-external": true
      },
      "put": {
        "description": "Replace an existing webhook secret immediately or as part of rotation. This new secret will be used to verify all subsequent webhook request signature.",
        "operationId": "replaceSecret",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "is_rolling_secret": {
                    "description": "Set true to let the current secret expire in the next 24 hours. Set false to let the current secret expire immediately.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "deleted_at": {
                      "description": "Timestamp that the old secret is delete",
                      "format": "date-time",
                      "type": "string"
                    },
                    "secret": {
                      "description": "Generated secret. Do not share. This secret will be used to verify that webhook requests were sent from Synctera.",
                      "maxLength": 64,
                      "minLength": 64,
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Webhook secret response"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Replace an existing secret",
        "tags": [
          "Webhooks"
        ],
        "x-external": true
      }
    },
    "/webhooks": {
      "get": {
        "description": "List all webhooks",
        "operationId": "listWebhooks",
        "parameters": [
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "in": "query",
            "name": "is_enabled_only",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook_list"
                }
              }
            },
            "description": "List of webhooks"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List webhooks",
        "tags": [
          "Webhooks"
        ],
        "x-external": true,
        "x-permissions": [
          "notifications:read"
        ]
      },
      "post": {
        "callbacks": {
          "WebhookRequest": {
            "{$request.body#/url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/webhook_request_object"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "Your server returns this code if it accepts the webhook request object"
                  }
                },
                "summary": "Send event details to integrator using registered URL"
              }
            }
          }
        },
        "description": "Create a webhook",
        "operationId": "createWebhook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook"
              }
            }
          },
          "description": "Webhook to create",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook"
                }
              }
            },
            "description": "Created webhook"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create a webhook",
        "tags": [
          "Webhooks"
        ],
        "x-external": true
      }
    },
    "/webhooks/trigger": {
      "post": {
        "description": "Trigger an specific event for webhook testing purpose",
        "operationId": "triggerEvent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "event": {
                    "$ref": "#/components/schemas/event_type"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Provide an event type to trigger",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event_trigger"
                }
              }
            },
            "description": "Triggered webhook event"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Trigger an event",
        "tags": [
          "Webhooks"
        ],
        "x-external": true
      }
    },
    "/webhooks/{webhook_id}": {
      "delete": {
        "description": "Delete a webhook",
        "operationId": "deleteWebhook",
        "parameters": [
          {
            "$ref": "#/components/parameters/webhook_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/delete_response"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Delete a webhook",
        "tags": [
          "Webhooks"
        ],
        "x-external": true
      },
      "get": {
        "description": "Get a webhook",
        "operationId": "getWebhook",
        "parameters": [
          {
            "$ref": "#/components/parameters/webhook_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook"
                }
              }
            },
            "description": "Webhook"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get a webhook",
        "tags": [
          "Webhooks"
        ],
        "x-external": true
      },
      "put": {
        "description": "Update a webhook",
        "operationId": "updateWebhook",
        "parameters": [
          {
            "$ref": "#/components/parameters/webhook_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook"
              }
            }
          },
          "description": "Webhook to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook"
                }
              }
            },
            "description": "Created webhook"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Update a webhook",
        "tags": [
          "Webhooks"
        ],
        "x-external": true
      }
    },
    "/webhooks/{webhook_id}/events": {
      "get": {
        "description": "List webhook events. This response will not associate with the event response history.",
        "operationId": "listEvents",
        "parameters": [
          {
            "description": "Start time of date-time range filtering for events. Date is inclusive and should be in UTC timezone 00:00:00.",
            "in": "query",
            "name": "start_time",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "deprecated": true,
            "description": "End date of date range filtering for events. Date is inclusive and should be in UTC timezone 00:00:00.. end_date is alias of end_time and is deprecated. Please use end_time instead.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "End time of date-time range filtering for events. Date is inclusive and should be in UTC timezone 00:00:00.",
            "in": "query",
            "name": "end_time",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/webhook_id"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "description": "Limit returned events to those that occurred on the specified resource.",
            "in": "query",
            "name": "resource_id",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "deprecated": true,
            "description": "Start date of date range filtering for events. Date is inclusive and should be in UTC timezone 00:00:00.. start_date is alias of start_time and is deprecated. Please use start_time instead.",
            "in": "query",
            "name": "start_date",
            "schema": {
              "format": "date",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event_list"
                }
              }
            },
            "description": "List of webhook events"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List webhook events",
        "tags": [
          "Webhooks"
        ],
        "x-external": true,
        "x-permissions": [
          "notifications:read"
        ]
      }
    },
    "/webhooks/{webhook_id}/events/{event_id}": {
      "get": {
        "description": "Get webhook event by ID",
        "operationId": "getEvent",
        "parameters": [
          {
            "description": "Webhook event ID",
            "in": "path",
            "name": "event_id",
            "required": true,
            "schema": {
              "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/webhook_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event"
                }
              }
            },
            "description": "Webhook event"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get webhook event",
        "tags": [
          "Webhooks"
        ],
        "x-external": true
      }
    },
    "/webhooks/{webhook_id}/events/{event_id}/resend": {
      "post": {
        "description": "Resend a webhook event",
        "operationId": "resendEvent",
        "parameters": [
          {
            "description": "Delay the event triggering in seconds. Events are checked once a minute, so a short delay may not result in an immediate resend.",
            "in": "query",
            "name": "delay",
            "schema": {
              "maximum": 3600,
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "description": "Webhook event ID",
            "in": "path",
            "name": "event_id",
            "required": true,
            "schema": {
              "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/webhook_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event"
                }
              }
            },
            "description": "Resent webhook event"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Resend an event",
        "tags": [
          "Webhooks"
        ],
        "x-external": true
      }
    },
    "/wipe": {
      "post": {
        "description": "Delete the customer and account related data, leaving other configuration data intact. This enables use cases such as bulk data deletion between tests.\nData associated with below resources will be deleted:\n  - Accounts\n  - Account applications\n  - ACH\n  - Businesses\n  - Cards\n  - Card images\n  - Cases\n  - Customers\n  - Disclosures\n  - External Accounts\n  - Internal Accounts\n  - Payment schedules and history\n  - Persons\n  - RDC\n  - Relationships\n  - Transactions (including for Internal Accounts)\n  - Verifications\n\nData associated with below resources will be retained:\n  - Account Templates\n  - API Keys\n  - Bank/Partner data\n  - Card product\n  - Disclosure document records\n  - Egress config\n  - Groups\n  - PII contract with vault\n  - Roles\n  - Users\n  - Webhooks\n",
        "operationId": "wipeWorkspace",
        "responses": {
          "204": {
            "description": "successfully wiped resources for a particular tenant"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Delete data",
        "tags": [
          "Sandbox Wipe"
        ],
        "x-external": true
      },
      "summary": "Wipe"
    },
    "/wires": {
      "get": {
        "description": "Get paginated list of wires",
        "operationId": "listWires",
        "parameters": [
          {
            "$ref": "#/components/parameters/originating_account_id"
          },
          {
            "$ref": "#/components/parameters/to_date1"
          },
          {
            "$ref": "#/components/parameters/from_date1"
          },
          {
            "$ref": "#/components/parameters/customer_id1"
          },
          {
            "$ref": "#/components/parameters/status2"
          },
          {
            "$ref": "#/components/parameters/receiving_account_id"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wire_list"
                }
              }
            },
            "description": "List of wires"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List outgoing wires",
        "tags": [
          "Wires"
        ],
        "x-external": true
      },
      "post": {
        "description": "Create an outgoing wire transfer",
        "operationId": "createWire",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wire_request"
              }
            }
          },
          "description": "Wire transfer request",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wire"
                }
              }
            },
            "description": "Created wire"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Send a wire",
        "tags": [
          "Wires"
        ],
        "x-external": true
      },
      "summary": "Wire"
    },
    "/wires/incoming": {
      "get": {
        "description": "Get paginated list of incoming wires",
        "operationId": "listIncomingWires",
        "parameters": [
          {
            "$ref": "#/components/parameters/to_date1"
          },
          {
            "$ref": "#/components/parameters/from_date1"
          },
          {
            "$ref": "#/components/parameters/status2"
          },
          {
            "$ref": "#/components/parameters/imad"
          },
          {
            "$ref": "#/components/parameters/omad"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/uetr"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/incoming_wire_list"
                }
              }
            },
            "description": "List of incoming wires"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List incoming wires",
        "tags": [
          "Incoming Wires"
        ],
        "x-external": true
      },
      "summary": "Incoming Wires"
    },
    "/wires/incoming/{wire_id}": {
      "get": {
        "description": "Get an incoming wire by id",
        "operationId": "getIncomingWire",
        "parameters": [
          {
            "$ref": "#/components/parameters/wire_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/incoming_wire"
                }
              }
            },
            "description": "wire"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get incoming wire by id",
        "tags": [
          "Incoming Wires"
        ],
        "x-external": true
      },
      "patch": {
        "description": "Update an incoming wire by id",
        "operationId": "patchIncomingWire",
        "parameters": [
          {
            "$ref": "#/components/parameters/wire_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/incoming_wire_patch"
              }
            }
          },
          "description": "Patch incoming wire request",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/incoming_wire"
                }
              }
            },
            "description": "wire"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Update an incoming wire by id",
        "tags": [
          "Incoming Wires"
        ],
        "x-external": true
      }
    },
    "/wires/transaction_simulations/receiving_return": {
      "post": {
        "description": "Use to simulate receiving a Wire transfer return in test environments. Creates an incoming Wire file with a single return entry based on a previously created outgoing transaction. The file gets automatically processed.",
        "operationId": "wireReturnSimulation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wire_return_simulation_request"
              }
            }
          },
          "description": "Incoming Wire return simulation request",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wire_simulation_response"
                }
              }
            },
            "description": "Simulated receiving a Wire transfer return"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Simulate receiving Wire transfer return",
        "tags": [
          "Wire Transaction Simulations"
        ],
        "x-external": true
      },
      "summary": "Receiving Wire return simulation"
    },
    "/wires/transaction_simulations/receiving_transaction": {
      "post": {
        "description": "Use to simulate receiving Wire transaction in test environments. Creates an incoming Wire file, which gets automatically processed.",
        "operationId": "wireTransactionSimulation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wire_transaction_simulation_request"
              }
            }
          },
          "description": "Incoming Wire simulation request",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wire_simulation_response"
                }
              }
            },
            "description": "Simulated receiving a Wire transaction"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Simulate receiving Wire transaction",
        "tags": [
          "Wire Transaction Simulations"
        ],
        "x-external": true
      },
      "summary": "Receiving Wire simulation"
    },
    "/wires/{wire_id}": {
      "get": {
        "description": "Get a wire by id",
        "operationId": "getWire",
        "parameters": [
          {
            "$ref": "#/components/parameters/wire_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wire"
                }
              }
            },
            "description": "wire"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get an outgoing wire by id",
        "tags": [
          "Wires"
        ],
        "x-external": true
      },
      "patch": {
        "description": "Cancel an outgoing tranfer",
        "operationId": "cancelWire",
        "parameters": [
          {
            "$ref": "#/components/parameters/wire_id"
          },
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_transfer"
              }
            }
          },
          "description": "wire to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wire"
                }
              }
            },
            "description": "Updated wire"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Cancel an outgoing wire",
        "tags": [
          "Wires"
        ],
        "x-external": true
      },
      "summary": "Wire"
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "servers": [
    {
      "description": "Sandbox (no real world financial impact)",
      "url": "https://api-sandbox.synctera.com/v0"
    },
    {
      "description": "Production",
      "url": "https://api.synctera.com/v0"
    }
  ],
  "tags": [
    {
      "description": "Lookup merchant information",
      "name": "Merchants"
    },
    {
      "description": "Requests to generate simulated webhooks",
      "name": "Card Webhook Simulations"
    },
    {
      "description": "Simulate receiving ACH transactions and returns",
      "name": "ACH Transaction Simulations"
    },
    {
      "description": "Requests for risk evaluation and decisioning",
      "name": "Risk Evaluations"
    },
    {
      "description": "Requests to link and manage External Cards",
      "name": "External Cards"
    },
    {
      "description": "The disclosures resource is used to track the status of disclosures and\nensure that all parties have been shown the necessary disclosures to meet\nregulatory obligations.\n",
      "name": "Disclosures"
    },
    {
      "description": "Create and manage Cash Order and Cash Deposit transfers",
      "name": "Cash Orders and Deposits (alpha)"
    },
    {
      "description": "Requests to initiate customer verification.",
      "name": "KYC Verification (deprecated)"
    },
    {
      "description": "Request to create and manage users",
      "name": "Users"
    },
    {
      "description": "See balance history",
      "name": "BalanceHistory"
    },
    {
      "description": "The External Account resource is used for managing links to accounts\nthat operate outside of the Synctera ecosystem.\n",
      "name": "External Accounts"
    },
    {
      "description": "Requests to create and manage account products, including fees, interest.",
      "name": "Account Products"
    },
    {
      "description": "Requests to create and manage webhooks",
      "name": "Webhooks"
    },
    {
      "description": "Create and manage documents.",
      "name": "Documents"
    },
    {
      "description": "Create and manage same currency and multi-currency international wire transfers",
      "name": "International Wires (alpha)"
    },
    {
      "description": "Requests for transaction risk detection",
      "name": "Transaction risk"
    },
    {
      "description": "Used to configure bank accounts for which synctera accounts are considered a \"subledger\" to",
      "name": "Bank Account"
    },
    {
      "description": "Request to create and manage party groups and party group members",
      "name": "Party Groups"
    },
    {
      "description": "Requests to manage addresses",
      "name": "Addresses"
    },
    {
      "description": "Requests to manage monitoring subscriptions and alerts for customers.",
      "name": "Monitoring"
    },
    {
      "description": "Requests to search and manage compliance searches",
      "name": "Compliance Searches"
    },
    {
      "description": "Requests to create and manage customers",
      "name": "Customers"
    },
    {
      "description": "The internal account resource is used for managing links to internal\naccounts where the funds are managed by integrators.\n",
      "name": "Internal Accounts"
    },
    {
      "description": "Create and manage spending controls",
      "name": "Spend Controls"
    },
    {
      "description": "Retrieve user identity information",
      "name": "Identity"
    },
    {
      "description": "Requests to manage banks",
      "name": "Banks"
    },
    {
      "description": "The Disclosures resource is used to track the status of disclosures and\nensure that customers have been shown the necessary disclosures to meet\nregulatory obligations.\n",
      "name": "Disclosures (deprecated)"
    },
    {
      "description": "Create and manage wire transfers",
      "name": "Wires"
    },
    {
      "description": "Requests to issue and manage Cards",
      "name": "Cards"
    },
    {
      "description": "Request to create and manage edd",
      "name": "Trust"
    },
    {
      "description": "Request to enroll, renew, or cancel watchlist monitors",
      "name": "Watchlist (deprecated)"
    },
    {
      "description": "Endpoints for modifying or fetching posting dates",
      "name": "Posting Dates"
    },
    {
      "description": "Transaction lines API",
      "name": "transactions"
    },
    {
      "description": "Request to create and manage accounts",
      "name": "Accounts"
    },
    {
      "description": "Requests to create and perform administrative functions",
      "name": "Admin"
    },
    {
      "description": "Requests to create and manage notes",
      "name": "Notes"
    },
    {
      "description": "Account Template",
      "name": "Account Templates"
    },
    {
      "description": "A natural person (individual human) that is relevant to the Synctera platform in some way: e.g. a personal customer or a director/officer/owner of a business.\n",
      "name": "Persons"
    },
    {
      "description": "Represents the relationships between parties. A relationship can exist between personal customers, business customers, or non-customer persons/organizations.\n",
      "name": "Relationships"
    },
    {
      "description": "A legal entity (corporation, partnership, etc.) that is relevant to the Synctera platform in some way: a business customer or some other organization that has an ownership share in such a business customer.\n",
      "name": "Businesses"
    },
    {
      "description": "Request to create and manage payment_schedules",
      "name": "Cronut"
    },
    {
      "description": "Requests to manage partners",
      "name": "Partners"
    },
    {
      "description": "Request to create and manage deposits using remote deposit capture",
      "name": "Remote Check Deposit"
    },
    {
      "description": "Requests to create and manage API keys",
      "name": "API Keys"
    },
    {
      "description": "Requests to create and manage ban rules",
      "name": "Ban Rules"
    },
    {
      "description": "Admin API for Middesk configuration using the tenants API keys.",
      "name": "Middesk"
    },
    {
      "description": "Request to create and manage exclusions",
      "name": "Stately"
    },
    {
      "description": "Request to create and manage partner configurations",
      "name": "Quickstart"
    },
    {
      "description": "Manage contacts for bank and fintech partners",
      "name": "Contacts"
    },
    {
      "description": "Create and manage transactions",
      "name": "Transactions"
    },
    {
      "description": "Request to create and manage rdc configurations",
      "name": "RDC Config"
    },
    {
      "description": "Create and manage holds",
      "name": "Hold"
    },
    {
      "description": "Requests to create and manage roles",
      "name": "Roles"
    },
    {
      "description": "Simulate receiving Wire transactions and returns",
      "name": "Wire Transaction Simulations"
    },
    {
      "description": "Requests to create licenses",
      "name": "Licenses"
    },
    {
      "description": "Requests to Admins to grant permissions to user",
      "name": "Request Permissions"
    },
    {
      "description": "Configure vendor secrets for egress requests",
      "name": "Egress Gateway Vendor Secret CRUD API"
    },
    {
      "description": "Create and manage payments",
      "name": "ACH"
    },
    {
      "description": "Requests to calculate and manage CRR",
      "name": "CRR"
    },
    {
      "description": "Requests to search financial institutions",
      "name": "Institutions (Beta)"
    },
    {
      "description": "Create and manage tenant configurations",
      "name": "Tenant Configs"
    },
    {
      "description": "Create and manage sweep configurations",
      "name": "Configs"
    },
    {
      "description": "Represents the compliance rules that are used to verify certain kinds of money movement.\n",
      "name": "Compliance Rules"
    },
    {
      "description": "Configure webhook secrets for egress requests",
      "name": "Egress Gateway Webhook Secret CRUD API"
    },
    {
      "description": "Create and manage transactions",
      "name": "Transactions (internal)"
    },
    {
      "description": "History",
      "name": "History"
    },
    {
      "description": "Create and manage EFT Canada transfers",
      "name": "EFT Canada (Beta)"
    },
    {
      "description": "Requests to generate simulated transactions",
      "name": "Card Transaction Simulations"
    },
    {
      "description": "Requests to initiate customer verification.",
      "name": "KYC/KYB Verifications"
    }
  ]
}
