{
  "components": {
    "parameters": {
      "account_id": {
        "description": "Account ID",
        "explode": false,
        "in": "query",
        "name": "account_id",
        "schema": {
          "items": {
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "type": "array"
        }
      },
      "account_id1": {
        "description": "The account's unique identifier provided by Synctera",
        "in": "query",
        "name": "account_id",
        "required": true,
        "schema": {
          "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "format": "uuid",
          "type": "string"
        }
      },
      "account_id_query": {
        "description": "return results matching this account ID",
        "in": "query",
        "name": "account_id",
        "schema": {
          "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "format": "uuid",
          "type": "string"
        }
      },
      "account_id_query_array": {
        "description": "Account ID(s). Multiple IDs can be provided as a comma-separated list.",
        "explode": false,
        "in": "query",
        "name": "account_id",
        "schema": {
          "items": {
            "$ref": "#/components/schemas/account_id"
          },
          "type": "array"
        },
        "style": "form"
      },
      "account_source": {
        "description": "Determines whether to return only transactions against customer accounts (`CUSTOMER`) vs internal accounts (`INTERNAL`).\nThe default is to return all transactions if no `account_source` is specified.",
        "in": "query",
        "name": "account_source",
        "schema": {
          "enum": [
            "CUSTOMER",
            "INTERNAL"
          ],
          "type": "string"
        }
      },
      "adverse_action_id": {
        "description": "Unique identifier for adverse action notice.",
        "in": "path",
        "name": "adverse_action_id",
        "required": true,
        "schema": {
          "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "format": "uuid",
          "type": "string"
        }
      },
      "amount": {
        "description": "Only return transactions equal to the given `amount`",
        "in": "query",
        "name": "amount",
        "schema": {
          "type": "integer"
        }
      },
      "amount_gt": {
        "description": "Only return transactions with `amount` greater than `amount_gt`",
        "in": "query",
        "name": "amount_gt",
        "schema": {
          "type": "integer"
        }
      },
      "amount_gte": {
        "description": "Only return transactions with `amount` greater than or equal to `amount_gte`",
        "in": "query",
        "name": "amount_gte",
        "schema": {
          "type": "integer"
        }
      },
      "amount_limit_gte_query": {
        "description": "return results with an amount limit greater than or equal to this",
        "in": "query",
        "name": "amount_limit_gte",
        "schema": {
          "minimum": 0,
          "type": "integer"
        }
      },
      "amount_limit_lte_query": {
        "description": "return results with an amount limit less than or equal to this",
        "in": "query",
        "name": "amount_limit_lte",
        "schema": {
          "minimum": 0,
          "type": "integer"
        }
      },
      "amount_limit_query": {
        "description": "return results matching this amount limit",
        "in": "query",
        "name": "amount_limit",
        "schema": {
          "format": "int64",
          "minimum": 0,
          "type": "integer"
        }
      },
      "amount_lt": {
        "description": "Only return transactions with `amount` less than `amount_lt`",
        "in": "query",
        "name": "amount_lt",
        "schema": {
          "type": "integer"
        }
      },
      "amount_lte": {
        "description": "Only return transactions with `amount` less than or equal to `amount_lte`",
        "in": "query",
        "name": "amount_lte",
        "schema": {
          "type": "integer"
        }
      },
      "application_id_path": {
        "description": "Unique identifier for the application.",
        "in": "path",
        "name": "application_id",
        "required": true,
        "schema": {
          "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "format": "uuid",
          "type": "string"
        }
      },
      "application_status": {
        "description": "Application status values for all types of applications\n",
        "in": "query",
        "name": "status",
        "schema": {
          "$ref": "#/components/schemas/all_application_status"
        }
      },
      "application_type": {
        "description": "Type of application\n",
        "in": "query",
        "name": "type",
        "schema": {
          "$ref": "#/components/schemas/application_type"
        }
      },
      "barcode_id": {
        "in": "path",
        "name": "barcode_id",
        "required": true,
        "schema": {
          "description": "ID of the generated barcode.",
          "example": "123e4567-e89b-12d3-a456-426614174002",
          "format": "uuid",
          "type": "string"
        }
      },
      "barcode_query": {
        "in": "query",
        "name": "barcode",
        "schema": {
          "$ref": "#/components/schemas/barcode"
        }
      },
      "batch_payment_id": {
        "description": "ID of the Batch Payment",
        "in": "query",
        "name": "id",
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "batch_payment_status": {
        "description": "Status of the Batch Payment",
        "in": "query",
        "name": "status",
        "schema": {
          "type": "string"
        }
      },
      "batch_payment_template_description": {
        "description": "Description of the Batch Template",
        "in": "query",
        "name": "description",
        "schema": {
          "example": "This template is used for international remittance",
          "type": "string"
        }
      },
      "batch_payment_template_enabled": {
        "description": "Whether or not the template is enabled. If the template is not enabled, it will not be used when creating a batch transfer.",
        "in": "query",
        "name": "enabled",
        "schema": {
          "example": true,
          "type": "boolean"
        }
      },
      "batch_payment_template_id": {
        "description": "ID of the Batch Payment Template",
        "in": "query",
        "name": "template_id",
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "batch_payment_template_name": {
        "description": "Name of the Batch Template",
        "in": "query",
        "name": "name",
        "schema": {
          "example": "International Remittance",
          "type": "string"
        }
      },
      "batch_payment_transaction_id": {
        "description": "ID of the Batch Payment Transaction",
        "in": "query",
        "name": "transaction_id",
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "bin_prefix_query": {
        "in": "query",
        "name": "bin_prefix",
        "schema": {
          "$ref": "#/components/schemas/bin_prefix"
        }
      },
      "bulk_order_config_id": {
        "in": "path",
        "name": "bulk_order_config_id",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/bulk_order_config_id"
        }
      },
      "bulk_order_config_id_query": {
        "in": "query",
        "name": "bulk_order_config_id",
        "schema": {
          "$ref": "#/components/schemas/bulk_order_config_id"
        }
      },
      "bulk_order_config_sort_by_query": {
        "description": "Specifies the sort order for the returned bulk order configurations.\n",
        "explode": false,
        "in": "query",
        "name": "sort_by",
        "schema": {
          "items": {
            "enum": [
              "creation_time:asc",
              "creation_time:desc"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "bulk_order_id_query": {
        "in": "query",
        "name": "bulk_order_id",
        "schema": {
          "$ref": "#/components/schemas/bulk_order_id"
        }
      },
      "business_id_query": {
        "in": "query",
        "name": "business_id",
        "schema": {
          "$ref": "#/components/schemas/business_id1"
        }
      },
      "business_id_query_array": {
        "description": "A list of business unique identifiers, with a comma separating any values. Returns applications that are linked to the specified Business IDs.",
        "explode": false,
        "in": "query",
        "name": "business_id",
        "schema": {
          "items": {
            "$ref": "#/components/schemas/business_id"
          },
          "type": "array"
        },
        "style": "form"
      },
      "card_brand_query": {
        "description": "The brand of a card product",
        "in": "query",
        "name": "card_brand",
        "schema": {
          "$ref": "#/components/schemas/card_brand"
        }
      },
      "card_id": {
        "in": "path",
        "name": "card_id",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/card_id"
        }
      },
      "card_id1": {
        "description": "Card ID",
        "in": "query",
        "name": "card_id",
        "schema": {
          "example": "6dc0397d-1aba-4be9-9582-895a7a887d49",
          "format": "uuid",
          "type": "string"
        }
      },
      "card_id_query": {
        "in": "query",
        "name": "card_id",
        "schema": {
          "$ref": "#/components/schemas/card_id"
        }
      },
      "card_image_id": {
        "in": "path",
        "name": "card_image_id",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/card_image_id"
        }
      },
      "card_product_id_query": {
        "in": "query",
        "name": "card_product_id",
        "schema": {
          "$ref": "#/components/schemas/card_product_id"
        }
      },
      "card_product_sort_by_query": {
        "description": "Specifies the sort order for the returned card products.\n",
        "explode": false,
        "in": "query",
        "name": "sort_by",
        "schema": {
          "items": {
            "enum": [
              "active:asc",
              "active:desc",
              "card_brand:asc",
              "card_brand:desc",
              "card_category:asc",
              "card_category:desc",
              "card_type:asc",
              "card_type:desc",
              "creation_time:asc",
              "creation_time:desc",
              "end_date:asc",
              "end_date:desc",
              "form:asc",
              "form:desc",
              "name:asc",
              "name:desc",
              "start_date:asc",
              "start_date:desc"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "card_sort_by_query": {
        "description": "Specifies the sort order for the returned cards.\n",
        "explode": false,
        "in": "query",
        "name": "sort_by",
        "schema": {
          "items": {
            "enum": [
              "account_id:asc",
              "account_id:desc",
              "card_brand:asc",
              "card_brand:desc",
              "card_product_id:asc",
              "card_product_id:desc",
              "card_status:asc",
              "card_status:desc",
              "card_type:asc",
              "card_type:desc",
              "customer_id:asc",
              "customer_id:desc",
              "expiration_date:asc",
              "expiration_date:desc",
              "form:asc",
              "form:desc",
              "last_four:asc",
              "last_four:desc"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "card_status_query": {
        "description": "The status of a card",
        "in": "query",
        "name": "card_status",
        "schema": {
          "$ref": "#/components/schemas/card_status"
        }
      },
      "card_widget_type_query": {
        "in": "query",
        "name": "widget_type",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/card_widget_type"
        }
      },
      "credit_score_id": {
        "description": "The unique identifier of a credit score",
        "in": "path",
        "name": "credit_score_id",
        "required": true,
        "schema": {
          "example": "64438afd-fa20-4010-a573-2bbdca77cdb6",
          "format": "uuid",
          "type": "string"
        }
      },
      "credit_score_id_query": {
        "description": "Return the credit score with the specified id. Multiple IDs can be provided as a comma-separated list.\n",
        "explode": false,
        "in": "query",
        "name": "id",
        "schema": {
          "example": "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157",
          "items": {
            "format": "uuid",
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "customer_id_query": {
        "in": "query",
        "name": "customer_id",
        "schema": {
          "$ref": "#/components/schemas/customer_id1"
        }
      },
      "customer_id_query1": {
        "description": "Return the credit scores associated with the specified customer. Multiple IDs can be provided as a comma-separated list.\n",
        "explode": false,
        "in": "query",
        "name": "customer_id",
        "schema": {
          "example": "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157",
          "items": {
            "format": "uuid",
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "customer_id_query_array": {
        "description": "A list of customer unique identifiers, with a comma separating any values.",
        "explode": false,
        "in": "query",
        "name": "customer_id",
        "schema": {
          "items": {
            "$ref": "#/components/schemas/customer_id"
          },
          "type": "array"
        },
        "style": "form"
      },
      "customer_id_query_required": {
        "in": "query",
        "name": "customer_id",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/customer_id1"
        }
      },
      "digital_wallet_token_id": {
        "in": "path",
        "name": "digital_wallet_token_id",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/digital_wallet_token_id"
        }
      },
      "digital_wallet_token_state_query": {
        "description": "The status of the Digital Wallet Token",
        "in": "query",
        "name": "token_state",
        "schema": {
          "$ref": "#/components/schemas/digital_wallet_token_state"
        }
      },
      "dispute_decision_query": {
        "in": "query",
        "name": "decision",
        "schema": {
          "$ref": "#/components/schemas/dispute_decision"
        }
      },
      "dispute_id": {
        "in": "path",
        "name": "dispute_id",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/dispute_id"
        }
      },
      "dispute_status_query": {
        "in": "query",
        "name": "status",
        "schema": {
          "$ref": "#/components/schemas/dispute_status"
        }
      },
      "document_id": {
        "in": "path",
        "name": "document_id",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/document_id"
        }
      },
      "emboss_name_query": {
        "description": "emboss name",
        "in": "query",
        "name": "emboss_name",
        "schema": {
          "type": "string"
        }
      },
      "enabled_query": {
        "description": "Whether the resource is enabled.\n",
        "in": "query",
        "name": "enabled",
        "schema": {
          "example": true,
          "type": "boolean"
        }
      },
      "end_time_query": {
        "description": "Only display disputes with a final decision time less than or equal to end_time",
        "in": "query",
        "name": "end_time",
        "schema": {
          "format": "date-time",
          "type": "string"
        }
      },
      "exclude_jit_transactions": {
        "description": "Hide \"JIT funding\" transactions from results",
        "in": "query",
        "name": "exclude_jit_transactions",
        "schema": {
          "type": "boolean"
        }
      },
      "expiration_date_query": {
        "description": "The date representing when the card would expire at",
        "in": "query",
        "name": "expiration_date",
        "schema": {
          "example": "2006-01-02",
          "format": "date",
          "type": "string"
        }
      },
      "expires_before_query": {
        "description": "The date representing when the card will expire or become invalid before.",
        "in": "query",
        "name": "expires_before",
        "schema": {
          "example": "2006-01-02",
          "format": "date",
          "type": "string"
        }
      },
      "external_card_id": {
        "description": "The unique identifier of an external card",
        "in": "path",
        "name": "external_card_id",
        "required": true,
        "schema": {
          "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "format": "uuid",
          "type": "string"
        }
      },
      "external_card_status_query": {
        "in": "query",
        "name": "status",
        "schema": {
          "$ref": "#/components/schemas/external_card_status"
        }
      },
      "fdx_token_id": {
        "description": "The unique identifier of an FDX token",
        "in": "path",
        "name": "fdx_token_id",
        "required": true,
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "fee_account_id_query": {
        "description": "Return fees for the specified account.",
        "in": "query",
        "name": "account_id",
        "schema": {
          "example": "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157",
          "items": {
            "format": "uuid",
            "type": "string"
          },
          "type": "array"
        }
      },
      "fee_description_query": {
        "description": "Return fees with the specified description. A * character can be used as a wildcard to match any characters.",
        "example": "Premium Customer ATM Fee",
        "in": "query",
        "name": "description",
        "schema": {
          "type": "string"
        }
      },
      "fee_end_time_query": {
        "description": "Return fees created before this time.",
        "example": "2010-05-06T12:23:34.321Z",
        "in": "query",
        "name": "end_time",
        "schema": {
          "format": "date-time",
          "type": "string"
        }
      },
      "fee_fee_template_id_query": {
        "description": "Return fees resources with a fee template of the specified id. Multiple IDs can be provided as a comma-separated list.\n",
        "explode": false,
        "in": "query",
        "name": "fee_template_id",
        "schema": {
          "example": "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157",
          "items": {
            "format": "uuid",
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "fee_id_path": {
        "description": "The unique identifier of a fee",
        "in": "path",
        "name": "fee_id",
        "required": true,
        "schema": {
          "example": "64438afd-fa20-4010-a573-2bbdca77cdb6",
          "format": "uuid",
          "type": "string"
        }
      },
      "fee_id_query": {
        "description": "Return the fee with the specified id. Multiple IDs can be provided as a comma-separated list.\n",
        "explode": false,
        "in": "query",
        "name": "id",
        "schema": {
          "example": "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157",
          "items": {
            "format": "uuid",
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "fee_start_time_query": {
        "description": "Return fees created at or after this time.",
        "example": "2010-05-06T12:23:34.321Z",
        "in": "query",
        "name": "start_time",
        "schema": {
          "format": "date-time",
          "type": "string"
        }
      },
      "fee_subtype_query": {
        "explode": false,
        "in": "query",
        "name": "subtype",
        "schema": {
          "$ref": "#/components/schemas/fee_subtype"
        },
        "style": "form"
      },
      "fee_template_description_query": {
        "description": "Return fee templates with the specified description. A * character can be used as a wildcard to match any characters.",
        "example": "Premium Customer ATM Fee",
        "in": "query",
        "name": "description",
        "schema": {
          "type": "string"
        }
      },
      "fee_template_id_path": {
        "description": "The unique identifier of a fee template",
        "in": "path",
        "name": "fee_template_id",
        "required": true,
        "schema": {
          "example": "64438afd-fa20-4010-a573-2bbdca77cdb6",
          "format": "uuid",
          "type": "string"
        }
      },
      "fee_template_id_query": {
        "description": "Return fee templates with the specified id. Multiple IDs can be provided as a comma-separated list.\n",
        "explode": false,
        "in": "query",
        "name": "id",
        "schema": {
          "example": "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157",
          "items": {
            "format": "uuid",
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "fee_template_is_enabled_query": {
        "description": "Return fee templates with the specified is_enabled flag.",
        "in": "query",
        "name": "is_enabled",
        "schema": {
          "type": "boolean"
        }
      },
      "fee_template_sort_by_query": {
        "description": "Specifies the sort order for the returned fee templates.\n",
        "explode": false,
        "in": "query",
        "name": "sort_by",
        "schema": {
          "items": {
            "enum": [
              "amount:asc",
              "amount:desc",
              "description:asc",
              "description:desc",
              "is_enabled:asc",
              "is_enabled:desc",
              "last_updated_time:asc",
              "last_updated_time:desc"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "fee_template_subtype_query": {
        "explode": false,
        "in": "query",
        "name": "subtype",
        "schema": {
          "$ref": "#/components/schemas/fee_subtype"
        },
        "style": "form"
      },
      "form_query": {
        "description": "The format of the card",
        "in": "query",
        "name": "form",
        "schema": {
          "$ref": "#/components/schemas/form"
        }
      },
      "from_date_query": {
        "description": "Only display disputes with a creation date greater than or equal to from_date",
        "in": "query",
        "name": "from_date",
        "schema": {
          "format": "date",
          "type": "string"
        }
      },
      "gateway_id": {
        "in": "path",
        "name": "gateway_id",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/gateway_id"
        }
      },
      "group_id": {
        "description": "Only return transactions matching the given `group_id`",
        "in": "query",
        "name": "group_id",
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "id": {
        "description": "Unique resource identifier",
        "explode": false,
        "in": "query",
        "name": "id",
        "schema": {
          "items": {
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "id1": {
        "description": "Transaction ID",
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "example": "472341e0-ea3e-41a1-96bc-fd0185e1eac8",
          "format": "uuid",
          "type": "string"
        }
      },
      "id_path": {
        "description": "ID",
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "id_path1": {
        "description": "The unique resource identifier",
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "format": "uuid",
          "type": "string"
        }
      },
      "id_query": {
        "description": "return results with these comma-separated IDs",
        "explode": false,
        "in": "query",
        "name": "id",
        "schema": {
          "example": "c833e6c6-5c15-4719-90e9-7a6682c483d3,ef17356c-69b0-446e-ae2f-72ab59eeb544",
          "items": {
            "format": "uuid",
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "idempotency_key": {
        "description": "An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.",
        "in": "header",
        "name": "Idempotency-Key",
        "schema": {
          "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "type": "string"
        }
      },
      "idempotency_key_required": {
        "description": "An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.",
        "in": "header",
        "name": "Idempotency-Key",
        "required": true,
        "schema": {
          "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "type": "string"
        }
      },
      "include_child_transactions": {
        "description": "Include transactions from sub-accounts when listing transactions for a given account",
        "in": "query",
        "name": "include_child_transactions",
        "schema": {
          "type": "boolean"
        }
      },
      "internal_account_id": {
        "description": "Only return transactions matching the given `internal_account_id`",
        "in": "query",
        "name": "internal_account_id",
        "schema": {
          "format": "uid",
          "type": "string"
        }
      },
      "is_active_query": {
        "description": "return results that match this active status",
        "in": "query",
        "name": "is_active",
        "schema": {
          "type": "boolean"
        }
      },
      "last_four_query": {
        "description": "The last 4 digits of the card PAN",
        "in": "query",
        "name": "last_four",
        "schema": {
          "example": "1234",
          "pattern": "^\\d{4}$",
          "type": "string"
        }
      },
      "lat": {
        "in": "query",
        "name": "lat",
        "schema": {
          "description": "Latitude of the location.",
          "example": 37.7749,
          "format": "float",
          "type": "number"
        }
      },
      "limit": {
        "in": "query",
        "name": "limit",
        "schema": {
          "default": 100,
          "description": "Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.\n",
          "example": 100,
          "minimum": 1,
          "type": "integer"
        }
      },
      "lng": {
        "in": "query",
        "name": "lng",
        "schema": {
          "description": "Longitude of the location.",
          "example": -122.4194,
          "format": "float",
          "type": "number"
        }
      },
      "name_query": {
        "description": "return results that match this name",
        "in": "query",
        "name": "name",
        "schema": {
          "type": "string"
        }
      },
      "num_related_accounts_gte_query": {
        "description": "return results that are associated with at least this many accounts",
        "in": "query",
        "name": "num_related_accounts_gte",
        "schema": {
          "minimum": 0,
          "type": "integer"
        }
      },
      "num_related_accounts_lte_query": {
        "description": "return results that are associated with at most this many accounts",
        "in": "query",
        "name": "num_related_accounts_lte",
        "schema": {
          "minimum": 0,
          "type": "integer"
        }
      },
      "num_related_accounts_query": {
        "description": "return results that are associated with this many accounts",
        "in": "query",
        "name": "num_related_accounts",
        "schema": {
          "minimum": 0,
          "type": "integer"
        }
      },
      "page_token": {
        "in": "query",
        "name": "page_token",
        "schema": {
          "description": "Optional pagination token to be provided to retrieve subsequent pages, returned from previous get",
          "example": "a8937a0d",
          "type": "string"
        }
      },
      "payment_account_reference": {
        "in": "query",
        "name": "payment_account_reference",
        "schema": {
          "$ref": "#/components/schemas/payment_account_reference"
        }
      },
      "payment_rail_query": {
        "description": "Specifies the payment rail type for the returned disputes.\n",
        "explode": false,
        "in": "query",
        "name": "payment_rail",
        "schema": {
          "$ref": "#/components/schemas/payment_rail"
        },
        "style": "form"
      },
      "payment_type_query": {
        "in": "query",
        "name": "payment_type",
        "schema": {
          "$ref": "#/components/schemas/payment_type"
        }
      },
      "pending_amount": {
        "description": "Only return transactions equal to the given `pending_amount`",
        "in": "query",
        "name": "pending_amount",
        "schema": {
          "type": "integer"
        }
      },
      "pending_amount_gt": {
        "description": "only return transactions with `pending_amount` greater than `pending_amount_gt`",
        "in": "query",
        "name": "pending_amount_gt",
        "schema": {
          "type": "integer"
        }
      },
      "pending_amount_gte": {
        "description": "Only return transactions with `pending_amount` greater than or equal to `pending_amount_gte`",
        "in": "query",
        "name": "pending_amount_gte",
        "schema": {
          "type": "integer"
        }
      },
      "pending_amount_lt": {
        "description": "Only return transactions with `pending_amount` less than `pending_amount_lt`",
        "in": "query",
        "name": "pending_amount_lt",
        "schema": {
          "type": "integer"
        }
      },
      "pending_amount_lte": {
        "description": "Only return transactions with `pending_amount` less than or equal to `pending_amount_lte`",
        "in": "query",
        "name": "pending_amount_lte",
        "schema": {
          "type": "integer"
        }
      },
      "posted_amount": {
        "description": "Only return transactions equal to the given `posted_amount`",
        "in": "query",
        "name": "posted_amount",
        "schema": {
          "type": "integer"
        }
      },
      "posted_amount_gt": {
        "description": "only return transactions with `posted_amount` greater than `posted_amount_gt`",
        "in": "query",
        "name": "posted_amount_gt",
        "schema": {
          "type": "integer"
        }
      },
      "posted_amount_gte": {
        "description": "Only return transactions with `posted_amount` greater than or equal to `posted_amount_gte`",
        "in": "query",
        "name": "posted_amount_gte",
        "schema": {
          "type": "integer"
        }
      },
      "posted_amount_lt": {
        "description": "Only return transactions with `posted_amount` less than `posted_amount_lt`",
        "in": "query",
        "name": "posted_amount_lt",
        "schema": {
          "type": "integer"
        }
      },
      "posted_amount_lte": {
        "description": "Only return transactions with `posted_amount` less than or equal to `posted_amount_lte`",
        "in": "query",
        "name": "posted_amount_lte",
        "schema": {
          "type": "integer"
        }
      },
      "posted_date": {
        "description": "Only return transactions matching the given `posted_date`",
        "in": "query",
        "name": "posted_date",
        "schema": {
          "format": "date",
          "type": "string"
        }
      },
      "posted_date_from": {
        "description": "Only return transactions later than the given `posted_date`",
        "in": "query",
        "name": "posted_date_from",
        "schema": {
          "format": "date",
          "type": "string"
        }
      },
      "posted_date_to": {
        "description": "Only return transactions up to the given `posted_date`",
        "in": "query",
        "name": "posted_date_to",
        "schema": {
          "format": "date",
          "type": "string"
        }
      },
      "related_resource_id_query": {
        "description": "Unique identifier for the related resource. Multiple IDs can be provided as a comma-separated list.\n",
        "explode": false,
        "in": "query",
        "name": "related_resource_id",
        "schema": {
          "example": "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157",
          "items": {
            "format": "uuid",
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "related_transaction_id_query": {
        "in": "query",
        "name": "related_transaction_id",
        "schema": {
          "description": "The unique identifier for a transaction related to the dispute, such as a provisional credit or chargeback.",
          "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "format": "uuid",
          "type": "string"
        }
      },
      "reward_account_id_query": {
        "description": "Return rewards for the specified account.",
        "in": "query",
        "name": "account_id",
        "schema": {
          "example": "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157",
          "items": {
            "format": "uuid",
            "type": "string"
          },
          "type": "array"
        }
      },
      "reward_description_query": {
        "description": "Return rewards with the specified description.",
        "example": "Premium Customer ATM Reward",
        "in": "query",
        "name": "description",
        "schema": {
          "type": "string"
        }
      },
      "reward_end_time_query": {
        "description": "Return rewards created before this time.",
        "example": "2010-05-06T12:23:34.321Z",
        "in": "query",
        "name": "end_time",
        "schema": {
          "format": "date-time",
          "type": "string"
        }
      },
      "reward_id_path": {
        "description": "The unique identifier of a reward",
        "in": "path",
        "name": "reward_id",
        "required": true,
        "schema": {
          "example": "64438afd-fa20-4010-a573-2bbdca77cdb6",
          "format": "uuid",
          "type": "string"
        }
      },
      "reward_id_query": {
        "description": "Return the reward with the specified id. Multiple IDs can be provided as a comma-separated list.\n",
        "explode": false,
        "in": "query",
        "name": "id",
        "schema": {
          "example": "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157",
          "items": {
            "format": "uuid",
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "reward_reward_template_id_query": {
        "description": "Return rewards resources with a reward template of the specified id. Multiple IDs can be provided as a comma-separated list.\n",
        "explode": false,
        "in": "query",
        "name": "reward_template_id",
        "schema": {
          "example": "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157",
          "items": {
            "format": "uuid",
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "reward_start_time_query": {
        "description": "Return rewards created at or after this time.",
        "example": "2010-05-06T12:23:34.321Z",
        "in": "query",
        "name": "start_time",
        "schema": {
          "format": "date-time",
          "type": "string"
        }
      },
      "reward_subtype_query": {
        "explode": false,
        "in": "query",
        "name": "subtype",
        "schema": {
          "$ref": "#/components/schemas/reward_subtype"
        },
        "style": "form"
      },
      "reward_template_description_query": {
        "description": "Return reward templates with the specified description. A * character can be used as a wildcard to match any characters.",
        "example": "Referral Reward",
        "in": "query",
        "name": "description",
        "schema": {
          "type": "string"
        }
      },
      "reward_template_id_path": {
        "description": "The unique identifier of a reward template",
        "in": "path",
        "name": "reward_template_id",
        "required": true,
        "schema": {
          "example": "64438afd-fa20-4010-a573-2bbdca77cdb6",
          "format": "uuid",
          "type": "string"
        }
      },
      "reward_template_id_query": {
        "description": "Return reward templates with the specified id. Multiple IDs can be provided as a comma-separated list.\n",
        "explode": false,
        "in": "query",
        "name": "id",
        "schema": {
          "example": "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157",
          "items": {
            "format": "uuid",
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "reward_template_is_enabled_query": {
        "description": "Return reward templates with the specified is_enabled flag.",
        "in": "query",
        "name": "is_enabled",
        "schema": {
          "type": "boolean"
        }
      },
      "reward_template_sort_by_query": {
        "description": "Specifies the sort order for the returned reward templates.\n",
        "explode": false,
        "in": "query",
        "name": "sort_by",
        "schema": {
          "items": {
            "enum": [
              "amount:asc",
              "amount:desc",
              "description:asc",
              "description:desc",
              "is_enabled:asc",
              "is_enabled:desc",
              "last_updated_time:asc",
              "last_updated_time:desc"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "reward_template_subtype_query": {
        "explode": false,
        "in": "query",
        "name": "subtype",
        "schema": {
          "$ref": "#/components/schemas/reward_subtype"
        },
        "style": "form"
      },
      "show_partial_clearings": {
        "description": "Include a transaction for each clearing of an authorization.",
        "in": "query",
        "name": "show_partial_clearings",
        "schema": {
          "type": "boolean"
        }
      },
      "sort_by": {
        "description": "Specifies the sort order for the returned applications.\n",
        "explode": false,
        "in": "query",
        "name": "sort_by",
        "schema": {
          "items": {
            "enum": [
              "creation_time:asc",
              "creation_time:desc",
              "last_updated_time:asc",
              "last_updated_time:desc",
              "status:asc",
              "status:desc",
              "type:asc",
              "type:desc"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "spend_control_direction_query": {
        "in": "query",
        "name": "direction",
        "schema": {
          "$ref": "#/components/schemas/spend_control_direction"
        }
      },
      "spend_control_id": {
        "in": "path",
        "name": "spend_control_id",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/spend_control_id"
        }
      },
      "spend_control_sort_by_query": {
        "description": "Specifies the sort order for returned Spend Controls.\n",
        "explode": false,
        "in": "query",
        "name": "sort_by",
        "schema": {
          "items": {
            "enum": [
              "amount_limit:asc",
              "amount_limit:desc",
              "is_active:asc",
              "is_active:desc",
              "last_modified_time:asc",
              "last_modified_time:desc",
              "name:asc",
              "name:desc",
              "num_related_accounts:asc",
              "num_related_accounts:desc"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "start_time_query": {
        "description": "Only display disputes with a creation time greater than or equal to start_time",
        "in": "query",
        "name": "start_time",
        "schema": {
          "format": "date-time",
          "type": "string"
        }
      },
      "statement_id": {
        "description": "The unique identifier of a statement",
        "in": "path",
        "name": "statement_id",
        "required": true,
        "schema": {
          "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "format": "uuid",
          "type": "string"
        }
      },
      "status_enum": {
        "description": "Only return transactions with the given status or statuses",
        "explode": false,
        "in": "query",
        "name": "status",
        "schema": {
          "example": "PENDING,DECLINED",
          "items": {
            "$ref": "#/components/schemas/transaction_statuses"
          },
          "type": "array"
        }
      },
      "subtype_enum": {
        "description": "Only return transactions matching the given subtype",
        "explode": false,
        "in": "query",
        "name": "subtype",
        "schema": {
          "example": "OUTGOING_DEBIT,INCOMING_CREDIT",
          "items": {
            "$ref": "#/components/schemas/all_transaction_subtypes"
          },
          "type": "array"
        }
      },
      "synctera_pay_amount_query": {
        "description": "Query transfers with the exact amount in minor units (ie cents)",
        "in": "query",
        "name": "amount",
        "schema": {
          "example": 100,
          "type": "string"
        }
      },
      "synctera_pay_currency_query": {
        "description": "Currency of the transfer",
        "in": "query",
        "name": "currency",
        "schema": {
          "example": "USD",
          "type": "string"
        }
      },
      "synctera_pay_customer_id_query": {
        "description": "Customer ID of the transfer",
        "in": "query",
        "name": "customer_id",
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "synctera_pay_dc_sign_query": {
        "description": "DC sign of the transfer",
        "in": "query",
        "name": "dc_sign",
        "schema": {
          "type": "string"
        }
      },
      "synctera_pay_destination_account_id_query": {
        "description": "Destination account ID",
        "in": "query",
        "name": "destination_account_id",
        "schema": {
          "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "format": "uuid",
          "type": "string"
        }
      },
      "synctera_pay_destination_account_owner_name_query": {
        "description": "Destination account owner name",
        "in": "query",
        "name": "destination_account_owner_name",
        "schema": {
          "example": "Jane Joe",
          "type": "string"
        }
      },
      "synctera_pay_effective_date_query": {
        "description": "Effective date of the transfer",
        "in": "query",
        "name": "effective_date",
        "schema": {
          "type": "string"
        }
      },
      "synctera_pay_from_effective_date_query": {
        "description": "From effective date of the transfer",
        "in": "query",
        "name": "from_effective_date",
        "schema": {
          "type": "string"
        }
      },
      "synctera_pay_from_posting_date_query": {
        "description": "From posting date of the transfer",
        "in": "query",
        "name": "from_posting_date",
        "schema": {
          "type": "string"
        }
      },
      "synctera_pay_id_query": {
        "description": "Synctera Pay Transfer ID",
        "in": "query",
        "name": "id",
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "synctera_pay_is_same_day_query": {
        "description": "Is same day transfer",
        "in": "query",
        "name": "is_same_day",
        "schema": {
          "type": "boolean"
        }
      },
      "synctera_pay_max_amount_query": {
        "description": "Query transfers with at most this amount in minor units (ie cents)",
        "in": "query",
        "name": "max_amount",
        "schema": {
          "example": 100,
          "minimum": 1,
          "type": "integer"
        }
      },
      "synctera_pay_min_amount_query": {
        "description": "Query transfers with at least this amount in minor units (ie cents)",
        "in": "query",
        "name": "min_amount",
        "schema": {
          "example": 100,
          "minimum": 1,
          "type": "integer"
        }
      },
      "synctera_pay_network_status_query": {
        "description": "Network status of the transfer",
        "in": "query",
        "name": "network_status",
        "schema": {
          "type": "string"
        }
      },
      "synctera_pay_originating_account_id_query": {
        "description": "Originating account ID",
        "in": "query",
        "name": "originating_account_id",
        "schema": {
          "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "format": "uuid",
          "type": "string"
        }
      },
      "synctera_pay_originating_account_owner_name_query": {
        "description": "Originating account owner name",
        "in": "query",
        "name": "originating_account_owner_name",
        "schema": {
          "type": "string"
        }
      },
      "synctera_pay_posting_date_query": {
        "description": "Posting date of the transfer",
        "in": "query",
        "name": "posting_date",
        "schema": {
          "type": "string"
        }
      },
      "synctera_pay_reference_id_query": {
        "description": "Reference ID of the transfer",
        "in": "query",
        "name": "reference_id",
        "schema": {
          "type": "string"
        }
      },
      "synctera_pay_status_query": {
        "description": "Status of the transfer",
        "in": "query",
        "name": "status",
        "schema": {
          "type": "string"
        }
      },
      "synctera_pay_subtype_query": {
        "description": "Subtype of the transfer",
        "in": "query",
        "name": "subtype",
        "schema": {
          "type": "string"
        }
      },
      "synctera_pay_to_effective_date_query": {
        "description": "To effective date of the transfer",
        "in": "query",
        "name": "to_effective_date",
        "schema": {
          "type": "string"
        }
      },
      "synctera_pay_to_posting_date_query": {
        "description": "To posting date of the transfer",
        "in": "query",
        "name": "to_posting_date",
        "schema": {
          "type": "string"
        }
      },
      "synctera_pay_vendor_id_query": {
        "description": "Synctera Pay Vendor ID",
        "in": "query",
        "name": "id",
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "synctera_pay_vendor_name_query": {
        "description": "The name of the Synctera Pay vendor.\n",
        "in": "query",
        "name": "name",
        "schema": {
          "type": "string"
        }
      },
      "three_ds_decision_gateway_id": {
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/three_ds_decision_gateway_id"
        }
      },
      "to_date_query": {
        "description": "Only display disputes with a creation date less than or equal to to_date",
        "in": "query",
        "name": "to_date",
        "schema": {
          "format": "date",
          "type": "string"
        }
      },
      "transaction_id_query": {
        "in": "query",
        "name": "transaction_id",
        "schema": {
          "$ref": "#/components/schemas/transaction_id"
        }
      },
      "transfer_id": {
        "description": "The unique identifier of a transfer",
        "in": "path",
        "name": "transfer_id",
        "required": true,
        "schema": {
          "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "format": "uuid",
          "type": "string"
        }
      },
      "type_enum": {
        "description": "Only return transactions matching the given type",
        "explode": false,
        "in": "query",
        "name": "type",
        "schema": {
          "example": "ACH,CARD",
          "items": {
            "$ref": "#/components/schemas/transaction_types"
          },
          "type": "array"
        }
      },
      "webhook_id": {
        "description": "Webhook ID",
        "in": "path",
        "name": "webhook_id",
        "required": true,
        "schema": {
          "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
          "format": "uuid",
          "type": "string"
        }
      }
    },
    "responses": {
      "already_exists": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        },
        "description": "Resource already exists"
      },
      "bad_request": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        },
        "description": "Bad request"
      },
      "delete_response": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/delete_response"
            }
          }
        },
        "description": "Resource has been deleted"
      },
      "forbidden": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        },
        "description": "Forbidden"
      },
      "internal_server_error": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        },
        "description": "Internal server error"
      },
      "not_found": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        },
        "description": "Resource not found"
      },
      "unauthorized": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        },
        "description": "Unauthorized"
      },
      "unprocessable_entity": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        },
        "description": "Unprocessable entity"
      }
    },
    "schemas": {
      "account_id": {
        "description": "The unique identifier of an account",
        "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
        "format": "uuid",
        "type": "string"
      },
      "account_range_id": {
        "description": "The unique identifier of a account range",
        "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
        "format": "uuid",
        "type": "string"
      },
      "account_summary": {
        "properties": {
          "account_number": {
            "description": "Account number",
            "type": "string"
          },
          "account_status": {
            "description": "Account Status",
            "type": "string"
          },
          "account_type": {
            "description": "The type of the account.",
            "type": "string"
          },
          "balance_ceiling": {
            "properties": {
              "balance": {
                "description": "Maximum balance in the account's currency. Unit in ISO 4217 minor currency units.",
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "balance_floor": {
            "properties": {
              "balance": {
                "description": "Minimum balance in the account's currency. Unit in ISO 4217 minor currency units.",
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "creation_time": {
            "description": "Account creation time",
            "format": "date-time",
            "type": "string"
          },
          "currency": {
            "description": "Account currency or account settlement currency. ISO 4217 alphabetic currency code. Default USD",
            "example": "USD",
            "pattern": "^[A-Z]{3}$",
            "type": "string"
          },
          "customer_type": {
            "description": "Customer type",
            "type": "string"
          },
          "financial_institution": {
            "$ref": "#/components/schemas/financial_institution"
          },
          "id": {
            "description": "The unique identifier of the account the statement belongs to",
            "format": "uuid",
            "type": "string"
          },
          "last_updated_time": {
            "description": "Account last modification time",
            "format": "date-time",
            "type": "string"
          },
          "nickname": {
            "description": "User provided account nickname",
            "type": "string"
          }
        },
        "title": "Account Summary",
        "type": "object"
      },
      "ach_action": {
        "enum": [
          "ACH_RETURN",
          "STOP_PAYMENT"
        ],
        "type": "string"
      },
      "ach_action_state": {
        "enum": [
          "ACCEPT",
          "CREATE",
          "MORE_INFO_REQUIRED",
          "REJECT"
        ],
        "type": "string"
      },
      "ach_dispute_action": {
        "description": "Create an action against a disputed ACH transaction",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/ach_action"
          },
          "message": {
            "description": "Message text related to ACH dispute action\n* Max length for debit transactions is 38 characters\n",
            "maxLength": 100,
            "type": "string"
          },
          "payment_rail": {
            "$ref": "#/components/schemas/payment_rail"
          },
          "reason_code": {
            "$ref": "#/components/schemas/ach_dispute_reason_codes"
          },
          "return_code": {
            "$ref": "#/components/schemas/ach_dispute_return_codes"
          },
          "state": {
            "$ref": "#/components/schemas/ach_action_state"
          },
          "supporting_doc_id": {
            "$ref": "#/components/schemas/document_id"
          }
        },
        "required": [
          "action",
          "payment_rail",
          "state"
        ],
        "type": "object"
      },
      "ach_dispute_action_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/ach_action"
          },
          "creation_time": {
            "description": "The date and time the resource was created.",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the dispute action",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "message": {
            "description": "Message text related to card dispute action",
            "maxLength": 100,
            "type": "string"
          },
          "payment_rail": {
            "$ref": "#/components/schemas/payment_rail"
          },
          "reason_code": {
            "$ref": "#/components/schemas/ach_dispute_reason_codes"
          },
          "return_code": {
            "$ref": "#/components/schemas/ach_dispute_return_codes"
          },
          "status": {
            "$ref": "#/components/schemas/ach_dispute_action_status"
          },
          "supporting_doc_id": {
            "$ref": "#/components/schemas/document_id"
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          }
        },
        "required": [
          "action",
          "creation_time",
          "id",
          "payment_rail",
          "status",
          "tenant"
        ],
        "type": "object"
      },
      "ach_dispute_action_status": {
        "description": "| Status    | Description                                                                                                 |\n|-----------|-------------------------------------------------------------------------------------------------------------|\n| SUBMITTED | The action has been submitted                                                                               |\n| ACCEPTED  | The action has been accepted                                                                                |\n| REJECTED  | The action has been rejected                                                                                |\n| MORE_INFO_REQUIRED | The action contains a directive that more information is required                                  |\n",
        "enum": [
          "ACCEPTED",
          "MORE_INFO_REQUIRED",
          "REJECTED",
          "SUBMITTED"
        ],
        "type": "string"
      },
      "ach_dispute_reason_codes": {
        "description": "| Reason Code                      | Description                                                                                                                                                                                                                             |\n|----------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| UNAUTHORIZED_TRANSACTION         | A party claims that a transaction was not authorized by the account holder                                                                                                                                                              |\n| INCORRECT_TRANSACTION_AMOUNT     | The amount of the ACH transaction does not match the agreed-upon or expected amount.                                                                                                                                                    |\n| DUPLICATE_TRANSACTION            | The same transaction is processed more than once, leading to duplicate charges.                                                                                                                                                         |\n| MISTIMED_WITHDRAWAL              | The timing of the transaction is not in accordance with the agreed-upon schedule, leading to a dispute.                                                                                                                                 |\n| TRANSACTION_NOT_RECOGNIZED       | The account holder does not recognize the transaction, possibly due to a mistake or fraudulent activity                                                                                                                                 |\n",
        "enum": [
          "DUPLICATE_TRANSACTION",
          "INCORRECT_TRANSACTION_AMOUNT",
          "MISTIMED_WITHDRAWAL",
          "TRANSACTION_NOT_RECOGNIZED",
          "UNAUTHORIZED_TRANSACTION"
        ],
        "type": "string"
      },
      "ach_dispute_request": {
        "allOf": [
          {
            "$ref": "#/components/schemas/dispute_request_details"
          }
        ]
      },
      "ach_dispute_response": {
        "allOf": [
          {
            "properties": {
              "action_history": {
                "description": "History of all the action filed for the dispute.",
                "items": {
                  "$ref": "#/components/schemas/ach_dispute_action_response"
                },
                "type": "array"
              },
              "available_actions": {
                "description": "List of actions that can be taken on the dispute.",
                "items": {
                  "$ref": "#/components/schemas/available_ach_action"
                },
                "type": "array"
              },
              "credit_status": {
                "$ref": "#/components/schemas/dispute_credit_status"
              },
              "lifecycle_state": {
                "$ref": "#/components/schemas/ach_lifecycle_state"
              }
            },
            "required": [
              "action_history",
              "available_actions",
              "credit_status",
              "lifecycle_state"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/dispute_response_details"
          }
        ]
      },
      "ach_dispute_return_codes": {
        "description": "This field is required for dispute action ACH_RETURN. Upon successful dispute resolution this return code will be used when sending the outgoing return.\n",
        "enum": [
          "R05",
          "R07",
          "R10",
          "R29",
          "R34",
          "R51"
        ],
        "type": "string"
      },
      "ach_lifecycle_state": {
        "description": "Current lifecycle state of the dispute.",
        "enum": [
          "ACH_AWAITING_APPROVAL",
          "ACH_FILED_WITH_NETWORK",
          "ACH_MORE_INFO_REQUIRED",
          "ACH_REJECTED",
          "DENIED",
          "PENDING_ACTION"
        ],
        "type": "string"
      },
      "ach_transaction": {
        "allOf": [
          {
            "properties": {
              "ach_transaction": {
                "$ref": "#/components/schemas/ach_transaction_data"
              },
              "subtype": {
                "$ref": "#/components/schemas/ach_transaction_subtypes"
              }
            },
            "required": [
              "ach_transaction",
              "subtype"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/base_transaction"
          }
        ]
      },
      "ach_transaction_data": {
        "description": "Transaction metadata specific to transactions with type `ACH`",
        "properties": {
          "description": {
            "description": "The ACH company entry description",
            "type": "string"
          },
          "file_name": {
            "description": "For outgoing ACH, the name of the file the entry went out in. For incoming ACH, the name of the file the entry came from.\nThe value will be omitted for outgoing payments that have not yet been written into a file.",
            "type": "string"
          },
          "id": {
            "description": "The ACH payment uuid (used in `/v0/ach` endpoint)",
            "type": "string"
          },
          "identification_number": {
            "description": "An internal identification number used to uniquely identify the ACH entry. For Person-to-Person WEB entries, this should name of the originator.",
            "type": "string"
          },
          "originating_account_id": {
            "description": "The uuid of the account originating the ACH. This will be a customer account uuid for outgoing ACH, and omitted for incoming ACH.",
            "format": "uuid",
            "type": "string",
            "x-go-type": "string"
          },
          "originating_company_name": {
            "description": "The name of the company originating the ACH entry.",
            "type": "string"
          },
          "originating_routing_number": {
            "description": "The routing number of the originating DFI.",
            "type": "string"
          },
          "originator_name": {
            "description": "The name of the originator, if available.",
            "type": "string"
          },
          "receiving_account_id": {
            "description": "The uuid of the account receiving the ACH entry. In the case of an outgoing ACH, this will be an external_account uuid. For incoming ACH, this will be an account uuid.",
            "format": "uuid",
            "type": "string",
            "x-go-type": "string"
          },
          "recipient_name": {
            "description": "The name of the recipient according to the ACH entry. This should map to the ACH `Individual Name` field.",
            "type": "string"
          },
          "return_code": {
            "description": "The ACH return code, if this transaction was a return",
            "example": "R01",
            "type": "string"
          },
          "trace_number": {
            "description": "The ACH trace number associated with the transaction",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "ach_transaction_subtypes": {
        "description": "The set of valid ACH transaction subtypes",
        "enum": [
          "INCOMING_CREDIT",
          "INCOMING_CREDIT_CONTESTED_RETURN",
          "INCOMING_CREDIT_DISHONORED_RETURN",
          "INCOMING_CREDIT_RETURN",
          "INCOMING_CREDIT_REVERSAL",
          "INCOMING_DEBIT",
          "INCOMING_DEBIT_CONTESTED_RETURN",
          "INCOMING_DEBIT_DISHONORED_RETURN",
          "INCOMING_DEBIT_DISHONORED_RETURN_REVERSAL",
          "INCOMING_DEBIT_RETURN",
          "INCOMING_DEBIT_RETURN_REVERSAL",
          "INCOMING_DEBIT_REVERSAL",
          "OUTGOING_CREDIT",
          "OUTGOING_CREDIT_CONTESTED_RETURN",
          "OUTGOING_CREDIT_DISHONORED_RETURN",
          "OUTGOING_CREDIT_RETURN",
          "OUTGOING_CREDIT_REVERSAL",
          "OUTGOING_DEBIT",
          "OUTGOING_DEBIT_CONTESTED_RETURN",
          "OUTGOING_DEBIT_DISHONORED_RETURN",
          "OUTGOING_DEBIT_RETURN",
          "OUTGOING_DEBIT_REVERSAL",
          "PRENOTE",
          "TEMP_HOLD"
        ],
        "type": "string"
      },
      "action": {
        "properties": {
          "data": {
            "type": "object"
          },
          "message": {
            "type": "string"
          },
          "timestamp": {
            "format": "date-time"
          }
        },
        "required": [
          "data",
          "message",
          "timestamp"
        ],
        "type": "object"
      },
      "address": {
        "properties": {
          "address_line_1": {
            "description": "Street address line 1",
            "example": "100 Main St.",
            "maxLength": 100,
            "type": "string"
          },
          "address_line_2": {
            "description": "Street address line 2",
            "example": "Suite 99",
            "maxLength": 100,
            "type": "string"
          },
          "city": {
            "description": "City",
            "example": "New York",
            "type": "string"
          },
          "country_code": {
            "description": "ISO-3166-1 Alpha-2 country code",
            "example": "US",
            "pattern": "^[A-Z]{2}$",
            "type": "string"
          },
          "postal_code": {
            "description": "Postal code",
            "example": "49633",
            "type": "string"
          },
          "state": {
            "description": "State, region, province, or prefecture.\nThis is the ISO-3166-2 subdivision code, excluding the country prefix.\nFor example, TX for Texas USA or TAM for Tamaulipas Mexico.\nIts length varies by country, e.g. 2 characters for US, 3 for MX.\n",
            "example": "NY",
            "type": "string"
          }
        },
        "required": [
          "address_line_1",
          "city",
          "country_code",
          "postal_code",
          "state"
        ],
        "type": "object"
      },
      "address1": {
        "properties": {
          "address_line_1": {
            "type": "string"
          },
          "address_line_2": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "country_code": {
            "type": "string"
          },
          "postal_code": {
            "type": "string"
          },
          "state": {
            "type": "string"
          }
        },
        "title": "Address",
        "type": "object"
      },
      "adverse_action": {
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/metadata"
          },
          "notification_time": {
            "description": "The date and time the adverse action notice was sent.",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          },
          "purpose": {
            "$ref": "#/components/schemas/purpose"
          },
          "reasons": {
            "description": "Reasons (up to 5) provided to customers when adverse action is taken.",
            "items": {
              "$ref": "#/components/schemas/reason"
            },
            "type": "array"
          },
          "related_resource_id": {
            "description": "Unique identifier for the related resource.",
            "example": "42ab5301-92b5-4f8a-bbc4-058119d3f7dc",
            "format": "uuid",
            "type": "string"
          },
          "related_resource_type": {
            "$ref": "#/components/schemas/related_resource_type"
          }
        },
        "required": [
          "notification_time",
          "purpose",
          "reasons",
          "related_resource_id",
          "related_resource_type"
        ],
        "type": "object"
      },
      "adverse_action_list": {
        "allOf": [
          {
            "properties": {
              "adverse_actions": {
                "items": {
                  "$ref": "#/components/schemas/adverse_action_response"
                },
                "type": "array"
              }
            },
            "required": [
              "adverse_actions"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "adverse_action_response": {
        "allOf": [
          {
            "$ref": "#/components/schemas/adverse_action"
          },
          {
            "properties": {
              "creation_time": {
                "description": "The date and time the resource was created.",
                "example": "2010-05-06T12:23:34.321Z",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "id": {
                "description": "Unique identifier for this adverse action notice.",
                "example": "9980ff38-1876-4fc7-8bc9-bf0490e2f746",
                "format": "uuid",
                "readOnly": true,
                "type": "string"
              },
              "last_updated_time": {
                "description": "The date and time the resource was last update.",
                "example": "2010-05-06T12:23:34.321Z",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              }
            },
            "required": [
              "creation_time",
              "id",
              "last_updated_time"
            ]
          }
        ],
        "type": "object"
      },
      "all_application_status": {
        "description": "Application status values for all types of applications\n",
        "enum": [
          "APPROVED",
          "CREDIT_ACCEPTED_BY_CUSTOMER",
          "CREDIT_APPROVED",
          "CREDIT_DENIED",
          "CREDIT_NOT_ACCEPTED_BY_CUSTOMER",
          "DENIED",
          "IN_PROGRESS",
          "REVIEW_INFO_REQUESTED",
          "REVIEW_ON_SYNCTERA",
          "SUBMITTED"
        ],
        "title": "Application Status",
        "type": "string"
      },
      "all_transaction_subtypes": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/fednow_transaction_subtypes"
          },
          {
            "$ref": "#/components/schemas/external_card_transaction_subtypes"
          },
          {
            "$ref": "#/components/schemas/wire_transaction_subtypes"
          },
          {
            "$ref": "#/components/schemas/card_transaction_subtypes"
          },
          {
            "$ref": "#/components/schemas/check_transaction_subtypes"
          },
          {
            "$ref": "#/components/schemas/eft_ca_transaction_subtypes"
          },
          {
            "$ref": "#/components/schemas/internal_transfer_transaction_subtypes"
          },
          {
            "$ref": "#/components/schemas/synctera_pay_transaction_subtypes"
          },
          {
            "$ref": "#/components/schemas/cash_transaction_subtypes"
          },
          {
            "$ref": "#/components/schemas/reward_subtype"
          },
          {
            "$ref": "#/components/schemas/fee_subtype"
          },
          {
            "$ref": "#/components/schemas/ach_transaction_subtypes"
          }
        ],
        "description": "The set of all possible transaction subtypes"
      },
      "apple_digital_wallet_provision_request": {
        "properties": {
          "certificates": {
            "description": "Base64-encoded leaf and sub-CA certificates provided by Apple. The first element of the array should be the leaf certificate, followed by the sub-CA.",
            "items": {
              "description": "Array of Base64 encoded certificates from Apple.",
              "type": "string"
            },
            "type": "array"
          },
          "device_type": {
            "$ref": "#/components/schemas/device_type"
          },
          "nonce": {
            "description": "One-time-use nonce provided by Apple for security purposes.",
            "type": "string"
          },
          "nonce_signature": {
            "description": "Apple-provided signature to the nonce.",
            "type": "string"
          },
          "provisioning_app_version": {
            "$ref": "#/components/schemas/provisioning_app_version"
          }
        },
        "required": [
          "certificates",
          "device_type",
          "nonce",
          "nonce_signature",
          "provisioning_app_version"
        ],
        "type": "object"
      },
      "apple_digital_wallet_provision_response": {
        "properties": {
          "activation_data": {
            "type": "string"
          },
          "card_id": {
            "$ref": "#/components/schemas/card_id"
          },
          "creation_time": {
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          },
          "encrypted_pass_data": {
            "type": "string"
          },
          "ephemeral_public_key": {
            "type": "string"
          },
          "last_updated_time": {
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "apple_pay_contact": {
        "properties": {
          "address_lines": {
            "description": "Street portion of the contact’s address",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "administrative_area": {
            "description": "The state for the contact",
            "type": "string"
          },
          "country": {
            "description": "The name of the country or region for the contact",
            "type": "string"
          },
          "country_code": {
            "$ref": "#/components/schemas/country_code"
          },
          "email_address": {
            "description": "Email address",
            "type": "string"
          },
          "family_name": {
            "description": "Family name",
            "type": "string"
          },
          "given_name": {
            "description": "Given name",
            "type": "string"
          },
          "locality": {
            "description": "The city for the contact",
            "type": "string"
          },
          "phone_number": {
            "description": "Phone number",
            "type": "string"
          },
          "phonetic_family_name": {
            "description": "Phonetic spelling of the contact’s family name",
            "type": "string"
          },
          "phonetic_given_name": {
            "description": "Phonetic spelling of the contact’s given name",
            "type": "string"
          },
          "postal_code": {
            "description": "Postal code",
            "type": "string"
          },
          "sub_administrative_area": {
            "description": "The subadministrative area (such as a county or other region) in a postal address",
            "type": "string"
          },
          "sub_locality": {
            "description": "Additional information associated with the location, typically defined at the city or town level (such as district or neighborhood), in a postal address",
            "type": "string"
          }
        },
        "type": "object"
      },
      "apple_pay_payment": {
        "description": "Payload containing payment information, obtained from Apple following payment authorization",
        "properties": {
          "billing_contact": {
            "$ref": "#/components/schemas/apple_pay_contact"
          },
          "shipping_contact": {
            "$ref": "#/components/schemas/apple_pay_contact"
          },
          "token": {
            "$ref": "#/components/schemas/apple_pay_payment_token"
          }
        },
        "required": [
          "token"
        ],
        "type": "object"
      },
      "apple_pay_payment_data": {
        "description": "Encrypted payment data",
        "properties": {
          "data": {
            "description": "Encrypted payment data, Base64 encoded",
            "type": "string"
          },
          "header": {
            "$ref": "#/components/schemas/apple_pay_payment_header"
          },
          "signature": {
            "description": "Signature of the payment and header data",
            "type": "string"
          },
          "version": {
            "description": "* RSA_v1 encryption is not currently supported. Version information about the payment token\n",
            "enum": [
              "EC_v1",
              "RSA_v1"
            ],
            "type": "string"
          }
        },
        "required": [
          "data",
          "header",
          "signature",
          "version"
        ],
        "type": "object"
      },
      "apple_pay_payment_header": {
        "description": "Dictionary of additional fields used for decrypting and verifying the payment data",
        "properties": {
          "application_data": {
            "description": "SHA–256 hash, hex encoded as a string",
            "type": "string"
          },
          "ephemeral_public_key": {
            "description": "X.509 encoded public key bytes",
            "type": "string"
          },
          "public_key_hash": {
            "description": "Hash of the X.509 encoded public key bytes",
            "type": "string"
          },
          "transaction_id": {
            "description": "Device generated transaction identifier",
            "type": "string"
          }
        },
        "required": [
          "ephemeral_public_key",
          "public_key_hash",
          "transaction_id"
        ],
        "type": "object"
      },
      "apple_pay_payment_method": {
        "description": "Information about the card used in the transaction",
        "properties": {
          "billing_address": {
            "$ref": "#/components/schemas/apple_pay_contact"
          },
          "display_name": {
            "description": "Name that describes the card, suitable for display",
            "type": "string"
          },
          "network": {
            "description": "Name of the payment network backing the card, suitable for display",
            "type": "string"
          },
          "secure_element_pass": {
            "$ref": "#/components/schemas/apple_pay_secure_element_pass"
          },
          "type": {
            "description": "Card payment type",
            "enum": [
              "credit",
              "debit",
              "prepaid",
              "store"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "apple_pay_payment_token": {
        "description": "Single-use token containing all data necesary to complete the payment",
        "properties": {
          "payment_data": {
            "$ref": "#/components/schemas/apple_pay_payment_data"
          },
          "payment_method": {
            "$ref": "#/components/schemas/apple_pay_payment_method"
          },
          "transaction_identifier": {
            "description": "Unique identifier for this payment",
            "type": "string"
          }
        },
        "required": [
          "payment_data",
          "payment_method",
          "transaction_identifier"
        ],
        "type": "object"
      },
      "apple_pay_secure_element_pass": {
        "description": "A pass with a credential that the device stores in a certified payment information chip.",
        "properties": {
          "device_account_identifier": {
            "description": "The unique identifier for the device-specific account number.",
            "type": "string"
          },
          "device_account_number_suffix": {
            "description": "A display-ready version of the device-specific account number.",
            "type": "string"
          },
          "device_pass_identifier": {
            "description": "An opaque value for the pass.",
            "type": "string"
          },
          "paired_terminal_identifier": {
            "description": "The unique identifier of the paired terminal.",
            "type": "string"
          },
          "pass_activation_state": {
            "description": "The activation state of the pass.",
            "enum": [
              "activated",
              "activating",
              "deactivated",
              "requiresActivation",
              "suspended"
            ],
            "type": "string"
          },
          "primary_account_identifier": {
            "description": "An opaque value that identifies the primary account number that funds the pass’s transactions.",
            "type": "string"
          },
          "primary_account_number_suffix": {
            "description": "A display-ready version of the primary account number.",
            "type": "string"
          }
        },
        "required": [
          "device_account_identifier",
          "device_account_number_suffix",
          "pass_activation_state",
          "primary_account_identifier",
          "primary_account_number_suffix"
        ],
        "type": "object"
      },
      "applepay_csr_request": {
        "properties": {
          "merchant_id": {
            "description": "The merchant ID for which the CSR is being created. This is the same merchant ID used in the Apple Developer Portal and will be the one registered to accept payments in your iOS app.  The merchant ID must be in the format `merchant.com.[your-company-name]`.\n",
            "example": "merchant.com.example",
            "pattern": "^merchant\\.com\\.[a-zA-Z0-9\\-\\.]+$",
            "type": "string"
          },
          "organization_name": {
            "description": "The name of the organization that owns the merchant ID. This is typically the legal name of your company or organization.\n",
            "example": "Example Inc.",
            "type": "string"
          }
        },
        "required": [
          "merchant_id",
          "organization_name"
        ],
        "type": "object"
      },
      "applicant": {
        "properties": {
          "adverse_action_id": {
            "description": "Adverse Action ID for the applicant.",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "business_id": {
            "description": "Business ID for the application. Only one of customer_id or business_id can be provided.\n",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "credit_score_ids": {
            "description": "List of credit score IDs for the applicant of the credit application",
            "items": {
              "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "customer_id": {
            "description": "Customer ID for the application. Only one of customer_id or business_id can be provided.\n",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "is_primary": {
            "description": "Whether this applicant is the primary applicant",
            "type": "boolean"
          },
          "underwriting_data": {
            "items": {
              "$ref": "#/components/schemas/underwriting_data"
            },
            "type": "array"
          }
        },
        "required": [
          "is_primary"
        ],
        "title": "Applicant details",
        "type": "object"
      },
      "application": {
        "discriminator": {
          "mapping": {
            "CREDIT": "#/components/schemas/credit_application",
            "RESTRICTED_ACCOUNT": "#/components/schemas/restricted_application"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/credit_application"
          },
          {
            "$ref": "#/components/schemas/restricted_application"
          }
        ]
      },
      "application_account_type": {
        "description": "Account type of Application",
        "enum": [
          "CHARGE_SECURED",
          "CHARGE_UNSECURED",
          "LINE_OF_CREDIT"
        ],
        "example": "LINE_OF_CREDIT",
        "title": "Account type of Application",
        "type": "string",
        "x-enumDescriptions": {
          "CHARGE_SECURED": "Charge secured account application account type",
          "CHARGE_UNSECURED": "Charge unsecured account application account type",
          "LINE_OF_CREDIT": "Line of Credit application account type"
        }
      },
      "application_list": {
        "allOf": [
          {
            "properties": {
              "applications": {
                "description": "Array of applications.",
                "items": {
                  "$ref": "#/components/schemas/application_response"
                },
                "type": "array"
              }
            },
            "required": [
              "applications"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "application_patch": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/credit_application_patch"
          },
          {
            "$ref": "#/components/schemas/restricted_application_patch"
          }
        ],
        "type": "object"
      },
      "application_response": {
        "discriminator": {
          "mapping": {
            "CREDIT": "#/components/schemas/credit_application_response",
            "RESTRICTED_ACCOUNT": "#/components/schemas/restricted_application_response"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/restricted_application_response"
          },
          {
            "$ref": "#/components/schemas/credit_application_response"
          }
        ]
      },
      "application_type": {
        "description": "Type of Application",
        "enum": [
          "CREDIT",
          "RESTRICTED_ACCOUNT"
        ],
        "example": "CREDIT",
        "title": "Type of Application",
        "type": "string",
        "x-enumDescriptions": {
          "CREDIT": "Credit application type",
          "RESTRICTED_ACCOUNT": "Restricted account application type"
        }
      },
      "auth_request_model": {
        "properties": {
          "amount": {
            "description": "The amount of the transaction in the smallest whole denomination of the applicable currency (eg. For USD use cents)",
            "type": "integer"
          },
          "card_acceptor": {
            "$ref": "#/components/schemas/card_acceptor_model"
          },
          "card_id": {
            "format": "uuid",
            "type": "string"
          },
          "card_options": {
            "$ref": "#/components/schemas/card_options"
          },
          "cash_back_amount": {
            "type": "integer"
          },
          "is_pre_auth": {
            "default": false,
            "type": "boolean"
          },
          "mid": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "network_fees": {
            "items": {
              "$ref": "#/components/schemas/network_fee_model"
            },
            "type": "array"
          },
          "pin": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "transaction_options": {
            "$ref": "#/components/schemas/transaction_options"
          }
        },
        "required": [
          "amount",
          "card_id",
          "mid"
        ],
        "type": "object"
      },
      "authenticate_3ds_request": {
        "description": "Details for an External Card Transfer 3-D Secure Authentication request",
        "properties": {
          "challenge_jwt": {
            "description": "The JWT recieved from the 3DS challenge",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the 3DS authentication",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "challenge_jwt",
          "id"
        ],
        "type": "object"
      },
      "authenticate_3ds_response": {
        "description": "Details for an External Card Transfer 3-D Secure Authentication response",
        "properties": {
          "id": {
            "description": "The unique identifier of the 3DS authentication",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "status": {
            "description": "Status of the 3DS authentication",
            "enum": [
              "FAILED",
              "SUCCESS"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "status"
        ],
        "type": "object"
      },
      "authorization_advice_model": {
        "properties": {
          "amount": {
            "description": "The amount of the transaction in the smallest whole denomination of the applicable currency (eg. For USD use cents)",
            "type": "integer"
          },
          "network_fees": {
            "items": {
              "$ref": "#/components/schemas/network_fee_model"
            },
            "type": "array"
          },
          "original_transaction_id": {
            "format": "uuid",
            "type": "string"
          },
          "transaction_options": {
            "$ref": "#/components/schemas/transaction_options"
          }
        },
        "required": [
          "amount",
          "original_transaction_id"
        ],
        "type": "object"
      },
      "available_ach_action": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/ach_action"
          },
          "state": {
            "$ref": "#/components/schemas/ach_action_state"
          },
          "timestamp_valid_to": {
            "description": "The time by which the action must be taken against the dispute.\n* Only applicable for time constrained actions.\n",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "action",
          "state"
        ],
        "type": "object"
      },
      "available_card_action": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/card_action"
          },
          "state": {
            "$ref": "#/components/schemas/card_action_state"
          },
          "timestamp_valid_to": {
            "description": "The time by which the action must be taken against the dispute.\n* Only applicable for time constrained actions.\n",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "action",
          "state"
        ],
        "type": "object"
      },
      "available_external_card_action": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/external_card_action"
          },
          "state": {
            "$ref": "#/components/schemas/external_card_action_state"
          },
          "timestamp_valid_to": {
            "description": "The time by which the action must be taken against the dispute.\n* Only applicable for time constrained actions.\n",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "action",
          "state"
        ],
        "type": "object"
      },
      "balance_inquiry_request_model": {
        "properties": {
          "account_type": {
            "enum": [
              "checking",
              "credit",
              "savings"
            ],
            "type": "string"
          },
          "card_acceptor": {
            "$ref": "#/components/schemas/card_acceptor_model"
          },
          "card_id": {
            "format": "uuid",
            "type": "string"
          },
          "mid": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "network_fees": {
            "items": {
              "$ref": "#/components/schemas/network_fee_model"
            },
            "type": "array"
          },
          "pin": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "account_type",
          "card_acceptor",
          "card_id",
          "mid"
        ],
        "type": "object"
      },
      "barcode": {
        "description": "The barcode associated with a card",
        "example": 10044461864615598000,
        "pattern": "\\d{20}",
        "type": "string"
      },
      "barcode_deposit_simulation_request": {
        "description": "Simulate a cash deposit transaction using a barcode",
        "properties": {
          "amount": {
            "description": "Amount to deposit",
            "example": 100,
            "format": "float",
            "maximum": 999,
            "minimum": 1,
            "type": "number"
          },
          "barcode_id": {
            "description": "Unique identifier of the barcode to be used for the deposit",
            "example": "550e8400-e29b-41d4-a716-446655440000",
            "format": "uuid",
            "type": "string"
          },
          "status": {
            "enum": [
              "PAID",
              "VOID"
            ],
            "type": "string"
          },
          "store_id": {
            "description": "Unique identifier of the barcode simulation store",
            "type": "string"
          },
          "type": {
            "enum": [
              "APPLY",
              "TEST"
            ],
            "type": "string"
          }
        },
        "required": [
          "amount",
          "barcode_id",
          "status",
          "store_id",
          "type"
        ],
        "title": "Cash deposit transaction simulation request for a barcode",
        "type": "object"
      },
      "barcode_list_response": {
        "allOf": [
          {
            "properties": {
              "barcodes": {
                "items": {
                  "$ref": "#/components/schemas/barcode_response"
                },
                "type": "array"
              }
            },
            "required": [
              "barcodes"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "barcode_metadata": {
        "additionalProperties": {
          "maxLength": 200,
          "type": "string"
        },
        "description": "Any additional custom metadata related to the barcode.  * Can contain up to 10 key-value pairs with up to 200 characters each.\n",
        "maxProperties": 10,
        "type": "object"
      },
      "barcode_patch_request": {
        "properties": {
          "status": {
            "description": "Status of the barcode.",
            "enum": [
              "BLOCKED"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "barcode_response": {
        "properties": {
          "account_id": {
            "description": "ID of the account for which the barcode was generated.",
            "example": "123e4567-e89b-12d3-a456-426614174001",
            "format": "uuid",
            "type": "string"
          },
          "barcode_number": {
            "description": "The generated barcode number.",
            "example": "839650172948537162049873516238",
            "type": "string"
          },
          "creation_time": {
            "description": "Timestamp of when the barcode was created.",
            "example": "2023-10-01T12:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "currency": {
            "description": "ISO 4217 Alpha-3 currency code for the cash transaction.",
            "enum": [
              "USD"
            ],
            "type": "string"
          },
          "customer_id": {
            "description": "ID of the customer for whom the barcode was generated.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid",
            "type": "string"
          },
          "customer_latitude": {
            "$ref": "#/components/schemas/customer_latitude"
          },
          "customer_longitude": {
            "$ref": "#/components/schemas/customer_longitude"
          },
          "external_device_id": {
            "description": "ID of the external device used for the barcode generation.",
            "example": "device123",
            "maxLength": 64,
            "type": "string"
          },
          "id": {
            "description": "ID of the generated barcode.",
            "example": "123e4567-e89b-12d3-a456-426614174002",
            "format": "uuid",
            "type": "string"
          },
          "last_updated_time": {
            "description": "Timestamp of the last update to the barcode.",
            "example": "2023-10-01T12:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "max_amount": {
            "description": "Maximum amount for the cash transaction.",
            "example": 1000,
            "format": "float",
            "type": "number"
          },
          "metadata": {
            "$ref": "#/components/schemas/barcode_metadata"
          },
          "min_amount": {
            "description": "Minimum amount for the cash transaction.",
            "example": 10,
            "format": "float",
            "type": "number"
          },
          "status": {
            "$ref": "#/components/schemas/barcode_status"
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          },
          "timestamp_valid_to": {
            "description": "Timestamp indicating the expiration time of the barcode. Always set to 15 minutes after the creation time.",
            "example": "2023-10-01T12:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/barcode_type"
          }
        },
        "required": [
          "account_id",
          "barcode_number",
          "creation_time",
          "currency",
          "customer_id",
          "customer_latitude",
          "customer_longitude",
          "id",
          "last_updated_time",
          "max_amount",
          "min_amount",
          "status",
          "tenant",
          "timestamp_valid_to",
          "type"
        ],
        "type": "object"
      },
      "barcode_retailer_map_url_response": {
        "properties": {
          "url": {
            "description": "URL of the retailer map.",
            "example": "https://example.com/retailer-map",
            "format": "uri",
            "type": "string"
          }
        },
        "required": [
          "url"
        ],
        "type": "object"
      },
      "barcode_simulation_store": {
        "properties": {
          "address": {
            "$ref": "#/components/schemas/barcode_simulation_store_address"
          },
          "business_name": {
            "description": "Name of the store",
            "example": "Example Store",
            "type": "string"
          },
          "coordinates": {
            "$ref": "#/components/schemas/barcode_simulation_store_coordinates"
          },
          "distance": {
            "description": "Distance from the provided location in miles",
            "example": 2.5,
            "format": "float",
            "type": "number"
          },
          "id": {
            "description": "Unique identifier for the store",
            "example": "store_12345",
            "type": "string"
          }
        },
        "required": [
          "address",
          "business_name",
          "coordinates",
          "distance",
          "id"
        ],
        "type": "object"
      },
      "barcode_simulation_store_address": {
        "properties": {
          "address1": {
            "description": "First line of the store address",
            "example": "123 Main St",
            "type": "string"
          },
          "address2": {
            "description": "Second line of the store address (optional)",
            "example": "Suite 100",
            "type": "string"
          },
          "city": {
            "description": "City where the store is located",
            "example": "San Francisco",
            "type": "string"
          },
          "country": {
            "description": "Country where the store is located",
            "example": "US",
            "type": "string"
          },
          "county": {
            "description": "County where the store is located",
            "example": "San Francisco County",
            "type": "string"
          },
          "state": {
            "description": "State where the store is located",
            "example": "CA",
            "type": "string"
          },
          "zip_code": {
            "description": "ZIP code of the store location",
            "example": "94103",
            "type": "string"
          }
        },
        "required": [
          "address1",
          "city",
          "country",
          "state",
          "zip_code"
        ],
        "type": "object"
      },
      "barcode_simulation_store_coordinates": {
        "properties": {
          "latitude": {
            "description": "Latitude of the store location",
            "example": 37.7749,
            "format": "float",
            "type": "number"
          },
          "longitude": {
            "description": "Longitude of the store location",
            "example": -122.4194,
            "format": "float",
            "type": "number"
          }
        },
        "required": [
          "latitude",
          "longitude"
        ],
        "type": "object"
      },
      "barcode_simulation_store_response": {
        "properties": {
          "stores": {
            "items": {
              "$ref": "#/components/schemas/barcode_simulation_store"
            },
            "type": "array"
          }
        },
        "required": [
          "stores"
        ],
        "type": "object"
      },
      "barcode_status": {
        "description": "Status of the barcode.",
        "enum": [
          "AVAILABLE",
          "BLOCKED",
          "REDEEMED"
        ],
        "type": "string"
      },
      "barcode_type": {
        "description": "Type of the barcode.",
        "enum": [
          "CASH_DEPOSIT"
        ],
        "type": "string"
      },
      "base_card": {
        "allOf": [
          {
            "properties": {
              "account_id": {
                "description": "The ID of the account to which the card will be linked",
                "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
                "format": "uuid",
                "type": "string"
              },
              "business_id": {
                "description": "The business ID associated with this card. If no customer_id is supplied, a card can still be issued to a business, but cannot be activated or used until a customer is assigned via the PATCH /cards/{card_id} endpoint.",
                "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
                "format": "uuid",
                "type": "string"
              },
              "card_product_id": {
                "description": "The card product to which the card is attached",
                "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
                "format": "uuid",
                "type": "string"
              },
              "creation_time": {
                "description": "The timestamp representing when the card issuance request was made",
                "example": "2010-05-06T12:23:34.321Z",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "customer_id": {
                "description": "The ID of the customer to whom the card will be issued. If this is not populated with a valid customer_id the card cannot be activated or used for spend until it's assigned to a human customer via the PATCH /cards/{card_id} endpoint. If no business_id is passed, a customer_id is required.",
                "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
                "format": "uuid",
                "type": "string"
              },
              "emboss_name": {
                "$ref": "#/components/schemas/emboss_name"
              },
              "expiration_month": {
                "example": "06",
                "readOnly": true,
                "type": "string"
              },
              "expiration_time": {
                "description": "The timestamp representing when the card would expire at",
                "example": "2010-05-06T12:23:34.321Z",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "expiration_year": {
                "example": "25",
                "readOnly": true,
                "type": "string"
              },
              "id": {
                "description": "Card ID",
                "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
                "format": "uuid",
                "readOnly": true,
                "type": "string"
              },
              "is_pin_set": {
                "default": false,
                "description": "indicates whether a pin has been set on the card",
                "example": true,
                "readOnly": true,
                "type": "boolean"
              },
              "last_four": {
                "description": "The last 4 digits of the card PAN",
                "example": "1234",
                "readOnly": true,
                "type": "string"
              },
              "last_updated_time": {
                "description": "The timestamp representing when the card was last modified at",
                "example": "2010-05-06T12:23:34.321Z",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "metadata": {
                "$ref": "#/components/schemas/card_metadata"
              },
              "reissue_reason": {
                "description": "This is the reason the card needs to be reissued, if any. The reason determines several behaviours:\n  - whether or not the new card will use the same PAN as the original card\n  - the old card will be terminated and if so, when it will be terminated\n\nReason                 | Same PAN | Terminate Old Card\n---------------------- | -------- | ------------------\nEXPIRATION             | yes      | on activation\nLOST                   | no       | immediately\nSTOLEN                 | no       | immediately\nDAMAGED                | yes      | on activation\nPRODUCT_CHANGE         | yes      | on activation\nAPPEARANCE             | yes      | on activation\nPROGRAM_CHANGE         | yes      | on activation\n\nFor all reasons, the new card will use the same PIN as the original card and digital wallet tokens will\nreassigned to the new card\n",
                "enum": [
                  "APPEARANCE",
                  "DAMAGED",
                  "EXPIRATION",
                  "LOST",
                  "PRODUCT_CHANGE",
                  "PROGRAM_CHANGE",
                  "STOLEN"
                ],
                "type": "string"
              },
              "reissued_from_id": {
                "description": "When reissuing a card, specify the card to be replaced here. When getting a card's details, if this card was issued as a reissuance of another card, this ID refers to the card was replaced. If this field is set, then reissue_reason must also be set.\n",
                "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
                "format": "uuid",
                "type": "string"
              },
              "reissued_to_id": {
                "description": "If this card was reissued, this ID refers to the card that replaced it.",
                "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
                "format": "uuid",
                "readOnly": true,
                "type": "string"
              },
              "timestamp_pin_set": {
                "description": "Time when the PIN was last set or changed.",
                "example": "2010-05-06T12:23:34.321Z",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              }
            },
            "required": [
              "form"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/card_format"
          }
        ]
      },
      "base_statement": {
        "allOf": [
          {
            "$ref": "#/components/schemas/statement_summary"
          },
          {
            "properties": {
              "account_summary": {
                "$ref": "#/components/schemas/account_summary"
              },
              "authorized_signers": {
                "items": {
                  "$ref": "#/components/schemas/person"
                },
                "readOnly": true,
                "type": "array"
              },
              "closing_balance": {
                "description": "The account balance at the end of the statement period, in ISO 4217 minor currency units.",
                "format": "int64",
                "type": "integer"
              },
              "customer_service_details": {
                "$ref": "#/components/schemas/customer_service_details"
              },
              "disclosure": {
                "type": "string"
              },
              "exclude_jit_transactions": {
                "default": false,
                "description": "Ignore \"JIT funding\" transactions when generating a statement",
                "example": false,
                "type": "boolean"
              },
              "include_child_transactions": {
                "default": false,
                "description": "Include transactions from sub-accounts when generating a statement",
                "example": false,
                "type": "boolean"
              },
              "joint_account_holders": {
                "items": {
                  "$ref": "#/components/schemas/person"
                },
                "readOnly": true,
                "type": "array"
              },
              "opening_balance": {
                "description": "The account balance at the start of the statement period, in ISO 4217 minor currency units.",
                "format": "int64",
                "type": "integer"
              },
              "primary_account_holder_business": {
                "$ref": "#/components/schemas/business"
              },
              "primary_account_holder_personal": {
                "$ref": "#/components/schemas/person"
              },
              "statement_type": {
                "$ref": "#/components/schemas/statement_type"
              },
              "total_transactions": {
                "description": "The total number of transactions for this statement period.\n",
                "format": "int64",
                "type": "integer"
              }
            },
            "required": [
              "exclude_jit_transactions",
              "include_child_transactions",
              "statement_type"
            ],
            "type": "object"
          }
        ],
        "type": "object"
      },
      "base_transaction": {
        "properties": {
          "account_id": {
            "description": "The account uuid associated with the transaction. `account_id` and `internal_account_id` are mutually exclusive",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "type": "string"
          },
          "amount": {
            "description": "The total amount of the transaction including both pending and already posted amounts. The value is represented as the smallest denomination of the applicable currency.",
            "format": "int64",
            "type": "integer"
          },
          "creation_time": {
            "description": "The exact time the transaction was recorded in the ledger",
            "format": "date-time",
            "type": "string"
          },
          "currency": {
            "description": "ISO 4217 alphabetic currency code of the transfer amount",
            "type": "string"
          },
          "customer_id": {
            "description": "The uuid of the customer that initiated the transaction (if any)\n",
            "type": "string"
          },
          "dc_sign": {
            "description": "The `dc_sign` represents the direction money was moved. A value of `DEBIT` is money moving out of an account, a value of `CREDIT` is money moving into an account",
            "enum": [
              "CREDIT",
              "DEBIT"
            ],
            "type": "string"
          },
          "decline": {
            "description": "The decline object provides information explaining why a declined transaction was declined.",
            "properties": {
              "decline_details": {
                "description": "Additional detail about the decline.",
                "type": "string"
              },
              "reason": {
                "description": "The reason the transaction was declined",
                "enum": [
                  "ACH_RETURN",
                  "BALANCE_VIOLATION",
                  "DISABLED_PAYMENT_TYPE",
                  "DUPLICATE_TRANSACTION",
                  "GATEWAY_DECLINED",
                  "GATEWAY_ERROR",
                  "INSUFFICIENT_FUNDS",
                  "NETWORK_DECLINED",
                  "OTHER",
                  "SUSPECTED_FRAUD",
                  "TRANSACTION_NOT_PERMITTED"
                ],
                "type": "string"
              }
            },
            "required": [
              "reason"
            ],
            "type": "object"
          },
          "description": {
            "description": "A human-friendly description of the transaction, provided by the integrator",
            "type": "string"
          },
          "effective_date": {
            "description": "The effective date of the transaction. This usually aligns with network settlement date, which differs between transaction types.\nThe effective date is also used to determine effective daily balances for the purposes of interest calculation.",
            "format": "date",
            "type": "string"
          },
          "enhanced_transaction": {
            "$ref": "#/components/schemas/enhanced_transaction_data1"
          },
          "force_post": {
            "description": "Determines whether or not a transaction or auth was \"forced\" or not. A forced transaction skips any account balance checks",
            "type": "boolean"
          },
          "fraud_risk": {
            "$ref": "#/components/schemas/fraud_risk_data"
          },
          "group_id": {
            "description": "The group id of the transaction. Every transaction in the ledger is one entry in a double-entry system and the primary and offset transactions share the same `group_id`",
            "type": "string"
          },
          "hold_expiration_time": {
            "description": "The date and time any pending amount is expected to be released back to the account.",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the transaction",
            "format": "uuid",
            "type": "string",
            "x-go-type": "string"
          },
          "internal_account_id": {
            "description": "The internal account uuid associated with the transaction. `account_id` and `internal_account_id` are mutually exclusive",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "type": "string"
          },
          "last_updated_time": {
            "description": "The date and time the transaction was last modified",
            "format": "date-time",
            "type": "string"
          },
          "metadata": {
            "description": "an unstructured json blob representing additional transaction information supplied by the integrator.",
            "nullable": true,
            "type": "object"
          },
          "partial_hold": {
            "description": "Determines whether or not the funds on hold were the result of a partial auth or not. If `true` the `pending_amount` of the transaction will be less than the requested amount.\nThis is primarily used for certain types of card transactions.",
            "type": "boolean"
          },
          "pending_amount": {
            "description": "The amount amount of the transaction currently authorized or on hold",
            "format": "int64",
            "type": "integer"
          },
          "posted_amount": {
            "description": "The amount of the transaction that has been fully posted to the account",
            "format": "int64",
            "type": "integer"
          },
          "posted_date": {
            "description": "The date the transaction was posted (based on the bank calendar and end-of-day). For transaction with multiple postings, this is the date of the earliest posting.\nThis will be omitted for transactions with a `posted_amount` of `0`.",
            "format": "date",
            "type": "string"
          },
          "reference_id": {
            "description": "An external ID provided by the payment network to represent this transaction. This is not guaranteed to be globally unique.\nThis will always be omitted for internal transfers.",
            "type": "string"
          },
          "settlement_date": {
            "description": "The date the transaction was settled according to Synctera's platform. Generally, this can be interpretted the date the transaction was actually processed and settlement by the payment network.",
            "format": "date",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/transaction_statuses"
          },
          "system_description": {
            "description": "A human-friendly description of the transaction, provided by the Synctera platform",
            "type": "string"
          },
          "transaction_time": {
            "description": "The time the transaction occurred. In most cases this will be roughly identical to creation_time, but it can differ in some situations if the payment doesn't appear in the ledger in real-time.",
            "format": "date-time",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/transaction_types"
          }
        },
        "required": [
          "amount",
          "creation_time",
          "currency",
          "dc_sign",
          "effective_date",
          "force_post",
          "group_id",
          "id",
          "last_updated_time",
          "partial_hold",
          "pending_amount",
          "posted_amount",
          "status",
          "subtype",
          "transaction_time",
          "type"
        ],
        "type": "object"
      },
      "batch_payment": {
        "description": "A Batch Payment is a collection of transfers that are processed together. These transfers represent a new transfer on the ledger.\n",
        "properties": {
          "amount": {
            "description": "The total amount of the batch transfer.\n",
            "format": "int64",
            "readOnly": true,
            "type": "integer"
          },
          "batch_payment_template_id": {
            "description": "The ID of the batch Payment template that was used to create the batch.\n",
            "format": "uuid",
            "type": "string"
          },
          "batched_transfer_ids": {
            "description": "The IDs of the transfers that are part of the batch. These values can be modified by the client before  the batch is in a terminal status.\n",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "creation_time": {
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "example": "d290f1ee-6c54-4b01-90e6-d701748f0851",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "last_updated_time": {
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "payment_rail": {
            "description": "The payment rail that was used to process the batch.\n",
            "type": "string"
          },
          "payment_rail_transfer_id": {
            "description": "The ID of the payment rail transfer that was used to process the batch.\n",
            "format": "uuid",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/batch_status"
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          },
          "transaction_id": {
            "description": "The transaction ID of the batch which represents a transaction on the ledger.\n",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "amount",
          "batch_payment_template_id",
          "batched_transfer_ids",
          "creation_time",
          "id",
          "last_updated_time",
          "status"
        ],
        "title": "Batch Payment",
        "type": "object"
      },
      "batch_payment_patch_request": {
        "properties": {
          "batched_transfer_ids": {
            "description": "The IDs of the transfers that are part of the batch. These values can be modified by the client before  the batch is in a terminal status.\n",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "creation_time": {
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "last_updated_time": {
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/batch_status"
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          }
        },
        "required": [
          "creation_time",
          "last_updated_time"
        ],
        "title": "Batch Payment Patch",
        "type": "object"
      },
      "batch_payment_template": {
        "description": "A Batch Payment Template is a template that is used when creating a batch transfer.\n",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/batch_payment_template_config"
          },
          "description": {
            "example": "This template is used for international remittance",
            "type": "string"
          },
          "enabled": {
            "description": "Whether or not the template is enabled. If the template is not enabled, it will not be used when creating a batch transfer.\n",
            "type": "boolean"
          },
          "extra_rail_params": {
            "description": "Additional parameters to be passed through to the payment rail.\n",
            "format": "rawjson",
            "minProperties": 1,
            "type": "object",
            "x-go-type": "json.RawMessage"
          },
          "id": {
            "example": "d290f1ee-6c54-4b01-90e6-d701748f0851",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "example": "International Remittance",
            "type": "string"
          },
          "rules": {
            "$ref": "#/components/schemas/batch_payment_template_rules"
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          }
        },
        "required": [
          "config",
          "name",
          "rules",
          "tenant"
        ],
        "title": "Batch Payment Template",
        "type": "object"
      },
      "batch_payment_template_config": {
        "description": "The config of a Batch Payment Template. This is used the match the Batch Payment Template to a batch transfer.\n",
        "properties": {
          "external_account_id": {
            "description": "The ID of the external account that will be to match the batch transfer the appropriate template.\n",
            "format": "uuid",
            "type": "string"
          },
          "max_individual_transaction_amount": {
            "description": "The maximum amount that a single transaction can be for the batch transfer.\n",
            "format": "int64",
            "type": "integer"
          },
          "max_total_transaction_amount": {
            "description": "The maximum amount that the total transactions can be for the batch transfer.\n",
            "format": "int64",
            "type": "integer"
          },
          "max_transaction_count": {
            "description": "The maximum number of transactions that can be in the batch transfer.\n",
            "type": "integer"
          },
          "min_individual_transaction_amount": {
            "description": "The minimum amount that a single transaction can be for the batch transfer.\n",
            "format": "int64",
            "type": "integer"
          },
          "min_total_transaction_amount": {
            "description": "The minimum amount that the total transactions can be for the batch transfer.\n",
            "format": "int64",
            "type": "integer"
          },
          "min_transaction_count": {
            "description": "The minimum number of transactions that can be in the batch transfer.\n",
            "type": "integer"
          },
          "settlement_account_id": {
            "description": "The ID of the settlement account that will be to match the batch transfer the appropriate template.\n",
            "format": "uuid",
            "type": "string"
          },
          "settlement_customer_id": {
            "description": "The customer ID of the settlement account.\n",
            "format": "uuid",
            "type": "string"
          },
          "subtypes": {
            "description": "The transaction subtypes that will be to match the batch transfer the appropriate template.\n",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": {
            "description": "The transaction type that will be to match the batch transfer the appropriate template.\n",
            "type": "string"
          }
        },
        "required": [
          "external_account_id",
          "settlement_account_id",
          "settlement_customer_id",
          "subtypes",
          "type"
        ],
        "title": "Batch Payment Template Config",
        "type": "object"
      },
      "batch_payment_template_patch": {
        "description": "A Batch Payment Template is a template that is used when creating a batch transfer.\n",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/batch_payment_template_config"
          },
          "description": {
            "example": "This template is used for international remittance",
            "type": "string"
          },
          "enabled": {
            "description": "Whether or not the template is enabled. If the template is not enabled, it will not be used when creating a batch transfer.\n",
            "type": "boolean"
          },
          "extra_rail_params": {
            "description": "Additional parameters to be passed through to the payment rail.\n",
            "format": "rawjson",
            "minProperties": 1,
            "type": "object",
            "x-go-type": "json.RawMessage"
          },
          "name": {
            "example": "International Remittance",
            "type": "string"
          },
          "rules": {
            "$ref": "#/components/schemas/batch_payment_template_rules"
          }
        },
        "title": "Batch Payment Template Patch",
        "type": "object"
      },
      "batch_payment_template_rules": {
        "description": "The rules of a Batch Payment Template. This is used when processing a batch transfer.\n",
        "properties": {
          "disable_four_eyes_review": {
            "description": "Whether or not the batch transfer will require four eyes review.\n",
            "type": "boolean"
          },
          "hold_time": {
            "description": "The number of minutes that the batch transfer will be held before being processed.\n",
            "type": "integer"
          },
          "payment_rail": {
            "description": "The payment rail that will be used to process the batch transfer.\n",
            "type": "string"
          }
        },
        "title": "Batch Payment Template Rules",
        "type": "object"
      },
      "batch_payment_templates": {
        "description": "A collection of Batch Payment Templates\n",
        "items": {
          "$ref": "#/components/schemas/batch_payment_template"
        },
        "title": "Batch Payment Templates",
        "type": "array"
      },
      "batch_payments": {
        "description": "A collection of batch payments\n",
        "items": {
          "$ref": "#/components/schemas/batch_payment"
        },
        "title": "Batch Payments",
        "type": "array"
      },
      "batch_status": {
        "description": "The status of a Batch\n",
        "enum": [
          "CANCELLED",
          "COMPLETED",
          "DECLINED",
          "INITIATED",
          "PENDING_APPROVAL",
          "PENDING_PAYMENT",
          "RETURNED"
        ],
        "title": "Batch Status",
        "type": "string"
      },
      "billing_address": {
        "properties": {
          "address": {
            "type": "string"
          },
          "compressed_zip": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "zip": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "bin_id": {
        "description": "The unique identifier of a bin",
        "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
        "format": "uuid",
        "type": "string"
      },
      "bin_prefix": {
        "description": "The BIN number that prefixes a card PAN (first 6 or 8 digits)",
        "example": 123456,
        "pattern": "^(\\d{6}|\\d{8})$",
        "type": "string"
      },
      "bulk_issuance_list_response": {
        "allOf": [
          {
            "properties": {
              "bulk_order_configs": {
                "description": "Array of bulk order configurations",
                "items": {
                  "$ref": "#/components/schemas/bulk_issuance_response"
                },
                "type": "array"
              }
            },
            "required": [
              "bulk_order_configs"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "bulk_issuance_policy": {
        "default": "AUTO",
        "description": "Issuance for bulk orders with respect to when the order is shipped.\n\nPolicy              | Description\n------------------- | -----------\nAUTO                | Bulk orders will be fulfilled at the daily cutoff time 09:00 UTC (default).\nMANUAL              | Bulk orders will be shipped when requested.\n",
        "enum": [
          "AUTO",
          "MANUAL"
        ],
        "type": "string"
      },
      "bulk_issuance_request": {
        "properties": {
          "bulk_issuance_policy": {
            "$ref": "#/components/schemas/bulk_issuance_policy"
          },
          "card_product_id": {
            "$ref": "#/components/schemas/card_product_id"
          },
          "name": {
            "$ref": "#/components/schemas/bulk_order_config_name"
          },
          "shipping": {
            "$ref": "#/components/schemas/bulk_shipping"
          }
        },
        "required": [
          "bulk_issuance_policy",
          "card_product_id",
          "name",
          "shipping"
        ],
        "type": "object"
      },
      "bulk_issuance_response": {
        "properties": {
          "bulk_issuance_policy": {
            "$ref": "#/components/schemas/bulk_issuance_policy"
          },
          "card_product_id": {
            "$ref": "#/components/schemas/card_product_id"
          },
          "creation_time": {
            "description": "The timestamp representing when the bulk order config was created",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/bulk_order_config_id"
          },
          "name": {
            "$ref": "#/components/schemas/bulk_order_config_name"
          },
          "shipping": {
            "$ref": "#/components/schemas/bulk_shipping"
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          }
        },
        "required": [
          "bulk_issuance_policy",
          "card_product_id",
          "id",
          "name",
          "shipping",
          "tenant"
        ],
        "type": "object"
      },
      "bulk_order_config_id": {
        "description": "The unique identifier of a bulk order configuration",
        "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
        "format": "uuid",
        "type": "string"
      },
      "bulk_order_config_name": {
        "description": "Name associated with the bulk order configuration.",
        "example": "Bulk Shipping to US Office",
        "type": "string"
      },
      "bulk_order_id": {
        "description": "The unique identifier of a bulk order in which the card was fulfilled",
        "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
        "format": "uuid",
        "readOnly": true,
        "type": "string"
      },
      "bulk_shipping": {
        "description": "Details about the shipping method for bulk issuance.",
        "properties": {
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/address"
              }
            ],
            "description": "The address to which the bulk order will be shipped."
          },
          "business_name": {
            "description": "The name of the business which the bulk order will be shipped",
            "type": "string"
          },
          "is_expedited_fulfillment": {
            "$ref": "#/components/schemas/expedited_fulfillment"
          },
          "method": {
            "$ref": "#/components/schemas/bulk_shipping_method"
          },
          "phone_number": {
            "$ref": "#/components/schemas/phone_number"
          },
          "recipient_name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/recipient_name"
              }
            ],
            "description": "The name of the recipient to whom the bulk order will be shipped"
          }
        },
        "required": [
          "address",
          "method",
          "recipient_name"
        ],
        "type": "object"
      },
      "bulk_shipping_method": {
        "default": "TWO_DAY",
        "description": "The shipping method.\n* `INTERNATIONAL_GROUND` is only available for addresses in Canada and Mexico.\n",
        "enum": [
          "INTERNATIONAL",
          "INTERNATIONAL_GROUND",
          "INTERNATIONAL_PRIORITY",
          "LOCAL_PRIORITY",
          "OVERNIGHT",
          "TWO_DAY"
        ],
        "example": "TWO_DAY",
        "type": "string"
      },
      "business": {
        "properties": {
          "creation_time": {
            "format": "date-time",
            "type": "string"
          },
          "ein": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "entity_name": {
            "type": "string"
          },
          "formation_date": {
            "format": "date",
            "type": "string"
          },
          "formation_state": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "last_updated_time": {
            "format": "date-time",
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "structure": {
            "type": "string"
          },
          "trade_names": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "verification_last_run": {
            "format": "date-time",
            "type": "string"
          },
          "verification_status": {
            "type": "string"
          }
        },
        "title": "Business",
        "type": "object"
      },
      "business_id": {
        "description": "Business ID for the application. An application must have either a Business or a customer associated with it.",
        "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
        "format": "uuid",
        "type": "string"
      },
      "business_id1": {
        "description": "The unique identifier of a business",
        "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
        "format": "uuid",
        "type": "string"
      },
      "bypass_errors": {
        "enum": [
          "ACCOUNT_CLOSED",
          "ACCOUNT_OWNER_WATCHLIST",
          "IMPROPER_ACCOUNT_ACCESS_STATUS",
          "IMPROPER_ACCOUNT_CUSTOMER_RELATIONSHIP",
          "IMPROPER_ACCOUNT_STATUS",
          "IMPROPER_ANCESTOR_ACCOUNT_ACCESS_STATUS",
          "IMPROPER_ANCESTOR_ACCOUNT_STATUS",
          "IMPROPER_CUSTOMER_STATUS",
          "IMPROPER_CUSTOMER_VERIFICATION_STATUS",
          "IMPROPER_PARTNER_LIFECYCLE_STATUS",
          "IMPROPER_PARTNER_VERIFICATION_STATUS",
          "PARTNER_RAIL_NOT_ENABLED",
          "SENDER_WATCHLIST",
          "SUSPECTED_FRAUD",
          "TRANSACTION_NOT_PERMITTED"
        ],
        "type": "string"
      },
      "bypass_risk_errors": {
        "description": "Allow bypassing risk engine errors.",
        "type": "boolean"
      },
      "card_acceptor_model": {
        "example": {
          "address": "address",
          "city": "city",
          "country": "country",
          "ecommerce_security_level_indicator": "ecommerce_security_level_indicator",
          "mcc": "mcc",
          "name": "name",
          "partial_approval_capable": false,
          "state": "state",
          "zip": "zip"
        },
        "properties": {
          "address": {
            "maxLength": 255,
            "type": "string"
          },
          "city": {
            "maxLength": 40,
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "ecommerce_security_level_indicator": {
            "type": "string"
          },
          "mcc": {
            "maxLength": 5,
            "type": "string"
          },
          "name": {
            "maxLength": 50,
            "type": "string"
          },
          "partial_approval_capable": {
            "default": false,
            "type": "boolean"
          },
          "state": {
            "type": "string"
          },
          "zip": {
            "maxLength": 10,
            "type": "string"
          }
        },
        "type": "object"
      },
      "card_action": {
        "enum": [
          "ARBITRATION",
          "CHARGEBACK",
          "COMPLIANCE",
          "PRE_ARBITRATION",
          "PRE_COMPLIANCE",
          "PROVISIONAL_CREDIT",
          "REPRESENTMENT",
          "WRITE_OFF"
        ],
        "type": "string"
      },
      "card_action_state": {
        "enum": [
          "ACCEPT",
          "CREATE",
          "LOST",
          "NETWORK_REJECT",
          "NETWORK_REJECT_REVERSAL",
          "REBUT",
          "REVERSE",
          "WON"
        ],
        "type": "string"
      },
      "card_action_violation_code": {
        "description": "* Required for `PRE-COMPLIANCE`\n\nViolation Code                       | Description\n-------------------------------------|------------------------------------------------------------\nINACCURATE_AUTH                      | Invalid, or Inaccurate Authorization Data\nINACCURATE_CLEARING                  | Inaccurate Clearing Data That Restricts Chargeback Cycles\nCHARGEBACK_EXCEEDS_TIMEFRAME         | Valid Chargeback Exceeding System Availability\nINVALID_SUBSEQUENT_FIRST_PRESENTMENT | Invalid Subsequent First Presentment\nSAME_DAY_PROCESSING                  | Same Day Processing Chargeback Reversal and 2nd Presentment\nREFUND_OR_CORRECTION                 | Refund Transactions and Corrections\nSEND_RI_OR_PAYMENT                   | Send RI or Payment Transactions\nSEND_OI                              | Send OI\nFEE_COLLECTION                       | Fee Collection/1740 Message\nATM_DCC                              | ATM Dynamic Currency Conversion\nMATCH                                | Merchant Not Listed or Improperly Listed on MATCH\nUNSPENT_GIFT_CARD                    | Unspent Gift Card Funds\nACQ_STMT_REQUEST                     | Acquirer Request for Cardholder Statement of Fraud\nMPQR_OR_MCQR                         | MPQR or MCQR\nINTERCHANGE                          | Interchange Discrepancy (Non-Brazil Domestic)\nTHIRD_PARTY_ALL_OTHER                | All Other Rules Violations-3rd-Party Processed Transactions\nALL_OTHER                            | All Other Rules Violations\nNON_MC_MAESTRO_CNP                   | Non-Mastercard Maestro Card-Not-Present\n",
        "enum": [
          "ACQ_STMT_REQUEST",
          "ALL_OTHER",
          "ATM_DCC",
          "CHARGEBACK_EXCEEDS_TIMEFRAME",
          "FEE_COLLECTION",
          "INACCURATE_AUTH",
          "INACCURATE_CLEARING",
          "INTERCHANGE",
          "INVALID_SUBSEQUENT_FIRST_PRESENTMENT",
          "MATCH",
          "MPQR_OR_MCQR",
          "NON_MC_MAESTRO_CNP",
          "REFUND_OR_CORRECTION",
          "SAME_DAY_PROCESSING",
          "SEND_OI",
          "SEND_RI_OR_PAYMENT",
          "THIRD_PARTY_ALL_OTHER",
          "UNSPENT_GIFT_CARD"
        ],
        "type": "string"
      },
      "card_activation_request": {
        "properties": {
          "activation_code": {
            "description": "An activation code provided with the card required to prove possession of the card",
            "type": "string"
          },
          "customer_id": {
            "description": "The ID of the customer for which card is being activated",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "activation_code",
          "customer_id"
        ],
        "type": "object"
      },
      "card_brand": {
        "description": "The brand of a card product",
        "enum": [
          "MASTERCARD",
          "VISA"
        ],
        "type": "string"
      },
      "card_category": {
        "description": "The category of the card",
        "enum": [
          "COMMERCIAL",
          "CONSUMER"
        ],
        "type": "string"
      },
      "card_dispute_action": {
        "description": "Create an action against a disputed card transaction",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/card_action"
          },
          "memo": {
            "description": "Memo text related to card dispute action\n* Required for PRE_ARBITRATION, ARBITRATION, PRE_COMPLIANCE, COMPLIANCE\n",
            "maxLength": 1000,
            "type": "string"
          },
          "message": {
            "description": "Message text related to card dispute action\n",
            "maxLength": 100,
            "type": "string"
          },
          "payment_rail": {
            "$ref": "#/components/schemas/payment_rail"
          },
          "reason_code": {
            "$ref": "#/components/schemas/card_dispute_reason_codes"
          },
          "state": {
            "$ref": "#/components/schemas/card_action_state"
          },
          "supporting_doc_id": {
            "description": "The unique identifier of the supporting document",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "updated_reason_code_memo": {
            "description": "Memo text describing the reason for updating a reason code.\n* Required for PRE_ARBITRATION and ARBITRATION if a reason code\nis provided in the request. If no reason code is present in the\nrequest, the original CHARGEBACK reason code will be used.\n",
            "maxLength": 1000,
            "type": "string"
          },
          "violation_code": {
            "$ref": "#/components/schemas/card_action_violation_code"
          },
          "violation_date": {
            "description": "The timestamp representing when the violation occurred.\n* Required for `PRE-COMPLIANCE`\n",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "action",
          "payment_rail",
          "state"
        ],
        "type": "object"
      },
      "card_dispute_action_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/card_action"
          },
          "creation_time": {
            "description": "The timestamp representing when the object was created",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "external_reference_id": {
            "description": "Reference ID associated with the action on the external network.",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the dispute action",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "memo": {
            "description": "Memo text related to card dispute action\n",
            "maxLength": 1000,
            "type": "string"
          },
          "message": {
            "description": "Message text related to card dispute action",
            "maxLength": 100,
            "type": "string"
          },
          "payment_rail": {
            "$ref": "#/components/schemas/payment_rail"
          },
          "reason_code": {
            "$ref": "#/components/schemas/card_dispute_reason_codes"
          },
          "representment_reason_code": {
            "$ref": "#/components/schemas/card_dispute_representment_reason_code"
          },
          "status": {
            "$ref": "#/components/schemas/card_dispute_action_status"
          },
          "supporting_doc_id": {
            "description": "The unique identifier of the supporting document",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          },
          "updated_reason_code_memo": {
            "description": "Memo text describing the reason for updating a reason code.\n",
            "maxLength": 1000,
            "type": "string"
          },
          "violation_code": {
            "$ref": "#/components/schemas/card_action_violation_code"
          },
          "violation_date": {
            "description": "The timestamp representing when the violation occurred.\n",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "action",
          "creation_time",
          "id",
          "payment_rail",
          "status",
          "tenant"
        ],
        "type": "object"
      },
      "card_dispute_action_status": {
        "enum": [
          "ACCEPTED",
          "LOST",
          "NETWORK_REJECTED",
          "NETWORK_REJECTED_REVERSAL",
          "REBUTTED",
          "REVERSED",
          "SUBMITTED",
          "WON"
        ],
        "type": "string"
      },
      "card_dispute_managed_by": {
        "description": "Managed By     | Description\n---------------|---------------------------------------------------\nCUSTOMER       | The dispute is managed by the customer.\nGROUND_CONTROL | The dispute is managed by Synctera Ground Control.\n",
        "enum": [
          "CUSTOMER",
          "GROUND_CONTROL"
        ],
        "type": "string"
      },
      "card_dispute_reason_codes": {
        "description": "| Reason Code                      | Status     | Category                   | Description                                                                                                                                                                                                                            |\n| -------------------------------- | ---------- | -------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| NO_CARDHOLDER_AUTHORIZATION      | Active     | Fraud                      | A fraudulent transaction was made without the cardholder's consent.                                                                                                                                                                    |\n| QUESTIONABLE_MERCHANT_ACTIVITY   | Active     | Fraud                      | The merchant is suspected of being involved in fraudulent activities or violating Mastercard rules.                                                                                                                                    |\n| CHIP_LIABILITY_SHIFT             | Active     | Fraud                      | A counterfeit card was used at a non-EMV-compliant terminal, and the merchant is held liable for the fraudulent transaction.                                                                                                           |\n| CHIP_PIN_LIABILITY_SHIFT         | Active     | Fraud                      | A lost or stolen chip card was used without PIN verification at a terminal that supports PIN, resulting in merchant liability for the fraudulent transaction.                                                                          |\n| AUTHORIZATION_RELATED_CHARGEBACK | Active     | Authorization              | A transaction was processed without obtaining proper authorization.                                                                                                                                                                    |\n| POINT_OF_INTERACTION_ERROR       | Active     | Point-of-Interaction Error | Processing errors such as ATM withdrawal discrepancies, duplicate transactions, late presentments, and amount discrepancies.                                                                                                           |\n| CARD_HOLDER_DISPUTE              | Active     | Cardholder Dispute         | Claims for goods and services not received, counterfeit products, recurring transactions, incomplete transactions, hotel no-show charges, and more.                                                                                    |\n| ATM_CASH_DISPUTE                 | Deprecated | N/A                        | Some or all funds debited from the cardholder's account as the result of an ATM withdrawal were not dispensed.                                                                                                                         |\n| CARD_LOST_STOLEN_NEVER_RECEIVED  | Deprecated | N/A                        | The cardholder did not authorize the transaction and the card is no longer, or had never been, in the possession of the cardholder.                                                                                                    |\n| COUNTERFEIT_GOODS                | Deprecated | N/A                        | The cardholder claims that the goods were purported to be genuine, but were counterfeit.                                                                                                                                               |\n| CREDIT_NOT_RECEIVED              | Deprecated | N/A                        | The cardholder's account was not credited for a refund from a merchant or was inaccurately debited instead of credited.                                                                                                                |\n| DEFECTIVE_GOODS_OR_SERVICES      | Deprecated | N/A                        | Goods or services were either not as described or defective, including shipped merchandise was received damaged or not suitable for its intended purpose as well as the merchant didn't honour the terms and conditions of a contract. |\n| DISPUTE_OF_RECURRING_TRANSACTION | Deprecated | N/A                        | The cardholder notified the merchant to cancel the recurring transaction and the merchant continued to bill the cardholder or the cardholder was not aware they were agreeing to a recurring transaction.                              |\n| DUPLICATE_TRANSACTION            | Deprecated | N/A                        | The same transaction has been processed more than once, resulting in duplicate charges.                                                                                                                                                |\n| FRAUDULENT_PROCESSING            | Deprecated | N/A                        | The cardholder is in possession and control of all valid cards, processed at least one legitimate face-to-face transaction, and denies making one or more additional face-to-face transactions at the same merchant location.          |\n| GOODS_OR_SERVICES_NOT_PROVIDED   | Deprecated | N/A                        | The cardholder has been debited for goods or services that were to be shipped, delivered or otherwise provided and were not received by the expected delivery date.                                                                    |\n| LATE_PRESENTMENT                 | Deprecated | N/A                        | The transaction was authorized offline by the chip and submitted for clearing more than 7 calendar days after the transaction date.                                                                                                    |\n| PAID_BY_OTHER_MEANS              | Deprecated | N/A                        | The cardholder used a different form of payment for this specific transaction. (Mastercard pre-compliance/compliance only)                                                                                                             |\n| TRANSACTION_AMOUNT_DIFFERS       | Deprecated | N/A                        | The amount of the transaction does not match the agreed-upon or expected amount.                                                                                                                                                       |\n| TRANSACTION_DID_NOT_COMPLETE     | Deprecated | N/A                        | The cardholder engaged in the transaction and claims it did not complete. Goods or services were not provided.                                                                                                                         |\n| TRANSACTION_NOT_RECOGNIZED       | Deprecated | N/A                        | The account holder does not recognize the transaction, possibly due to mistake or fraud.                                                                                                                                               |\n| UNAUTHORIZED_TRANSACTION         | Deprecated | N/A                        | The transaction was not authorized by the account holder.                                                                                                                                                                              |\n",
        "enum": [
          "ATM_CASH_DISPUTE",
          "AUTHORIZATION_RELATED_CHARGEBACK",
          "CARDHOLDER_DISPUTE",
          "CARD_LOST_STOLEN_NEVER_RECEIVED",
          "CHIP_LIABILITY_SHIFT",
          "CHIP_PIN_LIABILITY_SHIFT",
          "COUNTERFEIT_GOODS",
          "CREDIT_NOT_RECEIVED",
          "DEFECTIVE_GOODS_OR_SERVICES",
          "DISPUTE_OF_RECURRING_TRANSACTION",
          "DUPLICATE_TRANSACTION",
          "FRAUDULENT_PROCESSING",
          "GOODS_OR_SERVICES_NOT_PROVIDED",
          "LATE_PRESENTMENT",
          "NO_CARDHOLDER_AUTHORIZATION",
          "PAID_BY_OTHER_MEANS",
          "POINT_OF_INTERACTION_ERROR",
          "QUESTIONABLE_MERCHANT_ACTIVITY",
          "TRANSACTION_AMOUNT_DIFFERS",
          "TRANSACTION_DID_NOT_COMPLETE",
          "TRANSACTION_NOT_RECOGNIZED",
          "UNAUTHORIZED_TRANSACTION"
        ],
        "type": "string"
      },
      "card_dispute_representment_reason_code": {
        "description": "Reason Code                                    | Description\n-----------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------\nINVALID_ACQUIRER_REFERENCE_DATA                | The combination of primary account number and acquirer reference data on the chargeback does not match the information in the first presentment.\nNON_RECEIPT_OF_DOCUMENTATION                   | Required documentation was not received.\nDOCUMENTATION_INELIGIBLE                       | Documentation is ineligible to the point where it cannot be established that the chargeback is valid.\nDOCUMENTATION_SCANNING_ERROR                   | Documentation is a partial scan with missing information, or relates to another transaction.\nCORRECT_TRANSACTION_DATE                       | Chargeback can be remedied by providing the correct transaction date.\nCORRECT_MERCHANT_LOCATION                      | Chargeback can be remedied by providing new information in the form of a different merchant name or location.\nISSUER_AUTHORIZED                              | Chargeback can be remedied by providing information that the transaction was properly authorized.\nCREDIT_PREVIOUSLY_ISSUED                       | Chargeback can be remedied by providing evidence that the merchant issued a credit to the cardholders account.\nCHARGEBACK_REMEDIED                            | Evidence to remedy the chargeback is included in the supporting documentation adn no other message code is applicable.\nDUPLICATE_CHARGEBACK                           | A first chargeback has already been processed for the transaction.\nPAST_CHARGEBACK_TIME_LIMIT                     | The chargeback was processed past the time limit allowed for chargeback.\nINVALID_DATA_RECORD_TEXT                       | Information that is required to appear in the Data Record and the required message text is missing or incomplete.\nCORRECT_MCC                                    | Chargeback can be remedied by showing that the MCC assigned to the merchant is different from the MCC appearing on the first presentment.\nAUTHORIZATION_ADVISED_SUSPICIOUS               | Transaction meets the requirements for a Suspicious Transaction.\nNO_AUTHORIZATION_REQUEST_REQUIRED_OR_ATTEMPTED | Transaction was below the applicable floor limit, and the merchant did not request an authorization.\nACCOUNT_NOT_LISTED_ON_EWB                      | The account number was not included in the applicable Electronic Warning Bulletin as of the date the card was first presented to the merchant.\nINVALID_CHARGEBACK                             | The chargeback does not meet the prerequisites for the chargeback message reason code.\nCHIP_LIABILITY_SHIFT                           | Invoke chip liability shift in response and as final remedy to a first chargeback submitted under reason code 4837.\nCHIP_PIN_LIABILITY_SHIFT                       | Invoke chip/pin liability shift in response and as final remedy to a first chargeback submitted under reason code 4837.\n",
        "enum": [
          "ACCOUNT_NOT_LISTED_ON_EWB",
          "AUTHORIZATION_ADVISED_SUSPICIOUS",
          "CHARGEBACK_REMEDIED",
          "CHIP_LIABILITY_SHIFT",
          "CHIP_PIN_LIABILITY_SHIFT",
          "CORRECT_MCC",
          "CORRECT_MERCHANT_LOCATION",
          "CORRECT_TRANSACTION_DATE",
          "CREDIT_PREVIOUSLY_ISSUED",
          "DOCUMENTATION_INELIGIBLE",
          "DOCUMENTATION_SCANNING_ERROR",
          "DUPLICATE_CHARGEBACK",
          "INVALID_ACQUIRER_REFERENCE_DATA",
          "INVALID_CHARGEBACK",
          "INVALID_DATA_RECORD_TEXT",
          "ISSUER_AUTHORIZED",
          "NON_RECEIPT_OF_DOCUMENTATION",
          "NO_AUTHORIZATION_REQUEST_REQUIRED_OR_ATTEMPTED",
          "PAST_CHARGEBACK_TIME_LIMIT"
        ],
        "type": "string"
      },
      "card_dispute_request": {
        "allOf": [
          {
            "$ref": "#/components/schemas/dispute_request_details"
          },
          {
            "properties": {
              "reason_code": {
                "$ref": "#/components/schemas/card_dispute_reason_codes"
              }
            },
            "required": [
              "reason_code"
            ],
            "type": "object"
          }
        ]
      },
      "card_dispute_response": {
        "allOf": [
          {
            "properties": {
              "action_history": {
                "description": "History of all the action filed for the dispute.",
                "items": {
                  "$ref": "#/components/schemas/card_dispute_action_response"
                },
                "type": "array"
              },
              "available_actions": {
                "description": "List of actions that can be taken on the dispute.",
                "items": {
                  "$ref": "#/components/schemas/available_card_action"
                },
                "type": "array"
              },
              "credit_status": {
                "$ref": "#/components/schemas/dispute_credit_status"
              },
              "lifecycle_state": {
                "$ref": "#/components/schemas/card_lifecycle_state"
              },
              "managed_by": {
                "$ref": "#/components/schemas/card_dispute_managed_by"
              },
              "network_eligibility": {
                "$ref": "#/components/schemas/card_network_eligibility"
              },
              "reason_code": {
                "$ref": "#/components/schemas/card_dispute_reason_codes"
              }
            },
            "required": [
              "action_history",
              "available_actions",
              "credit_status",
              "lifecycle_state",
              "managed_by",
              "network_eligibility",
              "reason_code"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/dispute_response_details"
          }
        ]
      },
      "card_edit_request": {
        "properties": {
          "card_status": {
            "$ref": "#/components/schemas/card_status_request"
          },
          "customer_id": {
            "description": "The ID of the customer to whom the card will be issued",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "emboss_name": {
            "$ref": "#/components/schemas/emboss_name"
          },
          "memo": {
            "$ref": "#/components/schemas/card_status_reason_memo"
          },
          "metadata": {
            "$ref": "#/components/schemas/card_metadata"
          },
          "reason": {
            "$ref": "#/components/schemas/card_status_reason_code"
          }
        },
        "type": "object"
      },
      "card_format": {
        "properties": {
          "form": {
            "description": "PHYSICAL or VIRTUAL.",
            "enum": [
              "PHYSICAL",
              "VIRTUAL"
            ],
            "type": "string"
          }
        },
        "required": [
          "form"
        ],
        "type": "object"
      },
      "card_fulfillment_provider": {
        "description": "card fulfillment provider for physical cards",
        "enum": [
          "ARROWEYE",
          "GD"
        ],
        "type": "string"
      },
      "card_fulfillment_status": {
        "description": "The status indicating the state of the card issuance",
        "enum": [
          "DIGITALLY_PRESENTED",
          "ISSUED",
          "ORDERED",
          "REISSUED",
          "REJECTED",
          "REORDERED",
          "SHIPPED"
        ],
        "type": "string"
      },
      "card_id": {
        "description": "The unique identifier of a card",
        "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
        "format": "uuid",
        "type": "string"
      },
      "card_image_details": {
        "properties": {
          "card_product_id": {
            "$ref": "#/components/schemas/card_product_id"
          },
          "customer_id": {
            "$ref": "#/components/schemas/customer_id1"
          },
          "id": {
            "$ref": "#/components/schemas/card_image_id"
          },
          "rejection_memo": {
            "type": "string"
          },
          "rejection_reason": {
            "$ref": "#/components/schemas/card_image_rejection_reason"
          },
          "status": {
            "$ref": "#/components/schemas/card_image_status"
          }
        },
        "required": [
          "card_product_id",
          "customer_id",
          "id",
          "status"
        ]
      },
      "card_image_details_list": {
        "allOf": [
          {
            "properties": {
              "images": {
                "description": "Array of image details",
                "items": {
                  "$ref": "#/components/schemas/card_image_details"
                },
                "type": "array"
              }
            },
            "required": [
              "images"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "card_image_id": {
        "description": "The unique identifier of a card image",
        "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
        "format": "uuid",
        "type": "string"
      },
      "card_image_mode": {
        "description": "The image mode of a card product.\nIf the card product supports custom card images, this value determines how the images will be handled during card issuance.\nREQUIRED_APPROVED_FIRST means that cards issued with this card product must have the ID of an image that has been uploaded and approved.\n",
        "enum": [
          "REQUIRED_APPROVED_FIRST"
        ],
        "type": "string"
      },
      "card_image_rejection_reason": {
        "description": "The category of reason that a card image was rejected",
        "enum": [
          "BRANDED",
          "COPYRIGHT",
          "INAPPROPRIATE",
          "OTHER",
          "PROMOTIONAL",
          "TRADEMARK"
        ],
        "type": "string"
      },
      "card_image_status": {
        "description": "The status of a custom card image",
        "enum": [
          "APPROVED",
          "NOT_UPLOADED",
          "REJECTED",
          "UNREVIEWED"
        ],
        "type": "string"
      },
      "card_issuance_request": {
        "discriminator": {
          "mapping": {
            "CREDIT": "#/components/schemas/credit_card",
            "DEBIT": "#/components/schemas/debit_card",
            "PREPAID": "#/components/schemas/debit_card"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/debit_card"
          },
          {
            "$ref": "#/components/schemas/credit_card"
          }
        ],
        "type": "object"
      },
      "card_lifecycle_state": {
        "description": "Lifecycle                            | Description\n-------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nDENIED                               | The dispute has been denied.\nPENDING_ACTION                       | A dispute has been created and is pending subsequent action.\nWRITE_OFF                            | The dispute has been written off and will not be filed with the card network.\nCHARGEBACK                           | A chargeback has been created with the card network. The acquiring bank now has the opportunity to file for re-presentment. If no re-presentment is filed the acquirer assumes financial responsibility and the case is won.\nNETWORK_REJECTED_CHARGEBACK          | The chargeback submission has been rejected by the card network. The chargeback can be optionally resubmitted once the rejection reason has been addressed.\nNETWORK_REJECTED_CHARGEBACK_REVERSAL | The chargeback reversal has been rejected by the card network.\nREPRESENTMENT                        | The acquiring bank has created a re-presentment with the card network. The issuing bank now has the opportunity to file for pre-arbitration. If no pre-arbitration is filed the issuer assumes financial responsibility and the case is lost.\nPRE_ARBITRATION                      | A pre-arbitration case has been created with the network. The acquiring bank now has the opportunity to rebut the case with subsequent evidence. If no rebuttal is filed the acquirer assumes financial responsibility and the case is won.\nPRE_ARBITRATION_RESPONSE             | The acquiring bank has rebutted the pre-arbitration case. The issuing bank now has the opportunity to file for arbitration. If no arbitration case is filed the issuer assumes financial responsibility and the case is lost.\nARBITRATION                          | An arbitration case has been created with the card network. The acquiring bank now has the opportunity to rebut the arbitration case with subsequent evidence.\nARBITRATION_RESPONSE                 | The acquiring bank has rebutted the arbitration case. The issuing bank can either withdraw the case or do nothing and the card network will make a decision on who assumes the financial responsibility.\nPRE_COMPLIANCE                       | A pre-compliance case has been created by either the issuer or acquirer.\nPRE_COMPLIANCE_RESPONSE              | The opposing party has rebutted the pre-compliance case with further evidence.\nCOMPLIANCE                           | The initiating party has escalated the pre-compliance case to compliance.\nCOMPLIANCE_RESPONSE                  | The opposing party has rebutted the compliance case with further evidence.\n",
        "enum": [
          "ARBITRATION",
          "ARBITRATION_RESPONSE",
          "CHARGEBACK",
          "COMPLIANCE",
          "COMPLIANCE_RESPONSE",
          "DENIED",
          "NETWORK_REJECTED_CHARGEBACK",
          "NETWORK_REJECTED_CHARGEBACK_REVERSAL",
          "PENDING_ACTION",
          "PRE_ARBITRATION",
          "PRE_ARBITRATION_RESPONSE",
          "PRE_COMPLIANCE",
          "PRE_COMPLIANCE_RESPONSE",
          "REPRESENTMENT",
          "WRITE_OFF"
        ],
        "type": "string"
      },
      "card_list_response": {
        "allOf": [
          {
            "$ref": "#/components/schemas/paginated_response"
          },
          {
            "properties": {
              "cards": {
                "description": "Array of Cards",
                "items": {
                  "$ref": "#/components/schemas/card_response"
                },
                "type": "array"
              }
            },
            "required": [
              "cards"
            ],
            "type": "object"
          }
        ]
      },
      "card_metadata": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Additional data to include in the request structured as key-value pairs",
        "type": "object"
      },
      "card_network_eligibility": {
        "description": "Network eligibility restrictions.",
        "properties": {
          "is_digital_wallet_token": {
            "description": "Transaction was processed using a digital wallet token.",
            "type": "boolean"
          },
          "is_network_eligibility_overridden": {
            "description": "Network eligibility restrictions have been overridden.",
            "type": "boolean"
          },
          "is_three_ds": {
            "description": "Transaction was authenticated with 3DS.",
            "type": "boolean"
          }
        },
        "required": [
          "is_digital_wallet_token",
          "is_network_eligibility_overridden",
          "is_three_ds"
        ],
        "type": "object"
      },
      "card_options": {
        "properties": {
          "billing_address": {
            "$ref": "#/components/schemas/billing_address"
          },
          "card_present": {
            "default": false,
            "type": "boolean"
          },
          "cvv": {
            "maxLength": 3,
            "type": "string"
          },
          "expiration": {
            "maxLength": 4,
            "minLength": 4,
            "type": "string"
          }
        },
        "type": "object"
      },
      "card_product": {
        "allOf": [
          {
            "$ref": "#/components/schemas/card_format"
          },
          {
            "properties": {
              "active": {
                "description": "Indicates whether the Card Product is active",
                "type": "boolean"
              },
              "bin_country": {
                "$ref": "#/components/schemas/country_code"
              },
              "bulk_shipping_enabled": {
                "default": false,
                "description": "Indicates whether or not cards issued with this product can be shipped in bulk. Refer to Bulk Issuance.",
                "type": "boolean"
              },
              "bypass_risk_errors": {
                "$ref": "#/components/schemas/bypass_risk_errors"
              },
              "card_brand": {
                "$ref": "#/components/schemas/card_brand"
              },
              "card_category": {
                "$ref": "#/components/schemas/card_category"
              },
              "card_fulfillment_country": {
                "$ref": "#/components/schemas/country_code"
              },
              "card_fulfillment_provider": {
                "$ref": "#/components/schemas/card_fulfillment_provider"
              },
              "card_program_id": {
                "description": "Card Program ID",
                "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
                "format": "uuid",
                "type": "string"
              },
              "card_type": {
                "$ref": "#/components/schemas/card_type"
              },
              "color": {
                "description": "Color code for dynamic card elements such as PAN and card holder name",
                "pattern": "^[0-9A-F]{6}$",
                "type": "string"
              },
              "creation_time": {
                "description": "The timestamp representing when the Card Product was created",
                "example": "2010-05-06T12:23:34.321Z",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "cross_border_enabled": {
                "$ref": "#/components/schemas/cross_border_enabled"
              },
              "digital_wallet_tokenization": {
                "$ref": "#/components/schemas/digital_wallet_tokenization"
              },
              "end_date": {
                "description": "The time when the Card Product is decommissioned",
                "example": "2050-06-07T21:32:43.321Z",
                "format": "date-time",
                "type": "string"
              },
              "id": {
                "description": "Card Product ID",
                "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
                "format": "uuid",
                "readOnly": true,
                "type": "string"
              },
              "image": {
                "description": "Indicates whether or not there is an overlay image of the card product available",
                "type": "boolean"
              },
              "image_mode": {
                "$ref": "#/components/schemas/card_image_mode"
              },
              "issue_without_kyc": {
                "description": "Allow issuing cards on this product without requiring KYC",
                "type": "boolean"
              },
              "l2l3_enabled": {
                "$ref": "#/components/schemas/l2l3_enabled"
              },
              "last_updated_time": {
                "description": "The timestamp representing when the Card Product was last modified",
                "example": "2010-05-06T12:23:34.321Z",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "name": {
                "description": "The name of the Card Product",
                "maxLength": 40,
                "minLength": 1,
                "type": "string"
              },
              "notification_language": {
                "$ref": "#/components/schemas/notification_language"
              },
              "offline_pin": {
                "description": "Cards issued with this product have the PIN stored on the card for use in offline scenarios.",
                "type": "boolean"
              },
              "orientation": {
                "description": "Card orientation",
                "enum": [
                  "HORIZONTAL",
                  "VERTICAL"
                ],
                "type": "string"
              },
              "package_id": {
                "description": "Card fulfillment provider’s package ID",
                "maxLength": 50,
                "minLength": 1,
                "type": "string"
              },
              "physical_card_format": {
                "$ref": "#/components/schemas/physical_card_format"
              },
              "pin_issuance_policy": {
                "$ref": "#/components/schemas/pin_issuance_policy"
              },
              "return_address": {
                "$ref": "#/components/schemas/shipping"
              },
              "start_date": {
                "description": "The time when the Card Product goes live",
                "example": "2010-05-06T12:23:34.321Z",
                "format": "date-time",
                "type": "string"
              },
              "txn_enhancer": {
                "$ref": "#/components/schemas/txn_enhancer"
              },
              "unsecured_credit_enabled": {
                "default": false,
                "description": "Indicates whether unsecured credit is enabled for this card product",
                "type": "boolean"
              }
            },
            "required": [
              "active",
              "bin_id",
              "card_program_id",
              "name",
              "start_date"
            ],
            "type": "object"
          }
        ],
        "description": "Card Product"
      },
      "card_product_id": {
        "description": "The unique identifier of a cards product",
        "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
        "format": "uuid",
        "type": "string"
      },
      "card_product_list_response": {
        "allOf": [
          {
            "properties": {
              "card_products": {
                "description": "Array of Card Products",
                "items": {
                  "$ref": "#/components/schemas/card_product_response"
                },
                "type": "array"
              }
            },
            "required": [
              "card_products"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "card_product_response": {
        "allOf": [
          {
            "$ref": "#/components/schemas/card_product"
          },
          {
            "properties": {
              "account_range_id": {
                "$ref": "#/components/schemas/account_range_id"
              },
              "bin_id": {
                "$ref": "#/components/schemas/bin_id"
              },
              "tenant": {
                "$ref": "#/components/schemas/tenant_id"
              },
              "three_ds_policy": {
                "$ref": "#/components/schemas/three_ds_policy"
              }
            },
            "required": [
              "account_range_id",
              "bin_id",
              "tenant",
              "three_ds_policy"
            ],
            "type": "object"
          }
        ],
        "required": [
          "active",
          "bulk_shipping_enabled",
          "card_program_id",
          "creation_time",
          "digital_wallet_tokenization",
          "end_date",
          "form",
          "id",
          "last_updated_time",
          "name",
          "start_date",
          "tenant",
          "unsecured_credit_enabled"
        ]
      },
      "card_response": {
        "discriminator": {
          "mapping": {
            "CREDIT": "#/components/schemas/credit_card_response",
            "DEBIT": "#/components/schemas/debit_card_response",
            "PREPAID": "#/components/schemas/debit_card_response"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/credit_card_response"
          },
          {
            "$ref": "#/components/schemas/debit_card_response"
          }
        ],
        "type": "object"
      },
      "card_reveal_response": {
        "properties": {
          "ciphertext": {
            "description": "JWE compact serialization of the encrypted card data as defined in\n [RFC 7516 Section 7.1](https://datatracker.ietf.org/doc/html/rfc7516#section-7.1).\n\n Format: `header.encryptedKey.iv.ciphertext.authTag`\n\n All segments are base64url-encoded and concatenated with periods.\n\n - header: Contains algorithm information and key identifier\n   - \"alg\": \"ECDH-ES+A256KW\" - Key management algorithm\n   - \"enc\": \"A256GCM\" - Content encryption algorithm\n   - \"kid\": base64url-encoded JWK thumbprint. The thumbprint is calculated using the JWK as per [RFC 7638](https://datatracker.ietf.org/doc/html/rfc7638#section-3.1) and is used to identify the public key used for encryption.\n\n   The algorithm identifiers follow [RFC 7518](https://datatracker.ietf.org/doc/html/rfc7518)\n\n - encryptedKey: The content encryption key encrypted using ECDH-ES\n - iv: Initialization vector for AES-GCM\n - ciphertext: The actual encrypted data\n - authTag: Authentication tag for AES-GCM integrity verification\n\n When decrypted, the ciphertext contains a JSON object with the following structure:\n ```json\n {\n   \"pan\": \"5217866647558899\",\n   \"cvv\": \"123\",\n   \"expiration_year\": \"25\",\n   \"expiration_month\": \"06\"\n }\n ```\n",
            "example": "eyJhbGciOiJFQ0RILUVTK0EyNTZLVyIsImVuYyI6IkEyNTZHQ00iLCJraWQiOiJyZWNpcGllbnQta2V5LWlkIn0.AAAAAAAAAA.qcT0jHQJp5MI.0mxQptHnLbmpYmVF-HPzwg.iH2aDMwuCefM_iBPxuBbJA",
            "type": "string"
          }
        },
        "required": [
          "ciphertext"
        ],
        "type": "object"
      },
      "card_status": {
        "description": "The status indicating the card lifecycle state",
        "enum": [
          "ACTIVE",
          "PENDING",
          "REJECTED",
          "SUSPENDED",
          "TERMINATED",
          "UNACTIVATED"
        ],
        "type": "string"
      },
      "card_status_object": {
        "description": "The status of the card",
        "properties": {
          "card_status": {
            "$ref": "#/components/schemas/card_status"
          },
          "memo": {
            "$ref": "#/components/schemas/card_status_reason_memo"
          },
          "pending_reasons": {
            "$ref": "#/components/schemas/card_status_pending_reasons"
          },
          "status_reason": {
            "$ref": "#/components/schemas/card_status_reason_code"
          }
        },
        "required": [
          "card_status"
        ],
        "title": "Status",
        "type": "object"
      },
      "card_status_pending_reasons": {
        "description": "reasons why the card status is PENDING",
        "properties": {
          "is_waiting_for_bulk_shipment": {
            "description": "The card is to be shipping as part of a bulk shipment but that bulk shipment has not yet been released.\n",
            "type": "boolean"
          },
          "is_waiting_for_image": {
            "description": "The card has a custom image and either that image hasn't yet been uploaded and approved or the card has not yet been processed by the periodic daily custom card image processing task.\n",
            "type": "boolean"
          },
          "is_waiting_for_pin": {
            "description": "The card requires a PIN to be set before it can be issued (refer to the pin_issuance_policy of the related card product). The PIN has not yet been set and not enough time has passed to use a random PIN (if applicable).\n",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "card_status_reason_code": {
        "description": "The reason for the card status\n\nCode | Description\n--- | ---\nNEW | Card activated\nREQ | Requested by you\nINA | Dormant\nUNK | Invalid shipping address\nNEG | Negative account balance\nREV | Account under review\nSUS | Suspicious activity\nOUT | Activity outside program parameters\nFRD | Confirmed fraud\nMAT | Matched with an OFAC list\nLOS | Card reported lost\nCLO | Card was cloned\nCOM | Account or card was compromised\nTMP | Awaiting customer confirmation\nPRC | Initiated by Processor\nISS | Initiated by Issuer\nEXP | Card expired\nKYC | Failed KYC\nINF | Information was validated\nACT | Account activity was validated\nAUX | Initiated by a third party\nPIN | PIN try limit reached\nSTO | Card reported stolen\nADD | Address issue\nNAM | Name issue\nSSN | SSN issue\nDOB | DOB issue\nEML | Email issue\nPHO | Phone issue\nFUL | Account/fulfillment mismatch\nOTH | Other\n",
        "enum": [
          "ACT",
          "ADD",
          "AUX",
          "CLO",
          "COM",
          "DOB",
          "EML",
          "EXP",
          "FRD",
          "FUL",
          "INA",
          "INF",
          "ISS",
          "KYC",
          "LOS",
          "MAT",
          "NAM",
          "NEG",
          "NEW",
          "OTH",
          "OUT",
          "PHO",
          "PIN",
          "PRC",
          "REQ",
          "REV",
          "SSN",
          "STO",
          "SUS",
          "TMP",
          "UNK"
        ],
        "type": "string"
      },
      "card_status_reason_memo": {
        "description": "Additional details about the reason for the status change",
        "maxLength": 255,
        "type": "string"
      },
      "card_status_request": {
        "description": "The status indicating the card lifecycle state",
        "enum": [
          "ACTIVE",
          "SUSPENDED",
          "TERMINATED"
        ],
        "type": "string"
      },
      "card_transaction": {
        "allOf": [
          {
            "properties": {
              "card_transaction": {
                "$ref": "#/components/schemas/card_transaction_data"
              },
              "subtype": {
                "$ref": "#/components/schemas/card_transaction_subtypes"
              }
            },
            "required": [
              "card_transaction",
              "subtype"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/base_transaction"
          }
        ]
      },
      "card_transaction_data": {
        "description": "Transaction metadata specific to transactions with type `CARD`",
        "properties": {
          "card_id": {
            "description": "Debit Network ID",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "readOnly": true,
            "type": "string",
            "x-go-type": "string"
          },
          "currency_code": {
            "type": "string"
          },
          "currency_conversion": {
            "description": "Currency conversion details",
            "properties": {
              "conversion_rate": {
                "description": "The currency conversion rate used",
                "type": "number"
              },
              "original_amount": {
                "description": "The original transaction amount before conversion",
                "type": "integer"
              },
              "original_currency_code": {
                "description": "The original currency code",
                "type": "string"
              }
            },
            "type": "object"
          },
          "merchant": {
            "description": "Information about the merchant",
            "properties": {
              "address": {
                "description": "Merchant address",
                "type": "string"
              },
              "city": {
                "description": "Merchant city",
                "type": "string"
              },
              "country_code": {
                "description": "Merchant country code",
                "type": "string"
              },
              "independent_sales_organization_id": {
                "description": "Independent sales organization identifier",
                "type": "string"
              },
              "mcc": {
                "description": "Merchant category code",
                "type": "string"
              },
              "mid": {
                "description": "Merchant identifier",
                "type": "string"
              },
              "name": {
                "description": "Merchant name",
                "type": "string"
              },
              "payment_facilitator_id": {
                "description": "Payment facilitator identifier",
                "type": "string"
              },
              "postal_code": {
                "description": "Merchant postal code",
                "type": "string"
              },
              "state": {
                "description": "Merchant state",
                "type": "string"
              },
              "sub_merchant_id": {
                "description": "Sub merchant identifier",
                "type": "string"
              }
            },
            "type": "object"
          },
          "network": {
            "description": "The network used for the transaction",
            "type": "string"
          },
          "network_reference_id": {
            "description": "The ID provided by he network to represent this transaction",
            "type": "string"
          },
          "pos": {
            "description": "Information about the point of sale",
            "properties": {
              "card_data_input_capability": {
                "description": "Terminal Card data acceptance method",
                "type": "string"
              },
              "card_holder_presence": {
                "description": "Cardholder presence",
                "type": "boolean"
              },
              "card_presence": {
                "description": "Card presence",
                "type": "boolean"
              },
              "cardholder_authentication_method": {
                "description": "Cardholder authentication method",
                "type": "string"
              },
              "country_code": {
                "description": "Terminal country code",
                "type": "string"
              },
              "is_installment": {
                "description": "Transaction is an installment payment",
                "type": "boolean"
              },
              "is_recurring": {
                "description": "Transaction is recurring",
                "type": "boolean"
              },
              "pan_entry_mode": {
                "description": "Card pan capture method",
                "type": "string"
              },
              "partial_approval_capable": {
                "description": "Terminal partial approval capability",
                "type": "boolean"
              },
              "pin_entry_mode": {
                "description": "Card pin capture method",
                "type": "string"
              },
              "pin_present": {
                "description": "Pin presence",
                "type": "boolean"
              },
              "purchase_amount_only": {
                "description": "Terminal purchase amount only",
                "type": "boolean"
              },
              "terminal_attendance": {
                "description": "Terminal attendance",
                "type": "string"
              },
              "terminal_id": {
                "description": "Terminal identifier",
                "type": "string"
              },
              "terminal_location": {
                "description": "Terminal location",
                "type": "string"
              },
              "terminal_type": {
                "description": "Terminal type",
                "type": "string"
              },
              "zip": {
                "description": "Terminal zip code",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "card_transaction_subtypes": {
        "description": "The set of valid CARD transaction subtypes",
        "enum": [
          "ATM_WITHDRAWAL",
          "ATM_WITHDRAWAL_REVERSAL",
          "BALANCE_INQUIRY",
          "CARD_NETWORK_FINAL_CHARGEBACK",
          "CARD_NETWORK_FINAL_CHARGEBACK_REVERSAL",
          "CARD_NETWORK_FIRST_CHARGEBACK",
          "CARD_NETWORK_FIRST_CHARGEBACK_REVERSAL",
          "CARD_NETWORK_REPRESENTMENT",
          "CARD_NETWORK_REPRESENTMENT_REVERSAL",
          "CARD_TRANSACTION",
          "CARD_TRANSACTION_REVERSAL",
          "CHARGEBACK",
          "CHARGEBACK_REVERSAL",
          "CREDIT",
          "CREDIT_REVERSAL",
          "DIRECTPOST",
          "DIRECTPOST_REVERSAL",
          "POS_CASHBACK",
          "POS_CASHBACK_REVERSAL",
          "POS_PURCHASE",
          "POS_PURCHASE_REFUND",
          "POS_PURCHASE_REFUND_REVERSAL",
          "POS_PURCHASE_REVERSAL",
          "POS_REFUND",
          "POS_REFUND_REVERSAL",
          "PROVISIONAL_CREDIT",
          "PROVISIONAL_CREDIT_REVERSAL"
        ],
        "type": "string"
      },
      "card_type": {
        "description": "The type of the card program and BIN",
        "enum": [
          "CREDIT",
          "DEBIT",
          "PREPAID"
        ],
        "type": "string"
      },
      "card_widget_type": {
        "enum": [
          "ACTIVATE",
          "GET_PIN",
          "REVEAL",
          "SET_PIN"
        ],
        "type": "string"
      },
      "card_widget_url_response": {
        "description": "A URL for activate card and set pin widgets",
        "properties": {
          "url": {
            "format": "uri",
            "type": "string"
          }
        },
        "type": "object"
      },
      "cardholder_name": {
        "description": "The cardholder name",
        "example": "Jean Valjean",
        "type": "string"
      },
      "cash_transaction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/base_transaction"
          },
          {
            "properties": {
              "cash_transaction": {
                "$ref": "#/components/schemas/cash_transaction_data"
              },
              "subtype": {
                "$ref": "#/components/schemas/cash_transaction_subtypes"
              }
            },
            "required": [
              "cash_transaction",
              "subtype"
            ],
            "type": "object"
          }
        ]
      },
      "cash_transaction_data": {
        "description": "Transaction metadata specific to transactions with type `CASH`",
        "properties": {
          "id": {
            "description": "The Synctera cash pickup deposit id",
            "type": "string"
          }
        },
        "type": "object"
      },
      "cash_transaction_subtypes": {
        "description": "The set of valid CASH transaction subtypes",
        "enum": [
          "CASH_ORDER",
          "CASH_ORDER_REVERSAL",
          "DEPOSIT",
          "DEPOSIT_REVERSAL",
          "IN_STORE_DEPOSIT",
          "IN_STORE_DEPOSIT_REVERSAL"
        ],
        "type": "string"
      },
      "charge_secured_statement": {
        "allOf": [
          {
            "properties": {
              "credit_summary": {
                "$ref": "#/components/schemas/credit_summary"
              },
              "security_account_summary": {
                "$ref": "#/components/schemas/security_account_summary"
              }
            },
            "required": [
              "credit_summary",
              "security_account_summary"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/base_statement"
          }
        ],
        "description": "A statement for a charge secured account",
        "title": "Charge Secured Statement"
      },
      "charge_unsecured_statement": {
        "allOf": [
          {
            "properties": {
              "credit_summary": {
                "$ref": "#/components/schemas/credit_summary"
              }
            },
            "required": [
              "credit_summary"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/base_statement"
          }
        ],
        "description": "A statement for a charge unsecured account",
        "title": "Charge Unsecured Statement"
      },
      "check_transaction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/base_transaction"
          },
          {
            "properties": {
              "check_transaction": {
                "$ref": "#/components/schemas/check_transaction_data"
              },
              "subtype": {
                "$ref": "#/components/schemas/check_transaction_subtypes"
              }
            },
            "required": [
              "check_transaction",
              "subtype"
            ],
            "type": "object"
          }
        ]
      },
      "check_transaction_data": {
        "description": "Transaction metadata specific to transactions with type `WIRE`",
        "properties": {
          "back_image_id": {
            "description": "The back image id of the captured check",
            "type": "string"
          },
          "check_number": {
            "description": "The unique check number for this check in a given checkbook",
            "type": "string"
          },
          "front_image_id": {
            "description": "The front image id of the captured check",
            "type": "string"
          },
          "id": {
            "description": "The Synctera check deposit ID",
            "type": "string"
          }
        },
        "type": "object"
      },
      "check_transaction_subtypes": {
        "description": "The set of valid CHECK transaction subtypes",
        "enum": [
          "MOBILE_DEPOSIT",
          "MOBILE_DEPOSIT_RETURN",
          "MOBILE_DEPOSIT_RETURN_REVERSAL",
          "MOBILE_DEPOSIT_REVERSAL"
        ],
        "type": "string"
      },
      "clearing_model": {
        "example": {
          "amount": 80,
          "card_acceptor": {
            "address": "address",
            "city": "city",
            "country": "country",
            "ecommerce_security_level_indicator": "ecommerce_security_level_indicator",
            "mcc": "mcc",
            "name": "name",
            "partial_approval_capable": false,
            "state": "state",
            "zip": "zip"
          },
          "force_post": false,
          "is_refund": false,
          "mid": "mid",
          "network_fees": [
            {
              "amount": 123,
              "credit_debit": "C",
              "type": "ISSUER_FEE"
            },
            {
              "amount": 123,
              "credit_debit": "C",
              "type": "ISSUER_FEE"
            }
          ],
          "original_transaction_id": "original_transaction_id"
        },
        "properties": {
          "amount": {
            "description": "The amount of the transaction in the smallest whole denomination of the applicable currency (eg. For USD use cents)",
            "type": "integer"
          },
          "card_acceptor": {
            "$ref": "#/components/schemas/card_acceptor_model"
          },
          "force_post": {
            "default": false,
            "type": "boolean"
          },
          "is_refund": {
            "default": false,
            "type": "boolean"
          },
          "mid": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "network_fees": {
            "items": {
              "$ref": "#/components/schemas/network_fee_model"
            },
            "type": "array"
          },
          "original_transaction_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "amount",
          "original_transaction_id"
        ],
        "type": "object"
      },
      "client_token": {
        "description": "A short-lived, one-time token used for accessing client PINs/PANs",
        "properties": {
          "client_token": {
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "type": "string"
          }
        },
        "title": "Client Token",
        "type": "object"
      },
      "country_code": {
        "description": "ISO-3166-1 Alpha-2 country code",
        "example": "US",
        "maxLength": 2,
        "minLength": 2,
        "type": "string"
      },
      "create_barcode_request": {
        "properties": {
          "account_id": {
            "description": "ID of the account for which the barcode is generated.",
            "example": "123e4567-e89b-12d3-a456-426614174001",
            "format": "uuid",
            "type": "string"
          },
          "customer_id": {
            "description": "ID of the customer for whom the barcode is generated.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid",
            "type": "string"
          },
          "customer_latitude": {
            "$ref": "#/components/schemas/customer_latitude"
          },
          "customer_longitude": {
            "$ref": "#/components/schemas/customer_longitude"
          },
          "external_device_id": {
            "description": "ID of the external device used for the barcode generation.",
            "example": "device123",
            "maxLength": 64,
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/barcode_metadata"
          },
          "type": {
            "$ref": "#/components/schemas/barcode_type"
          }
        },
        "required": [
          "account_id",
          "customer_id",
          "customer_latitude",
          "customer_longitude",
          "type"
        ],
        "type": "object"
      },
      "create_batch_payments_request": {
        "properties": {
          "dry_run": {
            "description": "Whether or not the batch should be created as a dry run. If the batch is created as a dry run, the batch will not be processed.\n",
            "type": "boolean"
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          },
          "transaction_ids": {
            "description": "The IDs of the transfers that are part of the batch. These values can be modified by the client before  the batch is in a terminal status.\n",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "transaction_ids"
        ],
        "title": "Request for creating batch payments",
        "type": "object"
      },
      "create_batch_payments_response": {
        "properties": {
          "batches": {
            "$ref": "#/components/schemas/batch_payments"
          },
          "dry_run": {
            "description": "Whether or not the batch should be created as a dry run. If the batch is created as a dry run, the batch will not be processed.\n",
            "type": "boolean"
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          }
        },
        "required": [
          "batches"
        ],
        "title": "Response for creating a batch",
        "type": "object"
      },
      "create_card_image_request": {
        "properties": {
          "card_product_id": {
            "$ref": "#/components/schemas/card_product_id"
          },
          "customer_id": {
            "$ref": "#/components/schemas/customer_id1"
          }
        },
        "required": [
          "card_product_id",
          "customer_id"
        ],
        "type": "object"
      },
      "create_gateway_request": {
        "properties": {
          "card_products": {
            "description": "List of Card Product unique identifiers that will utilize the Gateway",
            "items": {
              "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "custom_headers": {
            "$ref": "#/components/schemas/gateway_custom_headers"
          },
          "is_active": {
            "description": "Current status of the Authorization gateway",
            "type": "boolean"
          },
          "standin": {
            "$ref": "#/components/schemas/gateway_standin"
          },
          "url": {
            "description": "URL of the Authorization gateway",
            "format": "uri",
            "maxLength": 1000,
            "type": "string"
          }
        },
        "required": [
          "card_products",
          "is_active",
          "url"
        ],
        "type": "object"
      },
      "create_three_ds_decision_gateway_request": {
        "properties": {
          "card_products": {
            "description": "List of Card Product IDs that will use the 3DS decision gateway",
            "items": {
              "example": "4caf8488-6c94-494a-a73d-11fc893312c8",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "custom_headers": {
            "$ref": "#/components/schemas/gateway_custom_headers"
          },
          "decision_url": {
            "description": "URL of the 3DS decision gateway",
            "format": "uri",
            "maxLength": 1000,
            "type": "string"
          },
          "fallback_decision": {
            "$ref": "#/components/schemas/three_ds_decision"
          },
          "is_active": {
            "description": "The 3DS decision gateway will only be used if this is true.",
            "type": "boolean"
          }
        },
        "required": [
          "card_products",
          "decision_url",
          "fallback_decision",
          "is_active"
        ],
        "type": "object"
      },
      "create_transfer_response": {
        "discriminator": {
          "mapping": {
            "PULL": "#/components/schemas/create_transfer_response_pull",
            "PUSH": "#/components/schemas/create_transfer_response_push"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/create_transfer_response_push"
          },
          {
            "$ref": "#/components/schemas/create_transfer_response_pull"
          }
        ],
        "type": "object"
      },
      "create_transfer_response_apple_pay": {
        "allOf": [
          {
            "properties": {
              "card_details": {
                "$ref": "#/components/schemas/external_card_details"
              },
              "type": {
                "description": "Type of transfer operation",
                "enum": [
                  "APPLE_PAY_PULL"
                ],
                "type": "string"
              }
            },
            "required": [
              "card_details",
              "type"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/transfer_response_base"
          }
        ],
        "type": "object"
      },
      "create_transfer_response_google_pay": {
        "allOf": [
          {
            "properties": {
              "card_details": {
                "$ref": "#/components/schemas/external_card_details"
              },
              "type": {
                "description": "Type of transfer operation",
                "enum": [
                  "GOOGLE_PAY_PULL"
                ],
                "type": "string"
              }
            },
            "required": [
              "card_details",
              "type"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/transfer_response_base"
          }
        ],
        "type": "object"
      },
      "create_transfer_response_pull": {
        "allOf": [
          {
            "properties": {
              "external_card_id": {
                "$ref": "#/components/schemas/external_card_id"
              },
              "three_ds_id": {
                "$ref": "#/components/schemas/transfer_three_ds_id"
              },
              "type": {
                "$ref": "#/components/schemas/create_transfer_type"
              }
            },
            "required": [
              "external_card_id",
              "type"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/transfer_response_base"
          }
        ],
        "type": "object"
      },
      "create_transfer_response_push": {
        "allOf": [
          {
            "properties": {
              "external_card_id": {
                "$ref": "#/components/schemas/external_card_id"
              },
              "originating_customer_id": {
                "$ref": "#/components/schemas/transfer_originating_customer_id"
              },
              "type": {
                "$ref": "#/components/schemas/create_transfer_type"
              }
            },
            "required": [
              "external_card_id",
              "type"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/transfer_response_base"
          }
        ],
        "type": "object"
      },
      "create_transfer_type": {
        "description": "Type of transfer operation.\n\nType | Description\n--- | ---\nPUSH | Push funds to an External Card from an Account\nPULL | Pull funds from an External Card to an Account\n",
        "enum": [
          "PULL",
          "PUSH"
        ],
        "example": "PULL",
        "type": "string"
      },
      "credit_application": {
        "properties": {
          "account_id": {
            "description": "Account ID for the application. Only required if application purpose is not ACCOUNT_OPENING",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "account_type": {
            "$ref": "#/components/schemas/application_account_type"
          },
          "applicants": {
            "items": {
              "$ref": "#/components/schemas/applicant"
            },
            "minItems": 1,
            "type": "array"
          },
          "application_submitted_time": {
            "description": "Application submitted timestamp in RFC3339 format",
            "example": "2023-01-13T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "credit_decision_time": {
            "description": "Credit decision timestamp in RFC3339 format",
            "example": "2023-01-13T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "customer_response_time": {
            "description": "Credit decision timestamp in RFC3339 format",
            "example": "2023-01-13T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "purpose": {
            "$ref": "#/components/schemas/credit_application_purpose"
          },
          "status": {
            "$ref": "#/components/schemas/credit_application_status"
          },
          "type": {
            "$ref": "#/components/schemas/application_type"
          }
        },
        "required": [
          "account_type",
          "applicants",
          "purpose",
          "status",
          "type"
        ],
        "title": "Credit application details",
        "type": "object"
      },
      "credit_application_patch": {
        "properties": {
          "applicants": {
            "items": {
              "$ref": "#/components/schemas/applicant"
            },
            "type": "array"
          },
          "status": {
            "$ref": "#/components/schemas/credit_application_status"
          }
        },
        "title": "Credit application details",
        "type": "object"
      },
      "credit_application_purpose": {
        "description": "Purpose of the credit application.\n",
        "enum": [
          "ACCOUNT_OPENING",
          "APR_REDUCTION",
          "HARDSHIP",
          "LINE_INCREASE_REQUEST"
        ],
        "title": "Application Purpose",
        "type": "string",
        "x-enumDescriptions": {
          "ACCOUNT_OPENING": "Application purpose is to open a new account",
          "APR_REDUCTION": "Application purpose is for app reduction",
          "HARDSHIP": "Application purpose is for hardship",
          "LINE_INCREASE_REQUEST": "Application purpose is to request line increase"
        }
      },
      "credit_application_response": {
        "allOf": [
          {
            "properties": {
              "creation_time": {
                "description": "Application creation timestamp in RFC3339 format",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "id": {
                "description": "Generated ID for the application",
                "format": "uuid",
                "readOnly": true,
                "type": "string"
              },
              "last_updated_time": {
                "description": "Timestamp of the last application modification in RFC3339 format",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              }
            },
            "required": [
              "creation_time",
              "id",
              "last_updated_time"
            ]
          },
          {
            "$ref": "#/components/schemas/credit_application"
          }
        ],
        "title": "Credit application details",
        "type": "object"
      },
      "credit_application_status": {
        "description": "Status of the credit application. CREDIT_DENIED, CREDIT_NOT_ACCEPTED_BY_CUSTOMER and  CREDIT_ACCEPTED_BY_CUSTOMER are terminal status\n",
        "enum": [
          "CREDIT_ACCEPTED_BY_CUSTOMER",
          "CREDIT_APPROVED",
          "CREDIT_DENIED",
          "CREDIT_NOT_ACCEPTED_BY_CUSTOMER",
          "SUBMITTED"
        ],
        "title": "Application Status",
        "type": "string"
      },
      "credit_card": {
        "description": "A card that can spend against a credit account",
        "properties": {
          "card_details": {
            "$ref": "#/components/schemas/credit_card_request_details"
          },
          "type": {
            "$ref": "#/components/schemas/card_type"
          }
        },
        "required": [
          "card_details",
          "type"
        ],
        "title": "Credit Card",
        "type": "object"
      },
      "credit_card_request_details": {
        "discriminator": {
          "mapping": {
            "PHYSICAL": "#/components/schemas/physical_credit_card_issuance_request",
            "VIRTUAL": "#/components/schemas/virtual_credit_card_issuance_request"
          },
          "propertyName": "form"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/physical_credit_card_issuance_request"
          },
          {
            "$ref": "#/components/schemas/virtual_credit_card_issuance_request"
          }
        ],
        "type": "object"
      },
      "credit_card_response": {
        "description": "A card that can spend against a credit account",
        "properties": {
          "card_details": {
            "$ref": "#/components/schemas/credit_card_response_details"
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          },
          "type": {
            "$ref": "#/components/schemas/card_type"
          }
        },
        "required": [
          "card_details",
          "tenant",
          "type"
        ],
        "title": "Credit Card",
        "type": "object"
      },
      "credit_card_response_details": {
        "discriminator": {
          "mapping": {
            "PHYSICAL": "#/components/schemas/physical_credit_card_response",
            "VIRTUAL": "#/components/schemas/virtual_credit_card_response"
          },
          "propertyName": "form"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/physical_credit_card_response"
          },
          {
            "$ref": "#/components/schemas/virtual_credit_card_response"
          }
        ],
        "type": "object"
      },
      "credit_score": {
        "properties": {
          "customer_id": {
            "description": "The unique identifier of a customer",
            "example": "64438afd-fa20-4010-a573-2bbdca77cdb6",
            "format": "uuid",
            "type": "string"
          },
          "score": {
            "description": "The credit score value",
            "example": 700,
            "type": "integer"
          },
          "score_requested_time": {
            "description": "The time the credit score was requested",
            "example": "2020-01-01T00:00:00.000Z",
            "format": "date-time",
            "type": "string"
          },
          "source_of_score": {
            "$ref": "#/components/schemas/source_of_score"
          },
          "type": {
            "description": "The type of the credit score",
            "example": "FICO",
            "type": "string"
          },
          "vendor_name": {
            "$ref": "#/components/schemas/vendor_name"
          },
          "version": {
            "description": "The version of the credit score",
            "example": "8",
            "type": "string"
          }
        },
        "required": [
          "customer_id",
          "source_of_score"
        ],
        "title": "Credit Score",
        "type": "object"
      },
      "credit_score_list": {
        "allOf": [
          {
            "$ref": "#/components/schemas/paginated_response"
          },
          {
            "properties": {
              "credit_scores": {
                "items": {
                  "$ref": "#/components/schemas/credit_score_response"
                },
                "type": "array"
              }
            },
            "required": [
              "credit_scores"
            ],
            "type": "object"
          }
        ],
        "title": "Credit Score list response object"
      },
      "credit_score_response": {
        "allOf": [
          {
            "$ref": "#/components/schemas/credit_score"
          },
          {
            "properties": {
              "creation_time": {
                "description": "The date and time the note was created.",
                "example": "2010-05-06T12:23:34.321Z",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "id": {
                "description": "credit score ID",
                "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
                "format": "uuid",
                "readOnly": true,
                "type": "string"
              },
              "last_updated_time": {
                "description": "The date and time the note was last updated.",
                "example": "2010-05-06T12:23:34.321Z",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              }
            },
            "required": [
              "creation_time",
              "customer_id",
              "id",
              "last_updated_time",
              "source_of_score"
            ]
          }
        ],
        "title": "Credit Score response object",
        "type": "object"
      },
      "credit_summary": {
        "description": "A summary of the accrued interest for the credit account in the current period.",
        "properties": {
          "amount_over_limit": {
            "description": "The portion of the posted account balance that exceeds the account's credit limit, in ISO 4217 minor currency units.",
            "example": 100000,
            "format": "int64",
            "type": "integer"
          },
          "amount_past_due": {
            "description": "Any outstanding balance from a previous statement for this account in ISO 4217 minor currency units.\n",
            "example": 100000,
            "format": "int64",
            "type": "integer"
          },
          "apr": {
            "description": "The annual percentage rate of the credit account, in basis points.",
            "format": "int64",
            "type": "integer"
          },
          "balance_for_interest": {
            "description": "Balance on which interest is computed during the time interval covered by the statement.",
            "format": "int64",
            "type": "integer"
          },
          "credit_limit": {
            "description": "The credit limit of the credit account, in ISO 4217 minor currency units. Not applicable for charge secured accounts.",
            "format": "int64",
            "type": "integer"
          },
          "disclosure": {
            "description": "A suggested regulatory disclosure to display on the statement.",
            "example": "We have told the credit bureau(s) about a late payment, missed payment or other default on your account. This information may be reflected in your credit report.",
            "type": "string"
          },
          "disputed_balance": {
            "description": "The disputed balance on the credit account in ISO 4217 minor currency units.",
            "format": "int64",
            "type": "integer"
          },
          "fees": {
            "description": "The total fees charged on the credit account in ISO 4217 minor currency units during the time interval covered by the statement.",
            "format": "int64",
            "type": "integer"
          },
          "fees_ytd": {
            "description": "The total fees charged on the credit account in ISO 4217 minor currency units for the year to date.",
            "format": "int64",
            "type": "integer"
          },
          "interest": {
            "description": "The total interest charged on the credit account in ISO 4217 minor currency units during the time interval covered by the statement.",
            "format": "int64",
            "type": "integer"
          },
          "interest_ytd": {
            "description": "The total interest charged on the credit account in ISO 4217 minor currency units for the year to date.",
            "format": "int64",
            "type": "integer"
          },
          "is_past_due": {
            "description": "Whether or not the credit account is past due on payment.",
            "type": "boolean"
          },
          "last_payment_date": {
            "description": "The date of the last payment received.",
            "format": "date",
            "type": "string"
          },
          "minimum_payment_due": {
            "description": "The minimum payment amount due by the payment due date in ISO 4217 minor currency units.",
            "format": "int64",
            "type": "integer"
          },
          "payment_due": {
            "description": "The total amount due by the payment due date in ISO 4217 minor currency units.",
            "format": "int64",
            "type": "integer"
          },
          "payment_due_date": {
            "description": "The date the next payment is due.",
            "format": "date",
            "type": "string"
          },
          "payments_received": {
            "description": "The sum of all payments received in ISO 4217 minor currency units.",
            "format": "int64",
            "type": "integer"
          }
        },
        "title": "Credit Summary",
        "type": "object"
      },
      "cross_border_enabled": {
        "default": false,
        "description": "Enable/Disable cross border transaction - transaction will be automatically declined when merchant country is different than BIN country when disabled. Cross-Border transaction are disabled by default.\n",
        "type": "boolean"
      },
      "currency_code": {
        "description": "ISO 4217  Alpha-3 currency code",
        "example": "USD",
        "maxLength": 3,
        "minLength": 3,
        "type": "string"
      },
      "customer_id": {
        "description": "Customer ID for the application",
        "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
        "format": "uuid",
        "type": "string"
      },
      "customer_id1": {
        "description": "The unique identifier of a customer",
        "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
        "format": "uuid",
        "type": "string"
      },
      "customer_latitude": {
        "description": "Latitude of the customer location.",
        "example": 40.73061,
        "format": "float",
        "maximum": 90,
        "minimum": -90,
        "type": "number"
      },
      "customer_longitude": {
        "description": "Longitude of the customer location.",
        "example": -73.935242,
        "format": "float",
        "maximum": 180,
        "minimum": -180,
        "type": "number"
      },
      "customer_service_details": {
        "description": "The customer service details of the fintech partner, e.g. phone number, email address, etc.",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/address1"
          },
          "email": {
            "description": "The customer service email address",
            "type": "string"
          },
          "phone_number": {
            "description": "The customer service phone number",
            "type": "string"
          }
        },
        "title": "Customer Service Details",
        "type": "object"
      },
      "debit_card": {
        "description": "A card that can spend against a deposit account",
        "properties": {
          "card_details": {
            "$ref": "#/components/schemas/debit_card_request_details"
          },
          "type": {
            "$ref": "#/components/schemas/card_type"
          }
        },
        "required": [
          "card_details",
          "type"
        ],
        "title": "Debit Card",
        "type": "object"
      },
      "debit_card_request_details": {
        "discriminator": {
          "mapping": {
            "PHYSICAL": "#/components/schemas/physical_debit_card_issuance_request",
            "VIRTUAL": "#/components/schemas/virtual_debit_card_issuance_request"
          },
          "propertyName": "form"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/physical_debit_card_issuance_request"
          },
          {
            "$ref": "#/components/schemas/virtual_debit_card_issuance_request"
          }
        ],
        "type": "object"
      },
      "debit_card_response": {
        "description": "A card that can spend against a deposit account",
        "properties": {
          "card_details": {
            "$ref": "#/components/schemas/debit_card_response_details"
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          },
          "type": {
            "$ref": "#/components/schemas/card_type"
          }
        },
        "required": [
          "card_details",
          "tenant",
          "type"
        ],
        "title": "Debit Card",
        "type": "object"
      },
      "debit_card_response_details": {
        "discriminator": {
          "mapping": {
            "PHYSICAL": "#/components/schemas/physical_debit_card_response",
            "VIRTUAL": "#/components/schemas/virtual_debit_card_response"
          },
          "propertyName": "form"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/physical_debit_card_response"
          },
          {
            "$ref": "#/components/schemas/virtual_debit_card_response"
          }
        ],
        "type": "object"
      },
      "decline_info": {
        "description": "The decline object provides information explaining why a declined transaction was declined.",
        "properties": {
          "decline_details": {
            "description": "Additional detail about the decline.",
            "type": "string"
          },
          "reason": {
            "description": "The reason the transaction was declined",
            "enum": [
              "ACH_RETURN",
              "BALANCE_VIOLATION",
              "DISABLED_PAYMENT_TYPE",
              "DUPLICATE_TRANSACTION",
              "GATEWAY_DECLINED",
              "GATEWAY_ERROR",
              "INSUFFICIENT_FUNDS",
              "NETWORK_DECLINED",
              "OTHER",
              "SUSPECTED_FRAUD",
              "TRANSACTION_NOT_PERMITTED"
            ],
            "type": "string"
          }
        },
        "required": [
          "reason"
        ],
        "type": "object"
      },
      "delete_response": {
        "description": "Deleted object information",
        "properties": {
          "id": {
            "description": "Object ID",
            "format": "uuid",
            "type": "string"
          },
          "resource": {
            "description": "The resource name",
            "type": "string"
          }
        },
        "title": "Deleted Object",
        "type": "object"
      },
      "depository_statement": {
        "allOf": [
          {
            "properties": {
              "saving_summary": {
                "$ref": "#/components/schemas/saving_summary"
              }
            },
            "required": [
              "saving_summary"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/base_statement"
          }
        ],
        "description": "A statement for a depository account",
        "title": "Depository Statement"
      },
      "device": {
        "description": "Contains device informations.",
        "properties": {
          "device_id": {
            "description": "The user’s Android device ID; the device’s unique identifier.",
            "maxLength": 124,
            "type": "string"
          },
          "ip_address": {
            "description": "IP address of the device.",
            "example": "1.12.123.255",
            "type": "string"
          },
          "location": {
            "description": "Location of the device.",
            "example": "+22.20/-159.50",
            "type": "string"
          },
          "name": {
            "description": "Name of the device.",
            "type": "string"
          },
          "token": {
            "description": "Unique identifier of the device",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/device_type_response"
          }
        },
        "type": "object"
      },
      "device_details": {
        "description": "Optionally provided browser device details, used as a fallback in case there is an issue with Device Data Collection. Note that minimal field validation is performed.",
        "properties": {
          "color_depth": {
            "description": "The device's color palette bit depth, in bits per pixel",
            "example": 24,
            "maximum": 99,
            "minimum": 1,
            "type": "integer"
          },
          "header": {
            "description": "The exact contents of the browser's HTTP accept headers",
            "example": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
            "type": "string"
          },
          "ip_address": {
            "description": "The device's IP address (either IPv4 or IPv6 formats are acceptable)",
            "example": "1.12.123.255",
            "type": "string"
          },
          "java_enabled": {
            "description": "If the browser has the ability to execute Java (value returned from `navigator.javaEnabled` property)",
            "type": "boolean"
          },
          "javascript_enabled": {
            "description": "If the browser has the ability to execute JavaScript (value returned from `navigator.javaScriptEnabled` property)",
            "type": "boolean"
          },
          "language": {
            "description": "The browser's language as defined in IETF BCP47",
            "example": "en-US",
            "type": "string"
          },
          "screen_height": {
            "description": "The total height of the device's screen, in pixels",
            "example": 1080,
            "maximum": 999999,
            "minimum": 1,
            "type": "integer"
          },
          "screen_width": {
            "description": "The total width of the device's screen, in pixels",
            "example": 1920,
            "maximum": 999999,
            "minimum": 1,
            "type": "integer"
          },
          "timezone": {
            "description": "The offset from UTC of the device's local timezone, in minutes",
            "example": -300,
            "maximum": 840,
            "minimum": -840,
            "type": "integer"
          },
          "user_agent": {
            "description": "The exact contents of the HTTP user agent header",
            "example": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36",
            "type": "string"
          }
        },
        "required": [
          "color_depth",
          "header",
          "ip_address",
          "java_enabled",
          "javascript_enabled",
          "language",
          "screen_height",
          "screen_width",
          "timezone",
          "user_agent"
        ],
        "type": "object"
      },
      "device_type": {
        "description": "The type of device into which the digital wallet token will be provisioned.",
        "enum": [
          "MOBILE_PHONE",
          "TABLET",
          "WATCH"
        ],
        "type": "string"
      },
      "device_type_response": {
        "description": "Type of the device where the Digital Wallet Token is used in",
        "enum": [
          "APPLIANCE",
          "GAMING_DEVICE",
          "LAPTOP",
          "MOBILE_PHONE",
          "MOBILE_PHONE_OR_TABLET",
          "TABLET",
          "UNKNOWN_DEVICE",
          "VEHICLE",
          "WATCH"
        ],
        "type": "string"
      },
      "digital_wallet_token_address_verification": {
        "properties": {
          "validate": {
            "example": false,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "digital_wallet_token_edit_request": {
        "properties": {
          "status": {
            "description": "The status indicating the digital wallet token lifecycle state",
            "enum": [
              "ACTIVE",
              "SUSPENDED",
              "TERMINATED"
            ],
            "type": "string"
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "digital_wallet_token_id": {
        "description": "The unique identifier of a digital wallet token",
        "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
        "format": "uuid",
        "type": "string"
      },
      "digital_wallet_token_response": {
        "properties": {
          "approved_time": {
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          },
          "card_id": {
            "description": "Card ID of the Digital wallet Token",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "device": {
            "$ref": "#/components/schemas/device"
          },
          "device_id": {
            "deprecated": true,
            "description": "The user’s Android device ID; the device’s unique identifier.",
            "maxLength": 124,
            "type": "string"
          },
          "device_type": {
            "deprecated": true,
            "description": "Type of the device where the Digital Wallet Token is used in",
            "enum": [
              "APPLIANCE",
              "GAMING_DEVICE",
              "LAPTOP",
              "MOBILE_PHONE",
              "MOBILE_PHONE_OR_TABLET",
              "TABLET",
              "UNKNOWN",
              "VEHICLE",
              "WATCH"
            ],
            "type": "string"
          },
          "id": {
            "description": "Digital Wallet Token ID",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "last_updated_time": {
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          },
          "processor_data": {
            "description": "Raw data from processor.",
            "type": "object"
          },
          "removed_from_wallet_time": {
            "description": "The time that the token was removed from a wallet. Tokens make remain active after being removed from a wallet.",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          },
          "requested_time": {
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/digital_wallet_token_state"
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          },
          "token_reference_id": {
            "description": "Unique identifier of the digital wallet token within the card network.",
            "type": "string"
          },
          "type": {
            "description": "Type of the Digital Wallet. Can be one of APPLE_PAY, ANDROID_PAY, SAMSUNG_PAY or something else when cards are added on file to a merchant.",
            "example": "APPLE_PAY",
            "type": "string"
          }
        },
        "required": [
          "tenant"
        ],
        "type": "object"
      },
      "digital_wallet_token_state": {
        "description": "Current status of the Digital Wallet Token",
        "enum": [
          "ACTIVE",
          "REQUESTED",
          "REQUEST_DECLINED",
          "SUSPENDED",
          "TERMINATED"
        ],
        "type": "string"
      },
      "digital_wallet_tokenization": {
        "properties": {
          "card_art_id": {
            "description": "Specifies the digital wallet card art identifier for the card product.",
            "type": "string"
          },
          "provisioning_controls": {
            "$ref": "#/components/schemas/provisioning_controls"
          }
        },
        "type": "object"
      },
      "dispute_action_by": {
        "description": "| action_by | Description                                                                                            |\n|-----------|--------------------------------------------------------------------------------------------------------|\n| INITIATOR | The last action was taken by the initiator of the dispute.                                             |\n| NETWORK   | The last action was taken by the network.                                                              |\n",
        "enum": [
          "INITIATOR",
          "NETWORK"
        ],
        "type": "string"
      },
      "dispute_action_request": {
        "discriminator": {
          "mapping": {
            "ACH": "#/components/schemas/ach_dispute_action",
            "CARD": "#/components/schemas/card_dispute_action",
            "EXTERNAL_CARD": "#/components/schemas/external_card_dispute_action"
          },
          "propertyName": "payment_rail"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ach_dispute_action"
          },
          {
            "$ref": "#/components/schemas/card_dispute_action"
          },
          {
            "$ref": "#/components/schemas/external_card_dispute_action"
          }
        ],
        "type": "object"
      },
      "dispute_action_response": {
        "discriminator": {
          "mapping": {
            "ACH": "#/components/schemas/ach_dispute_action_response",
            "CARD": "#/components/schemas/card_dispute_action_response",
            "EXTERNAL_CARD": "#/components/schemas/external_card_dispute_action_response"
          },
          "propertyName": "payment_rail"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ach_dispute_action_response"
          },
          {
            "$ref": "#/components/schemas/external_card_dispute_action_response"
          },
          {
            "$ref": "#/components/schemas/card_dispute_action_response"
          }
        ],
        "type": "object"
      },
      "dispute_credit_status": {
        "description": "The status of customer account credit related to the dispute\n\n| Status      | Description                                                                                            |\n|-------------|--------------------------------------------------------------------------------------------------------|\n| NONE        | The customer account has not been credited or a provisional credit has been reversed and not replaced. |\n| PROVISIONAL | A provisional credit has been posted to the customer account.                                          |\n| FINAL       | A final credit has been posted to the customer account.                                                |\n",
        "enum": [
          "FINAL",
          "NONE",
          "PROVISIONAL"
        ],
        "type": "string"
      },
      "dispute_debit_status": {
        "description": "The status of customer account debit related to the dispute\n\n| Status      | Description                                                                                          |\n|-------------|------------------------------------------------------------------------------------------------------|\n| NONE        | The customer account has not been debited or a provisional debit has been reversed and not replaced. |\n| PROVISIONAL | A provisional debit has been posted to the customer account.                                         |\n| FINAL       | A final debit has been posted to the customer account.                                               |\n",
        "enum": [
          "FINAL",
          "NONE",
          "PROVISIONAL"
        ],
        "type": "string"
      },
      "dispute_decision": {
        "description": "Decision | Description\n---------|--------------------------------------------------\nLOST     | Decision reached in favour of the network.\nNONE     | No decision was reached.\nONGOING  | Dispute is ongoing and requires further action.\nRESOLVED | Resolved in favour of the account holder.\nWON      | Decision reached in favour of the account holder.\n",
        "enum": [
          "LOST",
          "NONE",
          "ONGOING",
          "RESOLVED",
          "WON"
        ],
        "type": "string"
      },
      "dispute_document_request": {
        "properties": {
          "file": {
            "description": "The file to be uploaded. Max size 14MB.",
            "format": "binary",
            "type": "string"
          }
        },
        "required": [
          "file"
        ],
        "type": "object"
      },
      "dispute_document_response": {
        "properties": {
          "creation_time": {
            "description": "The timestamp representing when the object was created",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "dispute_id": {
            "description": "The unique identifier of the dispute",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "file_name": {
            "example": "example.pdf",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of a dispute document.",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          }
        },
        "required": [
          "creation_time",
          "dispute_id",
          "file_name",
          "id",
          "tenant"
        ],
        "type": "object"
      },
      "dispute_id": {
        "description": "The unique identifier of the dispute",
        "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
        "format": "uuid",
        "type": "string"
      },
      "dispute_list": {
        "allOf": [
          {
            "$ref": "#/components/schemas/paginated_response"
          },
          {
            "properties": {
              "disputes": {
                "description": "Array of disputes",
                "items": {
                  "$ref": "#/components/schemas/dispute_response"
                },
                "type": "array"
              }
            },
            "required": [
              "disputes"
            ],
            "type": "object"
          }
        ],
        "title": "List of Disputes"
      },
      "dispute_network": {
        "description": "The network with which the transaction was disputed.",
        "enum": [
          "ACH",
          "MARQETA",
          "MASTERCARD",
          "NONE",
          "TABAPAY"
        ],
        "type": "string"
      },
      "dispute_patch_request": {
        "properties": {
          "network_eligibility_override": {
            "description": "Override network eligibility restrictions and forces the dispute to be filed with the network.",
            "type": "boolean"
          },
          "status": {
            "$ref": "#/components/schemas/dispute_status"
          }
        },
        "type": "object"
      },
      "dispute_regulation": {
        "enum": [
          "REGULATION_E",
          "REGULATION_Z"
        ],
        "type": "string"
      },
      "dispute_request": {
        "discriminator": {
          "mapping": {
            "ACH": "#/components/schemas/ach_dispute_request",
            "CARD": "#/components/schemas/card_dispute_request",
            "EXTERNAL_CARD": "#/components/schemas/external_card_dispute_request"
          },
          "propertyName": "payment_rail"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/external_card_dispute_request"
          },
          {
            "$ref": "#/components/schemas/ach_dispute_request"
          },
          {
            "$ref": "#/components/schemas/card_dispute_request"
          }
        ],
        "type": "object"
      },
      "dispute_request_details": {
        "properties": {
          "date_customer_reported": {
            "description": "The timestamp representing when the customer reported the dispute.",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          },
          "disputed_amount": {
            "description": "The amount to be disputed in cents. Disputes cannot exceed the full amount of the posted transaction.",
            "minimum": 1,
            "type": "integer"
          },
          "memo": {
            "description": "Brief written message describing the reason for disputing the transaction.",
            "maxLength": 1000,
            "type": "string"
          },
          "payment_rail": {
            "$ref": "#/components/schemas/payment_rail"
          },
          "transaction_id": {
            "description": "The ID of the posted transaction to be disputed.",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "date_customer_reported",
          "disputed_amount",
          "memo",
          "payment_rail",
          "transaction_id"
        ],
        "type": "object"
      },
      "dispute_response": {
        "discriminator": {
          "mapping": {
            "ACH": "#/components/schemas/ach_dispute_response",
            "CARD": "#/components/schemas/card_dispute_response",
            "EXTERNAL_CARD": "#/components/schemas/external_card_dispute_response"
          },
          "propertyName": "payment_rail"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/card_dispute_response"
          },
          {
            "$ref": "#/components/schemas/ach_dispute_response"
          },
          {
            "$ref": "#/components/schemas/external_card_dispute_response"
          }
        ],
        "type": "object"
      },
      "dispute_response_details": {
        "properties": {
          "account_id": {
            "description": "The customer account related to the dispute, to which dispute-related credits will be posted.",
            "example": "ca4450a5-5d4c-4afc-9533-729e2948c477",
            "format": "uuid",
            "type": "string"
          },
          "applicable_regulation": {
            "$ref": "#/components/schemas/dispute_regulation"
          },
          "creation_time": {
            "description": "The timestamp representing when the dispute was created",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "currency": {
            "description": "ISO 4217 Alpha-3 currency code",
            "example": "USD",
            "maxLength": 3,
            "minLength": 3,
            "type": "string"
          },
          "customer_id": {
            "description": "The customer related to the dispute, to which dispute-related credits will be posted.",
            "example": "52593ea7-4d66-40df-80e9-3b9bc54fa880",
            "format": "uuid",
            "type": "string"
          },
          "date_customer_reported": {
            "description": "The timestamp representing when the customer reported the dispute.",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          },
          "decision": {
            "$ref": "#/components/schemas/dispute_decision"
          },
          "dispute_documents": {
            "description": "Documents associated with the dispute.",
            "items": {
              "$ref": "#/components/schemas/dispute_document_response"
            },
            "type": "array"
          },
          "disputed_amount": {
            "description": "The amount to be disputed in cents.",
            "minimum": 1,
            "type": "integer"
          },
          "external_reference_id": {
            "description": "Reference ID associated with the dispute on the external network.",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the dispute",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "last_action_by": {
            "$ref": "#/components/schemas/dispute_action_by"
          },
          "last_updated_time": {
            "description": "The timestamp representing when the dispute was last modified",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "memo": {
            "description": "Brief written message describing the reason for disputing the transaction.",
            "maxLength": 1000,
            "type": "string"
          },
          "network": {
            "$ref": "#/components/schemas/dispute_network"
          },
          "payment_rail": {
            "$ref": "#/components/schemas/payment_rail"
          },
          "status": {
            "$ref": "#/components/schemas/dispute_status"
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          },
          "timestamp_final_decision": {
            "description": "The time that a final decision was made on the dispute.",
            "format": "date-time",
            "type": "string"
          },
          "timestamp_investigation_due": {
            "format": "date-time",
            "type": "string"
          },
          "timestamp_provisional_credit_due": {
            "description": "The time by which provisional credit should be posted to the customer account in response to the dispute.",
            "format": "date-time",
            "type": "string"
          },
          "transaction_id": {
            "description": "The ID of the posted transaction to be disputed.",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "account_id",
          "creation_time",
          "currency",
          "customer_id",
          "date_customer_reported",
          "decision",
          "dispute_documents",
          "disputed_amount",
          "id",
          "last_updated_time",
          "memo",
          "network",
          "payment_rail",
          "status",
          "tenant",
          "transaction_id"
        ],
        "type": "object"
      },
      "dispute_status": {
        "description": "The current status of the dispute.",
        "enum": [
          "CLOSED",
          "OPEN"
        ],
        "type": "string"
      },
      "document_id": {
        "description": "The unique identifier of the supporting document",
        "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
        "format": "uuid",
        "type": "string"
      },
      "eft_ca_transaction_subtypes": {
        "description": "The set of valid EFT_CA transaction subtypes",
        "enum": [
          "EFT_CA_BULK_OUTGOING_CREDIT",
          "EFT_CA_BULK_OUTGOING_CREDIT_RETURN",
          "EFT_CA_BULK_OUTGOING_CREDIT_RETURN_REVERSAL",
          "EFT_CA_BULK_OUTGOING_CREDIT_REVERSAL",
          "EFT_CA_BULK_OUTGOING_DEBIT",
          "EFT_CA_BULK_OUTGOING_DEBIT_RETURN",
          "EFT_CA_BULK_OUTGOING_DEBIT_RETURN_REVERSAL",
          "EFT_CA_BULK_OUTGOING_DEBIT_REVERSAL",
          "EFT_CA_INCOMING_CREDIT",
          "EFT_CA_INCOMING_CREDIT_RETURN",
          "EFT_CA_INCOMING_CREDIT_RETURN_REVERSAL",
          "EFT_CA_INCOMING_CREDIT_REVERSAL",
          "EFT_CA_INCOMING_DEBIT",
          "EFT_CA_INCOMING_DEBIT_RETURN",
          "EFT_CA_INCOMING_DEBIT_RETURN_REVERSAL",
          "EFT_CA_INCOMING_DEBIT_REVERSAL",
          "EFT_CA_OUTGOING_CREDIT",
          "EFT_CA_OUTGOING_CREDIT_RETURN",
          "EFT_CA_OUTGOING_CREDIT_RETURN_REVERSAL",
          "EFT_CA_OUTGOING_CREDIT_REVERSAL",
          "EFT_CA_OUTGOING_DEBIT",
          "EFT_CA_OUTGOING_DEBIT_RETURN",
          "EFT_CA_OUTGOING_DEBIT_RETURN_REVERSAL",
          "EFT_CA_OUTGOING_DEBIT_REVERSAL"
        ],
        "type": "string"
      },
      "emboss_name": {
        "description": "The customer details to emboss on the card - Defaults to customer first and last name. Is limited to 21 characters. Valid characters are A-Z, a-z, 0-9, space ( ), period (.), comma (,), forward slash (/), hyphen (-), ampersand (&), single quote (').",
        "properties": {
          "line_1": {
            "description": "line 1",
            "example": "Jane Smith",
            "type": "string"
          },
          "line_2": {
            "description": "line 2",
            "example": "Acme Inc.",
            "type": "string"
          }
        },
        "required": [
          "line_1"
        ],
        "type": "object"
      },
      "end_date": {
        "description": "The date when the resource is decommissioned",
        "example": "2010-05-06T12:23:34.321Z",
        "format": "date-time",
        "type": "string"
      },
      "enhanced_raw_details": {
        "properties": {
          "amount": {
            "description": "The monetary amount of the transaction",
            "type": "number"
          },
          "categorized_by": {
            "description": "The method used to detrmine the category",
            "type": "integer"
          },
          "category": {
            "description": "The category of the transaction",
            "type": "string"
          },
          "category_guid": {
            "description": "The unique identifier for the category",
            "type": "string"
          },
          "described_by": {
            "description": "The method used to describe the transaction",
            "type": "integer"
          },
          "description": {
            "description": "A human-readable version of `original_description`",
            "type": "string"
          },
          "extended_transaction_type": {
            "description": "The transaction type assigned by the partner",
            "type": "string"
          },
          "id": {
            "description": "The unique partner-defined identifier for the transaction",
            "type": "integer"
          },
          "is_bill_pay": {
            "description": "Whether the transaction represents a bill payment",
            "type": "boolean"
          },
          "is_direct_deposit": {
            "description": "Whether or not the transaction represents a direct deposit",
            "type": "boolean"
          },
          "is_expense": {
            "description": "Whether or not the transaction represents an expense",
            "type": "boolean"
          },
          "is_fee": {
            "description": "Whether or not the transaction represents a fee",
            "type": "boolean"
          },
          "is_income": {
            "description": "Whether or not the transaction represents income",
            "type": "boolean"
          },
          "is_international": {
            "description": "Whether or not the transaction is international",
            "type": "boolean"
          },
          "is_overdraft_fee": {
            "description": "Whether or not the transaction is an overdraft fee",
            "type": "boolean"
          },
          "is_payroll_advance": {
            "description": "Whether or not the transaction is a payroll advance",
            "type": "boolean"
          },
          "is_subscription": {
            "description": "Whether or not the transaction is a subscription",
            "type": "boolean"
          },
          "memo": {
            "description": "Additional descriptiive information about the transaction",
            "type": "string"
          },
          "merchant_category_code": {
            "description": "The ISO 18245 category code for the transaction",
            "type": "integer"
          },
          "merchant_guid": {
            "description": "The unique identifier for the merchant",
            "type": "string"
          },
          "merchant_location_guid": {
            "description": "The unique identifier for the merchant location",
            "type": "string"
          },
          "original_description": {
            "description": "The original description for the transaction",
            "type": "string"
          },
          "type": {
            "description": "The type of the transsaction. This will be either `CREDIT` or `DEBIT`",
            "type": "string"
          }
        },
        "type": "object"
      },
      "enhanced_transaction_data": {
        "description": "Enriched transaction metadata",
        "properties": {
          "category": {
            "type": "string"
          },
          "enhanced_description": {
            "type": "string"
          },
          "enhanced_raw": {
            "items": {
              "$ref": "#/components/schemas/enhanced_raw_details"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "enhanced_transaction_data1": {
        "description": "Enriched transaction metadata",
        "properties": {
          "category": {
            "type": "string"
          },
          "enhanced_description": {
            "type": "string"
          },
          "enhanced_raw": {
            "items": {
              "properties": {
                "amount": {
                  "description": "The monetary amount of the transaction",
                  "type": "number"
                },
                "categorized_by": {
                  "description": "The method used to detrmine the category",
                  "type": "integer"
                },
                "category": {
                  "description": "The category of the transaction",
                  "type": "string"
                },
                "category_guid": {
                  "description": "The unique identifier for the category",
                  "type": "string"
                },
                "described_by": {
                  "description": "The method used to describe the transaction",
                  "type": "integer"
                },
                "description": {
                  "description": "A human-readable version of `original_description`",
                  "type": "string"
                },
                "extended_transaction_type": {
                  "description": "The transaction type assigned by the partner",
                  "type": "string"
                },
                "id": {
                  "description": "The unique partner-defined identifier for the transaction",
                  "type": "integer"
                },
                "is_bill_pay": {
                  "description": "Whether the transaction represents a bill payment",
                  "type": "boolean"
                },
                "is_direct_deposit": {
                  "description": "Whether or not the transaction represents a direct deposit",
                  "type": "boolean"
                },
                "is_expense": {
                  "description": "Whether or not the transaction represents an expense",
                  "type": "boolean"
                },
                "is_fee": {
                  "description": "Whether or not the transaction represents a fee",
                  "type": "boolean"
                },
                "is_income": {
                  "description": "Whether or not the transaction represents income",
                  "type": "boolean"
                },
                "is_international": {
                  "description": "Whether or not the transaction is international",
                  "type": "boolean"
                },
                "is_overdraft_fee": {
                  "description": "Whether or not the transaction is an overdraft fee",
                  "type": "boolean"
                },
                "is_payroll_advance": {
                  "description": "Whether or not the transaction is a payroll advance",
                  "type": "boolean"
                },
                "is_subscription": {
                  "description": "Whether or not the transaction is a subscription",
                  "type": "boolean"
                },
                "memo": {
                  "description": "Additional descriptiive information about the transaction",
                  "type": "string"
                },
                "merchant_category_code": {
                  "description": "The ISO 18245 category code for the transaction",
                  "type": "integer"
                },
                "merchant_guid": {
                  "description": "The unique identifier for the merchant",
                  "type": "string"
                },
                "merchant_location_guid": {
                  "description": "The unique identifier for the merchant location",
                  "type": "string"
                },
                "original_description": {
                  "description": "The original description for the transaction",
                  "type": "string"
                },
                "type": {
                  "description": "The type of the transsaction. This will be either `CREDIT` or `DEBIT`",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "error": {
        "description": "Synctera error responses in API v1 implement a custom error schema.",
        "properties": {
          "code": {
            "description": "A machine-readable string that identifies the error for programmatic use.\n",
            "example": "BAD_REQUEST_BODY",
            "type": "string"
          },
          "detail": {
            "description": "A human-readable string explaining this particular error.\n",
            "example": "Missing required fields: first_name, dob",
            "type": "string"
          },
          "status": {
            "description": "HTTP status code for this response",
            "example": 400,
            "type": "integer"
          }
        },
        "title": "Synctera error response",
        "type": "object"
      },
      "event": {
        "description": "Webhook event object",
        "properties": {
          "event_resource": {
            "description": "Json string of object associated with the event. For example, if your event is ACCOUNT.CREATED, You can refer to Acccount to parse the account event to obtain the ID, status etc.\n",
            "type": "string"
          },
          "event_resource_changed_fields": {
            "description": "Json string of object associated with the event related to a resource change. This only contains those fields that have value changed on the event, and the field values are prior to the resource change event.\n",
            "type": "string"
          },
          "event_time": {
            "description": "Timestamp of the current event raised",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "Unique event ID of the webhook request. Use event endpoints to get more event summary data",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "metadata": {
            "description": "Metadata that stored in the webhook subscription",
            "type": "object"
          },
          "resource_id": {
            "description": "The ID of the resource this event occurred on, if available.",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "response_history": {
            "description": "Response history of the webhook request",
            "items": {
              "$ref": "#/components/schemas/response_history_item"
            },
            "type": "array"
          },
          "status": {
            "description": "Current event status. Failing event will keep retry until it is purged.",
            "enum": [
              "FAILED",
              "RETRYING",
              "RUNNING",
              "SUCCESS"
            ],
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/event_type_explicit"
          },
          "url": {
            "description": "URL that the current event will be sent to",
            "maxLength": 1024,
            "type": "string"
          },
          "webhook_id": {
            "description": "Webhook the current event belongs to",
            "format": "uuid",
            "type": "string"
          }
        },
        "title": "Webhook event",
        "type": "object"
      },
      "event_list": {
        "allOf": [
          {
            "$ref": "#/components/schemas/paginated_response"
          },
          {
            "properties": {
              "event_list": {
                "description": "Array of events",
                "items": {
                  "$ref": "#/components/schemas/event"
                },
                "type": "array"
              }
            },
            "required": [
              "event_list"
            ],
            "type": "object"
          }
        ]
      },
      "event_trigger": {
        "description": "Webhook event object that will be returned after triggering the given event. Only id, type and event_time will have value.",
        "properties": {
          "event_resource": {
            "deprecated": true,
            "description": "Json string of object associated with the event. For example, if your event is ACCOUNT.CREATED, You can refer to Acccount to parse the account event to obtain the ID, status etc.\n",
            "type": "string"
          },
          "event_resource_changed_fields": {
            "deprecated": true,
            "description": "Json string of object associated with the event related to a resource change. This only contains those fields that have value changed on the event, and the field values are prior to the resource change event.\n",
            "type": "string"
          },
          "event_time": {
            "description": "Timestamp of the current event raised",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "Unique event ID of the webhook request. Use event endpoints to get more event summary data",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "metadata": {
            "deprecated": true,
            "description": "Metadata that stored in the webhook subscription",
            "type": "object"
          },
          "resource_id": {
            "description": "The ID of the resource this event occurred on, if available.",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "response_history": {
            "deprecated": true,
            "description": "Response history of the webhook request",
            "items": {
              "$ref": "#/components/schemas/response_history_item"
            },
            "type": "array"
          },
          "status": {
            "deprecated": true,
            "description": "Current event status. Failing event will keep retry until it is purged.",
            "enum": [
              "FAILED",
              "RETRYING",
              "RUNNING",
              "SUCCESS"
            ],
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/event_type_explicit"
          },
          "url": {
            "deprecated": true,
            "description": "URL that the current event will be sent to",
            "maxLength": 1024,
            "type": "string"
          },
          "webhook_id": {
            "deprecated": true,
            "description": "Webhook the current event belongs to",
            "format": "uuid",
            "type": "string"
          }
        },
        "title": "Webhook event trigger",
        "type": "object"
      },
      "event_type": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/event_type_wildcard"
          },
          {
            "$ref": "#/components/schemas/event_type_explicit"
          }
        ]
      },
      "event_type_explicit": {
        "description": "All the webhook event types",
        "enum": [
          "ADVERSE_ACTION.CREATED",
          "APPLICATION.CREATED",
          "APPLICATION.UPDATED",
          "CARD.CREATED",
          "CARD.DIGITALWALLETTOKEN.CREATED",
          "CARD.DIGITALWALLETTOKEN.UPDATED",
          "CARD.IMAGE.CREATED",
          "CARD.IMAGE.UPDATED",
          "CARD.UPDATED",
          "DISPUTE.CREATED",
          "DISPUTE.UPDATED",
          "EXTERNAL_CARD.CREATED",
          "EXTERNAL_CARD.DELETED",
          "EXTERNAL_CARD.UPDATED",
          "EXTERNAL_CARD_TRANSFER.CREATED",
          "EXTERNAL_CARD_TRANSFER.UPDATED",
          "INTERNAL_TRANSFER.SUCCEEDED",
          "STATEMENT.CREATED",
          "TRANSACTION.CREATED",
          "TRANSACTION.UPDATED"
        ],
        "type": "string"
      },
      "event_type_wildcard": {
        "enum": [
          "ADVERSE_ACTION.*",
          "APPLICATION.*",
          "CARD.*",
          "DISPUTE.*",
          "EXTERNAL_CARD.*",
          "EXTERNAL_CARD_TRANSFER.*",
          "INTERNAL_TRANSFER.*",
          "STATEMENT.*",
          "TRANSACTION.*"
        ],
        "type": "string"
      },
      "exchange_details": {
        "properties": {
          "fees": {
            "description": "The fees associated with the exchange.\n",
            "items": {
              "$ref": "#/components/schemas/exchange_fee_details"
            },
            "type": "array"
          },
          "rate": {
            "description": "The exchange rate from source to target currency. For example: 1.30445\n",
            "example": 1.30445,
            "type": "string"
          },
          "source_amount": {
            "description": "The amount in the source currency's minor unit. For example, 10000 would be $100 for USD. This is the amount inclusive of fees.\n",
            "example": 10000,
            "format": "int64",
            "minimum": 1,
            "type": "integer"
          },
          "source_currency": {
            "description": "The ISO 4217 currency code",
            "example": "USD",
            "type": "string"
          },
          "target_amount": {
            "description": "The amount in the target currency's minor unit. For example, 13045 would be £130.45 for GBP. This is the amount inclusive of fees.\n",
            "example": 10000,
            "format": "int64",
            "minimum": 1,
            "type": "integer"
          },
          "target_currency": {
            "description": "The ISO 4217 currency code",
            "example": "GBP",
            "type": "string"
          }
        },
        "required": [
          "rate",
          "source_amount",
          "source_currency",
          "target_amount",
          "target_currency"
        ],
        "type": "object"
      },
      "exchange_fee_details": {
        "properties": {
          "amount": {
            "description": "The amount in the source currency's minor unit. For example, 10000 would be $100 for USD.  One of the amount or percentage is required.\n",
            "format": "int64",
            "minimum": 1,
            "type": "integer"
          },
          "currency": {
            "description": "The ISO 4217 currency code of the fee. The currency must match either the source or target currency of the exchange details. If the fee is a percentage of the source amount, the currency must match the source currency. If the fee is a percentage of the target amount, the currency must match the target currency.\n",
            "type": "string"
          },
          "description": {
            "description": "The description of the fee.",
            "type": "string"
          },
          "fee_type": {
            "$ref": "#/components/schemas/exchange_fee_details_fee_type"
          },
          "percentage": {
            "description": "The percentage of the amount that is the fee. For example, \"0.05403\" would be 5.403%.  One of the amount or percentage is required.\n",
            "type": "string"
          }
        },
        "required": [
          "currency",
          "fee_type"
        ]
      },
      "exchange_fee_details_fee_type": {
        "description": "The type of fee. For example, \"FX\" would be a foreign exchange fee.\n",
        "enum": [
          "FX",
          "OTHER",
          "SERVICE"
        ],
        "type": "string"
      },
      "expedited_fulfillment": {
        "deprecated": true,
        "description": "Is the shipment expedited",
        "type": "boolean"
      },
      "external_card_action": {
        "enum": [
          "CHARGEBACK",
          "PROVISIONAL_DEBIT",
          "REPRESENTMENT"
        ],
        "type": "string"
      },
      "external_card_action_state": {
        "enum": [
          "ACCEPT",
          "CREATE",
          "DECLINE",
          "REVERSE"
        ],
        "type": "string"
      },
      "external_card_details": {
        "allOf": [
          {
            "$ref": "#/components/schemas/external_card_verification_details"
          },
          {
            "properties": {
              "bin": {
                "description": "Bank Identification Number",
                "type": "string"
              },
              "issuer": {
                "description": "Name of the issuing financial institution",
                "type": "string"
              },
              "last_four": {
                "description": "The last four digits of the card PAN",
                "example": "1234",
                "type": "string"
              },
              "payment_account_reference": {
                "$ref": "#/components/schemas/payment_account_reference"
              }
            },
            "type": "object"
          }
        ]
      },
      "external_card_dispute_action": {
        "description": "Create an action against a disputed external card transaction",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/external_card_action"
          },
          "payment_rail": {
            "$ref": "#/components/schemas/payment_rail"
          },
          "state": {
            "$ref": "#/components/schemas/external_card_action_state"
          },
          "supporting_doc_id": {
            "description": "The unique identifier of the supporting document\n* Required for `REPRESENTMENT.CREATE`\n",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "action",
          "payment_rail",
          "state"
        ],
        "type": "object"
      },
      "external_card_dispute_action_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/external_card_action"
          },
          "creation_time": {
            "description": "The timestamp representing when the object was created",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the dispute action",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "payment_rail": {
            "$ref": "#/components/schemas/payment_rail"
          },
          "status": {
            "$ref": "#/components/schemas/external_card_dispute_action_status"
          },
          "supporting_doc_id": {
            "description": "The unique identifier of the supporting document",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          }
        },
        "required": [
          "action",
          "creation_time",
          "id",
          "payment_rail",
          "status",
          "tenant"
        ],
        "type": "object"
      },
      "external_card_dispute_action_status": {
        "enum": [
          "ACCEPTED",
          "DECLINED",
          "REVERSED",
          "SUBMITTED"
        ],
        "type": "string"
      },
      "external_card_dispute_reason_code": {
        "description": "### Mastercard\nReason Code | Description\n--- | ---\nWARNING_BULLETIN | Transaction was processed using a card listed in a Mastercard warning bulletin file\nAUTHORIZATION_RELATED_CHARGEBACK | Transaction was processed without obtaining proper authorization\nACCOUNT_NUMBER_NOT_ON_FILE | Account number used in transaction not regonized by cardholder’s bank\nTRANSACTION_AMOUNT_DIFFERS | Final transaction amount charged differs from expected or agreed upon amount\nPOINT_OF_INTERACTION_ERROR | Processing errors such as ATM withdrawal discrepancies, duplicate transactions, late presentments, and amount discrepancies\nNO_CARDHOLDER_AUTHORIZATION | Fraudulent transaction made without the cardholder’s consent\nCANCELED_RECURRING_TRANSACTION | Cardholder billed for a recurring service afer cancellation or digital goods not authorized or received\nLATE_PRESENTMENT | Merchant submitted transaction for processing too late after original transaction date\nCORRECT_CURRENCY_CODE_NOT_PROVIDED | Currency conversion not properly presented or agreed upon\nQUESTIONABLE_MERCHANT_ACTIVITY | Merchant suspected of being involved in fraudulent activities or violating Mastercard rules\nCARDHOLDER_DISPUTE | Claims for goods and services not received, counterfeit products, recurring transactions, incomplete transactions, hotel no-show charges, and more\nCARDHOLDER_DISPUTE_NOT_ELSEWHERE_CLASSIFIED | Cardholder dissatisfied with transaction and has been unable to resolve it direclty with merchant (US region only)\nGOODS_OR_SERVICES_NOT_PROVIDED | Cardholder claims purchased goods or services were not delivered, delivered late, only partially delivered, or merchant failed to provide the agreed-upon service\nNO_SHOW_ADDENDUM_ATM_DISPUTE | Cardholder charged a penalty for failing to cancel a reservation (e.g. hotel booking), charged an addendum or modification to a service, or did not receive the correct amount of cash from an ATM\nCREDIT_NOT_PROCESSED | Expected credit or refund not received\nPOTENTIAL_FRAUD | Cardholder does not recognize the transaction and suspects it might be fraudulent\nCHIP_LIABILITY_SHIFT | Counterfeit card used at a non-EMV-compliant terminal, and merchant is held liable for the fraudulent transaction\nCHIP_PIN_LIABILITY_SHIFT | Lost or stolen chip card used without PIN verification at a terminal that supports PIN, resulting in merchant liability for the fraudulent transaction\nDOMESTIC_CHARGEBACK_DISPUTE | Catch-all for transaction disputes within the Europe region\n\n### Visa\nReason Code | Description\n--- | ---\nEMV_LIABILITY_SHIFT_COUNTERFEIT_FRAUD | Transaction was processed with a counterfeit EMV card at a non-EMV-compliant terminal and the cardholder claims it was unauthorized\nEMV_LIABILITY_SHIFT_NON_COUNTERFEIT_FRAUD | Cardholder claims their lost or stolen card was used for an unauthorized transaction at a non-EMV-compliant terminal\nFRAUD_CARD_PRESENT | Cardholder disputes a card-present transaction as fraudulent, but does not involve a counterfeit or lost/stolen card\nFRAUD_CARD_ABSENT | Cardholder disputes a card-not-present (e.g., online or phone) transaction as unauthorized or fraudulent\nVISA_FRAUD_MONITORING_PROGRAM | Transaction flagged as part of the Visa Fraud Monitoring Program due to excessive fraud activity\nCARD_RECOVERY_BULLETIN | Transaction processed despite the card being listed in the Card Recovery Bulletin (a list of compromised cards)\nDECLINED_AUTHORIZATION | Transaction processed after receiving a declined authorization response from the issuer\nNO_AUTHORIZATION | Transaction processed without obtaining proper authorization from the issuer\nLATE_PRESENTMENT | Merchant submitted transaction for processing too late after original transaciton date\nINCORRECT_TRANSACTION_CODE | Transaction processed with the wrong transaction code (e.g., refund processed as a sale)\nINCORRECT_CURRENCY | Transaction processed in the incorrect currency\nINCORRECT_ACCOUNT_NUMBER | Transaction processed using an incorrect or invalid account number\nINCORRECT_AMOUNT | Transaction processed for an incorrect amount\nDUPLICATE_PROCESSING | Transaction processed more than once\nPAID_BY_OTHER_MEANS | Cardholder paid for the same transaction by other means (e.g., cash, check)\nINVALID_DATA | Transaction contained invalid or incomplete data required for processing\nSERVICES_NOT_RECEIVED | Cardholder claims the merchandise or services were not received as agreed\nCANCELED_RECURRING_TRANSACTION | Cardholder charged for a recurring transaction after canceling the service or subscription\nNOT_AS_DESCRIBED | Merchandise or services received were not as described or were defective\nCOUNTERFEIT_MERCHANDISE | Cardholder claims merchandise received was counterfeit\nMISREPRESENTATION | Cardholder claims merchant misrepresented the terms or details of the transaction\nCREDIT_NOT_PROCESSED | Expected credit or refund not received\nCANCELED_SERVICE | Cardholder charged for merchandise or services that were canceled\nOCT_NOT_ACCEPTED | Original credit transaction not accepted or processed by the cardholder’s bank\nNON_RECEIPT_OF_CASH | Cardholder did not receive cash or the value from a load transaction at an ATM or similar device\n",
        "enum": [
          "ACCOUNT_NUMBER_NOT_ON_FILE",
          "AUTHORIZATION_RELATED_CHARGEBACK",
          "CANCELED_RECURRING_TRANSACTION",
          "CANCELED_SERVICE",
          "CARDHOLDER_DISPUTE",
          "CARDHOLDER_DISPUTE_NOT_ELSEWHERE_CLASSIFIED",
          "CARD_RECOVERY_BULLETIN",
          "CHIP_LIABILITY_SHIFT",
          "CHIP_PIN_LIABILITY_SHIFT",
          "CORRECT_CURRENCY_CODE_NOT_PROVIDED",
          "COUNTERFEIT_MERCHANDISE",
          "CREDIT_NOT_PROCESSED",
          "DECLINED_AUTHORIZATION",
          "DOMESTIC_CHARGEBACK_DISPUTE",
          "DUPLICATE_PROCESSING",
          "EMV_LIABILITY_SHIFT_COUNTERFEIT_FRAUD",
          "EMV_LIABILITY_SHIFT_NON_COUNTERFEIT_FRAUD",
          "FRAUD_CARD_ABSENT",
          "FRAUD_CARD_PRESENT",
          "GOODS_OR_SERVICES_NOT_PROVIDED",
          "INCORRECT_ACCOUNT_NUMBER",
          "INCORRECT_AMOUNT",
          "INCORRECT_CURRENCY",
          "INCORRECT_TRANSACTION_CODE",
          "INVALID_DATA",
          "LATE_PRESENTMENT",
          "MISREPRESENTATION",
          "NON_RECEIPT_OF_CASH",
          "NOT_AS_DESCRIBED",
          "NO_AUTHORIZATION",
          "NO_CARDHOLDER_AUTHORIZATION",
          "NO_SHOW_ADDENDUM_ATM_DISPUTE",
          "OCT_NOT_ACCEPTED",
          "PAID_BY_OTHER_MEANS",
          "POINT_OF_INTERACTION_ERROR",
          "POTENTIAL_FRAUD",
          "QUESTIONABLE_MERCHANT_ACTIVITY",
          "SERVICES_NOT_RECEIVED",
          "TRANSACTION_AMOUNT_DIFFERS",
          "VISA_FRAUD_MONITORING_PROGRAM",
          "WARNING_BULLETIN"
        ],
        "type": "string"
      },
      "external_card_dispute_request": {
        "allOf": [
          {
            "properties": {
              "external_reference_id": {
                "description": "Reference ID associated with the dispute on the external network.",
                "type": "string"
              },
              "reason_code": {
                "$ref": "#/components/schemas/external_card_dispute_reason_code"
              }
            },
            "required": [
              "external_reference_id",
              "reason_code"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/dispute_request_details"
          }
        ]
      },
      "external_card_dispute_response": {
        "allOf": [
          {
            "properties": {
              "action_history": {
                "description": "History of all actions taken on the dispute",
                "items": {
                  "$ref": "#/components/schemas/external_card_dispute_action_response"
                },
                "type": "array"
              },
              "available_actions": {
                "description": "List of actions that can be taken on the dispute",
                "items": {
                  "$ref": "#/components/schemas/available_external_card_action"
                },
                "type": "array"
              },
              "debit_status": {
                "$ref": "#/components/schemas/dispute_debit_status"
              },
              "lifecycle_state": {
                "$ref": "#/components/schemas/external_card_lifecycle_state"
              },
              "managed_by": {
                "$ref": "#/components/schemas/card_dispute_managed_by"
              },
              "network_eligibility": {
                "$ref": "#/components/schemas/external_card_network_eligibility"
              },
              "reason_code": {
                "$ref": "#/components/schemas/external_card_dispute_reason_code"
              }
            },
            "required": [
              "action_history",
              "available_actions",
              "debit_status",
              "lifecycle_state",
              "managed_by",
              "network_eligibility",
              "reason_code"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/dispute_response_details"
          }
        ]
      },
      "external_card_id": {
        "description": "The ID of the External Card associated with the operation",
        "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
        "format": "uuid",
        "type": "string"
      },
      "external_card_lifecycle_state": {
        "description": "Lifecycle | Description\n--- | ---\nPENDING_ACTION | A dispute has been created and is pending subsequent action.\nCHARGEBACK | A chargeback has been created with the card network. The acquiring bank now has the opportunity to file for re-presentment. If no re-presentment is filed the acquirer assumes financial responsibility and the case is won.\nREPRESENTMENT | The acquiring bank has created a re-presentment with the card network. The issuing bank now has the opportunity to accept or deline the re-presentment.\n",
        "enum": [
          "CHARGEBACK",
          "PENDING_ACTION",
          "REPRESENTMENT"
        ],
        "type": "string"
      },
      "external_card_list_response": {
        "allOf": [
          {
            "properties": {
              "external_cards": {
                "description": "Array of External Cards",
                "items": {
                  "$ref": "#/components/schemas/external_card_response"
                },
                "type": "array"
              }
            },
            "required": [
              "external_cards"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "external_card_network_eligibility": {
        "description": "Network eligibility restrictions.",
        "properties": {
          "is_digital_wallet_token": {
            "description": "Transaction was processed using a digital wallet token.",
            "type": "boolean"
          },
          "is_three_ds": {
            "description": "Transaction was authenticated with 3DS.",
            "type": "boolean"
          }
        },
        "required": [
          "is_digital_wallet_token",
          "is_three_ds"
        ],
        "type": "object"
      },
      "external_card_product_type": {
        "description": "Product type",
        "enum": [
          "CREDIT",
          "DEBIT",
          "PREPAID"
        ],
        "type": "string"
      },
      "external_card_request": {
        "properties": {
          "business_id": {
            "$ref": "#/components/schemas/business_id1"
          },
          "customer_id": {
            "$ref": "#/components/schemas/customer_id1"
          },
          "name": {
            "$ref": "#/components/schemas/cardholder_name"
          },
          "token": {
            "description": "The token that was returned via tokenization iframe",
            "type": "string"
          }
        },
        "required": [
          "customer_id",
          "name",
          "token"
        ],
        "type": "object"
      },
      "external_card_response": {
        "properties": {
          "bin": {
            "description": "Bank Identification Number",
            "type": "string"
          },
          "creation_time": {
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          },
          "currency": {
            "$ref": "#/components/schemas/currency_code"
          },
          "customer_id": {
            "$ref": "#/components/schemas/customer_id1"
          },
          "expiration_month": {
            "description": "Card expiration month",
            "example": "06",
            "type": "string"
          },
          "expiration_year": {
            "description": "Card expiration year",
            "example": "25",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier",
            "type": "string"
          },
          "issuer": {
            "description": "Name of the issuing financial institution",
            "type": "string"
          },
          "last_four": {
            "description": "The last four digits of the card PAN",
            "example": "1234",
            "type": "string"
          },
          "last_updated_time": {
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/cardholder_name"
          },
          "payment_account_reference": {
            "$ref": "#/components/schemas/payment_account_reference"
          },
          "status": {
            "$ref": "#/components/schemas/external_card_status"
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          },
          "verifications": {
            "$ref": "#/components/schemas/external_card_verifications"
          }
        },
        "required": [
          "currency",
          "customer_id",
          "expiration_month",
          "expiration_year",
          "id",
          "last_four",
          "name",
          "status",
          "tenant"
        ],
        "type": "object"
      },
      "external_card_status": {
        "description": "Status of an External Card",
        "enum": [
          "ACTIVE",
          "SUSPENDED"
        ],
        "type": "string"
      },
      "external_card_transaction": {
        "allOf": [
          {
            "properties": {
              "external_card_transaction": {
                "$ref": "#/components/schemas/card_transaction_data"
              },
              "subtype": {
                "$ref": "#/components/schemas/external_card_transaction_subtypes"
              }
            },
            "required": [
              "external_card_transaction",
              "subtype"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/base_transaction"
          }
        ]
      },
      "external_card_transaction_subtypes": {
        "description": "The set of valid EXTERNAL_CARD transaction subtypes",
        "enum": [
          "CARD_FUNDING",
          "CARD_FUNDING_REVERSAL",
          "CARD_SEND",
          "CARD_SEND_REVERSAL",
          "CHARGEBACK_DEBIT",
          "CHARGEBACK_DEBIT_REVERSAL"
        ],
        "type": "string"
      },
      "external_card_update_request": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/external_card_status"
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "external_card_verification_details": {
        "properties": {
          "address_verification_result": {
            "description": "Address verification results\n\nStatus | Description\n--- | ---\nVERIFIED | AVS verified\nNOT_VERIFIED | AVS not verified\nADDRESS_MISMATCH | ZIP code match, address no match\nZIP_MISMATCH | Address match, ZIP code no match\nADDRESS_AND_ZIP_MISMATCH | Address and ZIP code no match\n",
            "enum": [
              "ADDRESS_AND_ZIP_MISMATCH",
              "ADDRESS_MISMATCH",
              "NOT_VERIFIED",
              "VERIFIED",
              "ZIP_MISMATCH"
            ],
            "type": "string"
          },
          "cvv2_result": {
            "description": "Card Verification Value results\n\nStatus | Description\n--- | ---\nVERIFIED | CVV and expiration date verified\nNOT_VERIFIED | CVV and expiration date not verified\nCVV_MISMATCH | Either CVV or expiration date does not match\nNOT_SUPPORTED | Issuer does not participate in CVV2 service\n",
            "enum": [
              "CVV_MISMATCH",
              "NOT_SUPPORTED",
              "NOT_VERIFIED",
              "VERIFIED"
            ],
            "type": "string"
          },
          "name_verification_result": {
            "description": "Issuer cardholder name verification result with Account Name Inquiry (ANI) service\nThe result of verifying the cardholder name against the name on file at the issuing institution.\nIf this fails, it means the issuing institution has a different person's name on file as the cardholder.\n\nStatus | Description\n--- | ---\nVERIFIED | ANI Name verified\nNOT_VERIFIED | ANI Name not verified\nNOT_SUPPORTED | Issuer does not participate in ANI service\nNAME_MISMATCH | ANI Name does not match\n",
            "enum": [
              "NAME_MISMATCH",
              "NOT_SUPPORTED",
              "NOT_VERIFIED",
              "VERIFIED"
            ],
            "type": "string"
          },
          "pull_details": {
            "$ref": "#/components/schemas/pull_details"
          },
          "pull_enabled": {
            "description": "Indicates if the card is able to perform PULL transfers.",
            "type": "boolean"
          },
          "push_details": {
            "$ref": "#/components/schemas/push_details"
          },
          "push_enabled": {
            "description": "Indicates if the card is able to perform PUSH transfers.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "external_card_verifications": {
        "allOf": [
          {
            "properties": {
              "state": {
                "enum": [
                  "FAILED",
                  "SUCCEEDED"
                ],
                "type": "string"
              }
            },
            "required": [
              "state"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/external_card_verification_details"
          }
        ],
        "description": "Verify card passed AVS and CVV checks and if it able to perform PUSH/PULL transfers.",
        "required": [
          "address_verification_result",
          "cvv2_result",
          "name_verification_result",
          "pull_enabled",
          "push_enabled"
        ],
        "type": "object"
      },
      "external_cards_funds_availability": {
        "description": "Estimated timeframe of funds availability\n\nValue | Description\n--- | ---\nNOW | Within 30 minutes\nNEXT | Within the next business day\nFEW | Within a few business days\n",
        "enum": [
          "FEW",
          "NEXT",
          "NOW"
        ],
        "type": "string"
      },
      "fdx_auth_code": {
        "description": "authorization code returned to Plaid after user completes auth steps\n",
        "title": "code",
        "type": "string"
      },
      "fdx_auth_grant_post": {
        "properties": {
          "auth_request_id": {
            "$ref": "#/components/schemas/fdx_auth_request_id"
          },
          "business_id": {
            "$ref": "#/components/schemas/fdx_business_id"
          },
          "customer_id": {
            "$ref": "#/components/schemas/fdx_customer_id"
          },
          "status": {
            "$ref": "#/components/schemas/fdx_auth_grant_status"
          }
        },
        "required": [
          "auth_request_id",
          "status"
        ],
        "title": "FDX authorization grant object",
        "type": "object"
      },
      "fdx_auth_grant_response": {
        "properties": {
          "redirect_uri": {
            "$ref": "#/components/schemas/fdx_auth_request_redirect_uri"
          }
        },
        "required": [
          "redirect_uri"
        ],
        "title": "FDX authorization grant response object",
        "type": "object"
      },
      "fdx_auth_grant_status": {
        "description": "Whether the end customer was authenticated by the Fintech and authorized Plaid access to their data, or whether there was an error in the authentication.\n",
        "enum": [
          "DENIED",
          "ERROR",
          "GRANTED"
        ],
        "title": "FDX authorization request grant status",
        "type": "string"
      },
      "fdx_auth_request_id": {
        "description": "The ID of the FDX authorization request.\n",
        "format": "uuid",
        "title": "FDX authorization request ID",
        "type": "string"
      },
      "fdx_auth_request_list": {
        "allOf": [
          {
            "properties": {
              "fdx_auth_requests": {
                "description": "Array of FDX authorization requests",
                "items": {
                  "$ref": "#/components/schemas/fdx_auth_request_response"
                },
                "type": "array"
              }
            },
            "required": [
              "fdx_auth_requests"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ],
        "title": "FDX authorization request list response"
      },
      "fdx_auth_request_oauth2_state": {
        "description": "OAuth2 state, an opaque string to be returned to Plaid\n",
        "format": "uuid",
        "title": "FDX OAuth2 state",
        "type": "string"
      },
      "fdx_auth_request_redirect_uri": {
        "description": "URI to redirect to after successful authorization.\n",
        "title": "FDX OAuth2 state",
        "type": "string"
      },
      "fdx_auth_request_response": {
        "properties": {
          "business_id": {
            "$ref": "#/components/schemas/fdx_business_id"
          },
          "code": {
            "$ref": "#/components/schemas/fdx_auth_code"
          },
          "creation_time": {
            "description": "The date and time the authorization request was created.",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "customer_id": {
            "$ref": "#/components/schemas/fdx_customer_id"
          },
          "expiry_time": {
            "description": "The date and time the authorization request will expire.",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/fdx_auth_request_id"
          },
          "last_updated_time": {
            "description": "The date and time the authorization request was last udpated.",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "oauth2_state": {
            "$ref": "#/components/schemas/fdx_auth_request_oauth2_state"
          },
          "redirect_uri": {
            "$ref": "#/components/schemas/fdx_auth_request_redirect_uri"
          },
          "status": {
            "$ref": "#/components/schemas/fdx_auth_request_status"
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          }
        },
        "required": [
          "id",
          "status"
        ],
        "title": "FDX authorization request response object",
        "type": "object"
      },
      "fdx_auth_request_status": {
        "description": "The status of the authorization request.\nThe initial value is PENDING.\nThis can be changed to GRANTED or DENIED using the /fdx_auth_requests/authorize endpoint.\nThe status automatically changes to USED when the authorization code is used to create an access token.\nNote that an auth request in any of these states may have expired.\n",
        "enum": [
          "DENIED",
          "GRANTED",
          "PENDING",
          "USED"
        ],
        "title": "FDX authorization request status",
        "type": "string"
      },
      "fdx_business_id": {
        "description": "The UUID of the business associated with the FDX token. One of customer_id or business_id must be provided.\n",
        "title": "FDX business ID",
        "type": "string"
      },
      "fdx_customer_id": {
        "description": "The UUID of the customer associated with the FDX token. One of customer_id or business_id must be provided.\n",
        "title": "FDX customer ID",
        "type": "string"
      },
      "fdx_parent_token_id": {
        "description": "If the token was created via refresh, this is the ID of the refreshing token.\n",
        "title": "FDX parent token ID",
        "type": "string"
      },
      "fdx_token_hash": {
        "description": "The non-secret hash of the FDX token.\n",
        "title": "FDX token hash",
        "type": "string"
      },
      "fdx_token_list": {
        "allOf": [
          {
            "properties": {
              "fdx_tokens": {
                "description": "Array of FDX tokens",
                "items": {
                  "$ref": "#/components/schemas/fdx_token_response"
                },
                "type": "array"
              }
            },
            "required": [
              "fdx_tokens"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ],
        "title": "FDX token list response"
      },
      "fdx_token_response": {
        "properties": {
          "business_id": {
            "$ref": "#/components/schemas/fdx_business_id"
          },
          "creation_time": {
            "description": "The date and time the token was created.",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "customer_id": {
            "$ref": "#/components/schemas/fdx_customer_id"
          },
          "id": {
            "description": "FDX token ID",
            "format": "uuid",
            "type": "string"
          },
          "last_updated_time": {
            "description": "The date and time the token was last updated.",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "parent_token_id": {
            "$ref": "#/components/schemas/fdx_parent_token_id"
          },
          "status": {
            "$ref": "#/components/schemas/fdx_token_status"
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          },
          "token_expiry_time": {
            "description": "The date and time the token expires.",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "token_hash": {
            "$ref": "#/components/schemas/fdx_token_hash"
          },
          "token_type": {
            "$ref": "#/components/schemas/fdx_token_type"
          }
        },
        "required": [
          "creation_time",
          "id",
          "last_updated_time",
          "status",
          "tenant",
          "token_expiry_time",
          "token_hash",
          "token_type"
        ],
        "title": "FDX token response object",
        "type": "object"
      },
      "fdx_token_status": {
        "description": "The status of the FDX token.\nWhen ENABLED, check token_expiry_time to determine if it has expired.\nRefresh tokens automatically transition to USED when they are used to create a new token, and cannot be used again.\n",
        "enum": [
          "ENABLED",
          "REVOKED",
          "USED"
        ],
        "title": "FDX token status",
        "type": "string"
      },
      "fdx_token_type": {
        "description": "The type of the FDX token.\n",
        "enum": [
          "ACCESS",
          "REFRESH"
        ],
        "title": "FDX token type",
        "type": "string"
      },
      "fednow_transaction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/base_transaction"
          },
          {
            "properties": {
              "fee_transaction": {
                "$ref": "#/components/schemas/fednow_transaction_data"
              },
              "subtype": {
                "$ref": "#/components/schemas/fednow_transaction_subtypes"
              }
            },
            "required": [
              "fednow_transaction",
              "subtype"
            ],
            "type": "object"
          }
        ]
      },
      "fednow_transaction_data": {
        "description": "Transaction metadata specific to transactions with type `FEDNOW`",
        "properties": {
          "additional_transaction_information": {
            "description": "Additional information about the transaction payment - in free text form",
            "items": {
              "maxLength": 140,
              "minLength": 1,
              "type": "string"
            },
            "maxItems": 3,
            "type": "array"
          },
          "customer_id": {
            "description": "Unambiguous identification of the customer which owns the originator account",
            "type": "string"
          },
          "id": {
            "description": "The FedNow payment uuid",
            "type": "string"
          },
          "originating_account_id": {
            "description": "Unambiguous identification of the account of the originator of the transaction",
            "type": "string"
          },
          "receiving_account_id": {
            "description": "Unambiguous identification of the account of the receiver of the payment transaction",
            "type": "string"
          }
        },
        "type": "object"
      },
      "fednow_transaction_subtypes": {
        "description": "The set of valid FEDNOW transaction subtypes",
        "enum": [
          "FEDNOW_INCOMING",
          "FEDNOW_OUTGOING"
        ],
        "type": "string"
      },
      "fee_base": {
        "properties": {
          "account_id": {
            "description": "The ID of the business or customer account being charged the fee.",
            "example": "12943c51-e4ff-4e57-9558-08cab6b96364",
            "format": "uuid",
            "type": "string"
          },
          "amount": {
            "description": "The amount of the fee in ISO 4217 minor currency units, e.g. cents.\nThe internal account referenced by the fee template will be debited this amount.\nDefaults to the value in the fee template.\n",
            "example": 1000,
            "type": "integer"
          },
          "metadata": {
            "$ref": "#/components/schemas/metadata"
          },
          "note": {
            "description": "An optional note for this instance of the fee.",
            "example": "Reduced account fee based on phone call with customer",
            "type": "string"
          },
          "reference_id": {
            "description": "An optional reference ID that uniquely identifies this fee instance. This ID will be included in the posted fee transaction.",
            "example": "1234567890",
            "type": "string"
          },
          "template_id": {
            "description": "The ID of the fee template to use to create the fee.\nValues from the fee template will be used as defaults for the fee.\nNote that the fee template may have been updated since the fee was created and\nthat such subsequent updates to the fee template do not affect existing fees.\n",
            "example": "64943c51-e4ff-4e57-9558-08cab6b96352",
            "format": "uuid",
            "type": "string"
          }
        },
        "title": "Common properties for fee schemas",
        "type": "object"
      },
      "fee_list": {
        "allOf": [
          {
            "$ref": "#/components/schemas/paginated_response"
          },
          {
            "properties": {
              "fees": {
                "description": "Array of fees",
                "items": {
                  "$ref": "#/components/schemas/fee_response"
                },
                "type": "array"
              }
            },
            "required": [
              "fees"
            ],
            "type": "object"
          }
        ],
        "title": "List of fees"
      },
      "fee_post": {
        "allOf": [
          {
            "$ref": "#/components/schemas/fee_base"
          },
          {}
        ],
        "required": [
          "account_id",
          "template_id"
        ],
        "title": "Fee creation object",
        "type": "object"
      },
      "fee_response": {
        "allOf": [
          {
            "$ref": "#/components/schemas/fee_base"
          },
          {
            "properties": {
              "creation_time": {
                "description": "The timestamp representing when the fee was created",
                "example": "2010-05-06T12:23:34.321Z",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "currency": {
                "description": "currency of the fee, as a three character ISO 4217 alphabetic currency code.",
                "example": "USD",
                "type": "string"
              },
              "description": {
                "description": "The description of the fee template.",
                "example": "Premium Customer ATM Fee",
                "type": "string"
              },
              "id": {
                "description": "The ID of the fee.",
                "example": "44943c51-e4ff-4e57-9558-08cab6b96321",
                "format": "uuid",
                "type": "string"
              },
              "internal_account_id": {
                "description": "The ID of internal_account that is the destination of the fee transfer.",
                "example": "42943c51-e4ff-4e57-9558-08cab6b963c8",
                "format": "uuid",
                "type": "string"
              },
              "last_updated_time": {
                "description": "The timestamp representing when the fee was last updated",
                "example": "2010-05-06T12:23:34.321Z",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "subtype": {
                "$ref": "#/components/schemas/fee_subtype"
              },
              "tenant": {
                "$ref": "#/components/schemas/tenant_id"
              },
              "transaction_id": {
                "description": "The ID the resulting transaction resource.",
                "example": "11943c51-e4ff-4e57-9558-08cab6b96333",
                "format": "uuid",
                "type": "string"
              }
            }
          }
        ],
        "required": [
          "account_id",
          "amount",
          "creation_time",
          "currency",
          "description",
          "id",
          "internal_account_id",
          "last_updated_time",
          "subtype",
          "template_id",
          "tenant",
          "transaction_id"
        ],
        "title": "Fee response object",
        "type": "object"
      },
      "fee_reverse_post": {
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/metadata"
          },
          "note": {
            "description": "A note for the fee reversal.",
            "example": "Charge was made in error",
            "type": "string"
          }
        },
        "required": [
          "note"
        ],
        "title": "Fee reversal properties",
        "type": "object"
      },
      "fee_subtype": {
        "description": "A short string representing the sub-type of the fee.\nThis will be used as the subtype of the resulting transaction.\n",
        "enum": [
          "ACCOUNT_FUNDING_AFT",
          "ACCOUNT_FUNDING_AFT_REVERSAL",
          "ACH_INCOMING_TRANSFER",
          "ACH_INCOMING_TRANSFER_REVERSAL",
          "ACH_OUTGOING_TRANSFER",
          "ACH_OUTGOING_TRANSFER_REVERSAL",
          "APPLICATION",
          "APPLICATION_REVERSAL",
          "ATM_BALANCE_INQUIRY",
          "ATM_BALANCE_INQUIRY_REVERSAL",
          "ATM_WITHDRAWAL",
          "ATM_WITHDRAWAL_REVERSAL",
          "BALANCE_TRANSFER",
          "BALANCE_TRANSFER_REVERSAL",
          "BILL_PAY",
          "BILL_PAY_REVERSAL",
          "CARD_DELIVERY",
          "CARD_DELIVERY_REVERSAL",
          "CARD_REPLACEMENT",
          "CARD_REPLACEMENT_REVERSAL",
          "CASH_ADVANCE",
          "CASH_ADVANCE_REVERSAL",
          "CASH_DEPOSIT",
          "CASH_DEPOSIT_REVERSAL",
          "CHECK_ISSUANCE",
          "CHECK_ISSUANCE_REVERSAL",
          "CROSS_BORDER_TRANSACTION",
          "CROSS_BORDER_TRANSACTION_REVERSAL",
          "EFT_TRANSFER",
          "EFT_TRANSFER_REVERSAL",
          "FOREIGN_ATM",
          "FOREIGN_ATM_REVERSAL",
          "FOREIGN_TRANSACTION",
          "FOREIGN_TRANSACTION_REVERSAL",
          "INACTIVITY",
          "INACTIVITY_REVERSAL",
          "LATE_PAYMENT",
          "LATE_PAYMENT_REVERSAL",
          "MAINTENANCE",
          "MAINTENANCE_REVERSAL",
          "MISCELLANEOUS",
          "MISCELLANEOUS_REVERSAL",
          "ORIGINATION",
          "ORIGINATION_REVERSAL",
          "OVERDRAFT",
          "OVERDRAFT_REVERSAL",
          "OVER_THE_LIMIT",
          "OVER_THE_LIMIT_REVERSAL",
          "RETURNED_ITEM",
          "RETURNED_ITEM_REVERSAL",
          "RETURNED_PAYMENT",
          "RETURNED_PAYMENT_REVERSAL",
          "STOP_PAYMENT",
          "STOP_PAYMENT_REVERSAL",
          "SUBSCRIPTION",
          "SUBSCRIPTION_REVERSAL",
          "WIRE_TRANSFER",
          "WIRE_TRANSFER_REVERSAL"
        ],
        "type": "string"
      },
      "fee_subtype_post": {
        "description": "A short string representing the sub-type of the fee.\nThis will be used as the subtype of the resulting transaction.\n",
        "enum": [
          "ACH_INCOMING_TRANSFER",
          "ACH_OUTGOING_TRANSFER",
          "APPLICATION",
          "ATM_BALANCE_INQUIRY",
          "ATM_WITHDRAWAL",
          "BALANCE_TRANSFER",
          "BILL_PAY",
          "CARD_DELIVERY",
          "CARD_REPLACEMENT",
          "CASH_ADVANCE",
          "CASH_DEPOSIT",
          "CHECK_ISSUANCE",
          "CROSS_BORDER_TRANSACTION",
          "EFT_TRANSFER",
          "FOREIGN_ATM",
          "FOREIGN_TRANSACTION",
          "INACTIVITY",
          "LATE_PAYMENT",
          "MAINTENANCE",
          "MISCELLANEOUS",
          "ORIGINATION",
          "OVERDRAFT",
          "OVER_THE_LIMIT",
          "RETURNED_ITEM",
          "RETURNED_PAYMENT",
          "STOP_PAYMENT",
          "SUBSCRIPTION",
          "WIRE_TRANSFER"
        ],
        "type": "string"
      },
      "fee_template_base": {
        "properties": {
          "amount": {
            "description": "The default amount of the fee in ISO 4217 minor currency units, e.g. cents.\nThe internal account will be debited this amount.\nCan be overridden when creating a fee.\n",
            "example": 1000,
            "type": "integer"
          },
          "currency": {
            "description": "currency for the fee, as a three character ISO 4217 alphabetic currency code.",
            "example": "USD",
            "type": "string"
          },
          "description": {
            "description": "The description of the fee template.",
            "example": "Premium Customer ATM Fee",
            "type": "string"
          },
          "internal_account_id": {
            "description": "The ID of default internal_account to use as the destination of the fee transfer. Cannot be a system internal account.",
            "example": "42943c51-e4ff-4e57-9558-08cab6b963c8",
            "format": "uuid",
            "type": "string"
          },
          "is_enabled": {
            "description": "Whether the fee template is enabled.\nIf false, fees cannot be created from this template.\n",
            "example": true,
            "type": "boolean"
          },
          "metadata": {
            "$ref": "#/components/schemas/metadata"
          }
        },
        "title": "Common properties for fee template schemas",
        "type": "object"
      },
      "fee_template_list": {
        "allOf": [
          {
            "properties": {
              "fee_templates": {
                "description": "Array of fee templates",
                "items": {
                  "$ref": "#/components/schemas/fee_template_response"
                },
                "type": "array"
              }
            },
            "required": [
              "fee_templates"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ],
        "title": "List of fee templates"
      },
      "fee_template_patch": {
        "allOf": [
          {
            "properties": {
              "subtype": {
                "$ref": "#/components/schemas/fee_subtype_post"
              }
            }
          },
          {
            "$ref": "#/components/schemas/fee_template_base"
          }
        ],
        "title": "fee template properties to update",
        "type": "object"
      },
      "fee_template_post": {
        "allOf": [
          {
            "properties": {
              "subtype": {
                "$ref": "#/components/schemas/fee_subtype_post"
              }
            }
          },
          {
            "$ref": "#/components/schemas/fee_template_base"
          }
        ],
        "required": [
          "currency",
          "description",
          "internal_account_id",
          "subtype"
        ],
        "title": "fee template creation object",
        "type": "object"
      },
      "fee_template_response": {
        "allOf": [
          {
            "properties": {
              "creation_time": {
                "description": "The timestamp representing when the fee template was created",
                "example": "2010-05-06T12:23:34.321Z",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "id": {
                "description": "The ID of the fee template.",
                "example": "85943c51-e4ff-4e57-9558-08cab6b96364",
                "format": "uuid",
                "type": "string"
              },
              "last_updated_time": {
                "description": "The timestamp representing when the fee template was last modified",
                "example": "2010-05-06T12:23:34.321Z",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "subtype": {
                "$ref": "#/components/schemas/fee_subtype"
              },
              "tenant": {
                "$ref": "#/components/schemas/tenant_id"
              }
            }
          },
          {
            "$ref": "#/components/schemas/fee_template_base"
          }
        ],
        "required": [
          "creation_time",
          "currency",
          "id",
          "internal_account_id",
          "is_enabled",
          "last_updated_time",
          "subtype",
          "tenant"
        ],
        "title": "fee template response object",
        "type": "object"
      },
      "fee_transaction": {
        "allOf": [
          {
            "properties": {
              "fee_transaction": {
                "$ref": "#/components/schemas/fee_transaction_data"
              },
              "subtype": {
                "$ref": "#/components/schemas/fee_subtype"
              }
            },
            "required": [
              "fee_transaction",
              "subtype"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/base_transaction"
          }
        ]
      },
      "fee_transaction_data": {
        "description": "Transaction metadata specific to transactions with type `FEE`",
        "properties": {
          "fee_id": {
            "description": "The Synctera fee id",
            "type": "string"
          },
          "fee_template_id": {
            "description": "The Synctera fee template id",
            "type": "string"
          }
        },
        "type": "object"
      },
      "financial": {
        "properties": {
          "tax_id": {
            "example": "TAX123",
            "type": "string"
          },
          "total_tax_amount": {
            "example": 200,
            "format": "int64",
            "type": "integer"
          },
          "total_tax_amount_indicator": {
            "example": "Indicator",
            "type": "string"
          }
        },
        "type": "object"
      },
      "financial_institution": {
        "properties": {
          "legal_address": {
            "$ref": "#/components/schemas/address1"
          },
          "name": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          }
        },
        "title": "Financial Institution",
        "type": "object"
      },
      "financial_request_model": {
        "properties": {
          "amount": {
            "description": "The amount of the transaction in the smallest whole denomination of the applicable currency (eg. For USD use cents)",
            "type": "integer"
          },
          "card_acceptor": {
            "$ref": "#/components/schemas/card_acceptor_model"
          },
          "card_id": {
            "format": "uuid",
            "type": "string"
          },
          "cash_back_amount": {
            "description": "Cash back amount in the smallest whole denomination of the applicable currency (eg. For USD use cents)",
            "type": "integer"
          },
          "is_pre_auth": {
            "default": false,
            "type": "boolean"
          },
          "mid": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "pin": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string"
          },
          "transaction_options": {
            "$ref": "#/components/schemas/transaction_options"
          }
        },
        "required": [
          "amount",
          "card_acceptor",
          "card_id",
          "mid"
        ],
        "type": "object"
      },
      "fleets": {
        "properties": {
          "driver_id": {
            "example": "DR789",
            "type": "string"
          },
          "expanded_fuel_type": {
            "example": "TypeB",
            "type": "string"
          },
          "fleet_number": {
            "example": "FL123",
            "type": "string"
          },
          "fuel_gross_amount": {
            "example": 220,
            "format": "int64",
            "type": "integer"
          },
          "fuel_net_amount": {
            "example": 200,
            "format": "int64",
            "type": "integer"
          },
          "fuel_product_qualifier": {
            "example": "QualifierA",
            "type": "string"
          },
          "fuel_purchase_type": {
            "example": "TypeA",
            "type": "string"
          },
          "fuel_quantity": {
            "example": 50,
            "format": "float",
            "type": "number"
          },
          "fuel_service_type": {
            "example": "ServiceA",
            "type": "string"
          },
          "fuel_tax_amount": {
            "example": 20,
            "format": "int64",
            "type": "integer"
          },
          "fuel_tax_exemption_status": {
            "example": "Exempt",
            "type": "string"
          },
          "fuel_type": {
            "example": "Diesel",
            "type": "string"
          },
          "fuel_unit_of_measure": {
            "example": "Liters",
            "type": "string"
          },
          "fuel_unit_price": {
            "example": 1.5,
            "format": "float",
            "type": "number"
          },
          "job_number": {
            "example": "JN456",
            "type": "string"
          },
          "non_fuel_gross_amount": {
            "example": 330,
            "format": "int64",
            "type": "integer"
          },
          "non_fuel_item_details": {
            "items": {
              "$ref": "#/components/schemas/non_fuel_item_details"
            },
            "type": "array"
          },
          "non_fuel_net_amount": {
            "example": 300,
            "format": "int64",
            "type": "integer"
          },
          "non_fuel_tax_amount": {
            "example": 30,
            "format": "int64",
            "type": "integer"
          },
          "non_fuel_tax_exemption_status": {
            "example": "Non-Exempt",
            "type": "string"
          },
          "odometer_reading": {
            "example": "123456",
            "type": "string"
          },
          "sales_tax_amount": {
            "example": 100,
            "format": "int64",
            "type": "integer"
          },
          "service_type": {
            "example": "Maintenance",
            "type": "string"
          },
          "type_of_purchase": {
            "example": "Fuel",
            "type": "string"
          },
          "vat_tax_rate": {
            "example": 0.15,
            "format": "float",
            "type": "number"
          },
          "vehicle_id": {
            "example": "VH012",
            "type": "string"
          }
        },
        "type": "object"
      },
      "fleets_emv": {
        "properties": {
          "employee_number": {
            "example": "EMP001",
            "type": "string"
          },
          "expanded_fuel_type": {
            "example": "TypeC",
            "type": "string"
          },
          "fuel_gross_amount": {
            "example": 165,
            "format": "int64",
            "type": "integer"
          },
          "fuel_net_amount": {
            "example": 150,
            "format": "int64",
            "type": "integer"
          },
          "fuel_quantity": {
            "example": 40,
            "format": "float",
            "type": "number"
          },
          "fuel_unit_of_measure": {
            "example": "Gallons",
            "type": "string"
          },
          "fuel_unit_price": {
            "example": 1.1,
            "format": "float",
            "type": "number"
          },
          "non_fuel_gross_amount": {
            "example": 275,
            "format": "int64",
            "type": "integer"
          },
          "non_fuel_item_details": {
            "items": {
              "$ref": "#/components/schemas/non_fuel_item_details"
            },
            "type": "array"
          },
          "non_fuel_net_amount": {
            "example": 250,
            "format": "int64",
            "type": "integer"
          },
          "odometer_reading": {
            "example": "654321",
            "type": "string"
          },
          "service_type": {
            "example": "Repair",
            "type": "string"
          },
          "trailer_number": {
            "example": "TR002",
            "type": "string"
          },
          "type_of_purchase": {
            "example": "Non-Fuel",
            "type": "string"
          },
          "vat_tax_rate": {
            "example": 0.15,
            "format": "float",
            "type": "number"
          }
        },
        "type": "object"
      },
      "form": {
        "description": "PHYSICAL or VIRTUAL.",
        "enum": [
          "PHYSICAL",
          "VIRTUAL"
        ],
        "type": "string"
      },
      "fraud_risk_data": {
        "description": "Transaction fraud risk evaluation result",
        "properties": {
          "decision": {
            "description": "The overall decision, based on the vendor response",
            "enum": [
              "ACCEPT",
              "DECLINE"
            ],
            "type": "string"
          },
          "reasons": {
            "description": "Set of machine-readable descriptions of why the transaction was accepted or declined",
            "items": {
              "enum": [
                "SUSPECTED_FRAUD",
                "TRANSACTION_ACCEPTED",
                "TRANSACTION_NOT_PERMITTED"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "vendor": {
            "description": "The external vendor used for risk evaluation",
            "enum": [
              "FEEDZAI",
              "HAWKAI",
              "NONE"
            ],
            "type": "string"
          },
          "vendor_reasons": {
            "description": "List of reasons supplied by the provider",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "decision",
          "vendor"
        ],
        "type": "object"
      },
      "fulfillment_details": {
        "properties": {
          "bulk_order_id": {
            "$ref": "#/components/schemas/bulk_order_id"
          },
          "ship_date": {
            "description": "The date that the card was shipped as reported by the card fulfillment provider",
            "example": "2022-07-19",
            "format": "date",
            "readOnly": true,
            "type": "string"
          },
          "shipping_method": {
            "description": "The specific shipping method as reported by the card fulfillment provider",
            "example": "UPS Next Day Air Saver",
            "readOnly": true,
            "type": "string"
          },
          "tracking_number": {
            "description": "The shipment tracking number",
            "example": "1ZW3268W1319325382",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "gateway_authorization": {
        "description": "Request sent to gateway for authorization.",
        "properties": {
          "account_id": {
            "description": "Unique identifier of the account.",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "acquirer_reference_id": {
            "type": "string"
          },
          "amount": {
            "$ref": "#/components/schemas/gateway_authorization_amount"
          },
          "balance": {
            "$ref": "#/components/schemas/gateway_authorization_balance"
          },
          "banknet_reference_id": {
            "type": "string"
          },
          "bin": {
            "$ref": "#/components/schemas/gateway_authorization_bin"
          },
          "card_category": {
            "type": "string"
          },
          "card_format": {
            "$ref": "#/components/schemas/gateway_authorization_card_format"
          },
          "card_id": {
            "description": "Unique identifier of the card.",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "customer_id": {
            "description": "Unique identifier of the customer.",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "dc_sign": {
            "type": "string"
          },
          "digital_wallet_token_id": {
            "description": "Unique identifier of the digital wallet token.",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "digital_wallet_token_reference_id": {
            "type": "string"
          },
          "enhanced_transaction": {
            "$ref": "#/components/schemas/gateway_authorization_enhanced_transaction"
          },
          "fees": {
            "$ref": "#/components/schemas/gateway_authorization_fees"
          },
          "id": {
            "description": "Unique identifier assigned to each individual request.",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "is_surcharge_free": {
            "description": "Indicates if the transaction is surcharge free.",
            "type": "boolean"
          },
          "last_four": {
            "description": "Last four digits of the card PAN.",
            "example": "1234",
            "type": "string"
          },
          "merchant": {
            "$ref": "#/components/schemas/gateway_authorization_merchant"
          },
          "network": {
            "type": "string"
          },
          "network_fraud": {
            "$ref": "#/components/schemas/gateway_authorization_network_fraud"
          },
          "payment_channel": {
            "type": "string"
          },
          "pos": {
            "$ref": "#/components/schemas/gateway_authorization_pos"
          },
          "processor": {
            "$ref": "#/components/schemas/gateway_authorization_processor"
          },
          "processor_data": {
            "description": "An unstructured JSON blob containing raw transaction data from the processor.",
            "type": "object"
          },
          "settlement_date": {
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          },
          "subnetwork": {
            "type": "string"
          },
          "three_ds_authentication_status": {
            "enum": [
              "ACQUIRER_EXEMPT",
              "AUTHENTICATED",
              "EXEMPT",
              "NOT_AUTHENTICATED"
            ],
            "type": "string"
          },
          "transaction_id": {
            "description": "Unique identifier of the transaction.",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/gateway_authorization_user"
          },
          "user_transaction_time": {
            "description": "The time when the transaction occurred.",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          },
          "verification": {
            "$ref": "#/components/schemas/gateway_authorization_verification"
          }
        },
        "required": [
          "account_id",
          "amount",
          "balance",
          "bin",
          "card_format",
          "card_id",
          "customer_id",
          "last_four",
          "merchant",
          "network_fraud",
          "processor",
          "processor_data",
          "settlement_date",
          "subnetwork",
          "transaction_id",
          "type",
          "user",
          "user_transaction_time"
        ],
        "type": "object"
      },
      "gateway_authorization_amount": {
        "properties": {
          "amount": {
            "format": "int64",
            "type": "integer"
          },
          "approved_amount": {
            "format": "int64",
            "type": "integer"
          },
          "currency": {
            "type": "string"
          },
          "currency_conversion": {
            "$ref": "#/components/schemas/gateway_authorization_currency_conversion"
          },
          "total_pending_amount": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "amount",
          "approved_amount",
          "currency",
          "currency_conversion",
          "total_pending_amount"
        ],
        "type": "object"
      },
      "gateway_authorization_balance": {
        "properties": {
          "available_balance": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "available_balance"
        ],
        "type": "object"
      },
      "gateway_authorization_bin": {
        "properties": {
          "country_code": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "country_code",
          "id"
        ],
        "type": "object"
      },
      "gateway_authorization_card_format": {
        "enum": [
          "PHYSICAL",
          "VIRTUAL"
        ],
        "type": "string"
      },
      "gateway_authorization_currency_conversion": {
        "properties": {
          "conversion_rate": {
            "format": "float",
            "type": "number"
          },
          "dynamic_currency_conversion": {
            "type": "boolean"
          },
          "original_amount": {
            "format": "int64",
            "type": "integer"
          },
          "original_currency_code": {
            "type": "string"
          },
          "original_currency_code_alpha": {
            "$ref": "#/components/schemas/currency_code"
          },
          "raw_original_amount": {
            "format": "float",
            "type": "number"
          },
          "settlement_currency_conversion": {
            "$ref": "#/components/schemas/gateway_authorization_settlement_currency_conversion"
          }
        },
        "type": "object"
      },
      "gateway_authorization_enhanced_transaction": {
        "properties": {
          "category": {
            "type": "string"
          },
          "enhanced_description": {
            "type": "string"
          },
          "enhanced_raw": {
            "items": {
              "$ref": "#/components/schemas/gateway_authorization_enhanced_transaction_raw"
            },
            "type": "array"
          }
        },
        "required": [
          "category",
          "enhanced_description",
          "enhanced_raw"
        ],
        "type": "object"
      },
      "gateway_authorization_enhanced_transaction_raw": {
        "properties": {
          "amount": {
            "format": "float",
            "nullable": true,
            "type": "number"
          },
          "categorized_by": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "category": {
            "nullable": true,
            "type": "string"
          },
          "category_guid": {
            "nullable": true,
            "type": "string"
          },
          "described_by": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "extended_transaction_type": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "is_bill_pay": {
            "nullable": true,
            "type": "boolean"
          },
          "is_direct_deposit": {
            "nullable": true,
            "type": "boolean"
          },
          "is_expense": {
            "nullable": true,
            "type": "boolean"
          },
          "is_fee": {
            "nullable": true,
            "type": "boolean"
          },
          "is_income": {
            "nullable": true,
            "type": "boolean"
          },
          "is_international": {
            "nullable": true,
            "type": "boolean"
          },
          "is_overdraft_fee": {
            "nullable": true,
            "type": "boolean"
          },
          "is_payroll_advance": {
            "nullable": true,
            "type": "boolean"
          },
          "is_subscription": {
            "nullable": true,
            "type": "boolean"
          },
          "memo": {
            "nullable": true,
            "type": "string"
          },
          "merchant_category_code": {
            "type": "string"
          },
          "merchant_guid": {
            "nullable": true,
            "type": "string"
          },
          "merchant_location_guid": {
            "nullable": true,
            "type": "string"
          },
          "original_description": {
            "nullable": true,
            "type": "string"
          },
          "type": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "gateway_authorization_fees": {
        "properties": {
          "acquirer_user_fee": {
            "format": "int64",
            "type": "integer"
          },
          "cross_border_issuer_fee": {
            "format": "int64",
            "type": "integer"
          },
          "currency_conversion_issuer_fee": {
            "format": "int64",
            "type": "integer"
          },
          "currency_conversion_user_fee": {
            "format": "int64",
            "type": "integer"
          },
          "interchange_fee": {
            "format": "int64",
            "type": "integer"
          },
          "issuer_fee": {
            "format": "int64",
            "type": "integer"
          },
          "network_fee": {
            "format": "int64",
            "type": "integer"
          },
          "pindebit_user_fee": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "gateway_authorization_merchant": {
        "properties": {
          "city": {
            "type": "string"
          },
          "country_code": {
            "type": "string"
          },
          "mcc": {
            "type": "string"
          },
          "mid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "payment_facilitator_id": {
            "type": "string"
          },
          "postal_code": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "sub_merchant_id": {
            "type": "string"
          }
        },
        "required": [
          "city",
          "country_code",
          "mcc",
          "mid",
          "name",
          "payment_facilitator_id",
          "postal_code",
          "state",
          "sub_merchant_id"
        ],
        "type": "object"
      },
      "gateway_authorization_network_fraud": {
        "properties": {
          "transaction_risk_score": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "gateway_authorization_pos": {
        "properties": {
          "cardholder_verification_method": {
            "type": "string"
          },
          "cvv_presence": {
            "type": "string"
          },
          "pan_entry_mode": {
            "type": "string"
          },
          "pin_entry_mode": {
            "type": "string"
          },
          "pin_present": {
            "type": "boolean"
          },
          "terminal_capability": {
            "type": "string"
          },
          "terminal_id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "gateway_authorization_processor": {
        "enum": [
          "MARQETA"
        ],
        "type": "string"
      },
      "gateway_authorization_settlement_currency_conversion": {
        "properties": {
          "amount": {
            "format": "int64",
            "type": "integer"
          },
          "conversion_rate": {
            "format": "float",
            "type": "number"
          },
          "currency_code": {
            "type": "string"
          },
          "currency_code_alpha": {
            "$ref": "#/components/schemas/currency_code"
          }
        },
        "type": "object"
      },
      "gateway_authorization_user": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "gateway_authorization_verification": {
        "properties": {
          "online_security_transaction_code": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "gateway_custom_headers": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "These key-value pairs define custom HTTP headers that will be included in every HTTP request to the\ngateway. Note that when updating this field, all key-value pairs will be replaced. They are not merged with\nexisting data.\n",
        "type": "object"
      },
      "gateway_id": {
        "description": "The unique identifier of an Authorization gateway config",
        "format": "uuid",
        "type": "string"
      },
      "gateway_list_response": {
        "allOf": [
          {
            "$ref": "#/components/schemas/paginated_response"
          },
          {
            "properties": {
              "gateways": {
                "description": "Array of Authorization gateway configuration",
                "items": {
                  "$ref": "#/components/schemas/gateway_response"
                },
                "type": "array"
              }
            },
            "required": [
              "gateways"
            ],
            "type": "object"
          }
        ]
      },
      "gateway_response": {
        "properties": {
          "card_products": {
            "description": "List of Card Product unique identifiers that will utilize the Gateway",
            "items": {
              "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "creation_time": {
            "description": "The timestamp representing when the gateway config request was made",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "custom_headers": {
            "$ref": "#/components/schemas/gateway_custom_headers"
          },
          "id": {
            "description": "Gateway ID",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "is_active": {
            "description": "Current status of the Authorization gateway",
            "type": "boolean"
          },
          "last_updated_time": {
            "description": "The timestamp representing when the gateway config was last modified at",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "standin": {
            "$ref": "#/components/schemas/gateway_standin"
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          },
          "url": {
            "description": "URL of the Authorization gateway",
            "format": "uri",
            "maxLength": 1000,
            "type": "string"
          }
        },
        "required": [
          "card_products",
          "creation_time",
          "id",
          "is_active",
          "last_updated_time",
          "tenant",
          "url"
        ],
        "type": "object"
      },
      "gateway_standin": {
        "properties": {
          "enabled": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "google_digital_wallet_provision_request": {
        "properties": {
          "device_id": {
            "description": "The user’s Android device ID; the device’s unique identifier.",
            "maxLength": 24,
            "type": "string"
          },
          "device_type": {
            "$ref": "#/components/schemas/device_type"
          },
          "provisioning_app_version": {
            "$ref": "#/components/schemas/provisioning_app_version"
          },
          "wallet_account_id": {
            "description": "The user’s Google wallet account ID.",
            "maxLength": 50,
            "type": "string"
          }
        },
        "required": [
          "device_id",
          "device_type",
          "provisioning_app_version",
          "wallet_account_id"
        ],
        "type": "object"
      },
      "google_digital_wallet_provision_response": {
        "properties": {
          "card_id": {
            "$ref": "#/components/schemas/card_id"
          },
          "creation_time": {
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          },
          "last_updated_time": {
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          },
          "push_tokenize_request_data": {
            "$ref": "#/components/schemas/push_tokenize_request_data"
          }
        },
        "type": "object"
      },
      "google_pay_address": {
        "properties": {
          "address_1": {
            "description": "Address line 1",
            "type": "string"
          },
          "address_2": {
            "description": "Address line 2",
            "type": "string"
          },
          "address_3": {
            "description": "Address line 3",
            "type": "string"
          },
          "administrative_area": {
            "description": "Country subdivision, such as state or province",
            "type": "string"
          },
          "country_code": {
            "$ref": "#/components/schemas/country_code"
          },
          "locality": {
            "description": "City, town, neighborhood or suburb",
            "type": "string"
          },
          "name": {
            "description": "Full name of addressee",
            "type": "string"
          },
          "phone_number": {
            "description": "Telephone number",
            "type": "string"
          },
          "postal_code": {
            "description": "Postal or ZIP code",
            "type": "string"
          },
          "sorting_code": {
            "description": "Sorting code",
            "type": "string"
          }
        },
        "type": "object"
      },
      "google_pay_assurance_details": {
        "description": "Information about the validatoin performed on the returned payment data",
        "properties": {
          "account_verified": {
            "description": "Indicates if the cardholder possession validation has been performed on the returned payment credential",
            "type": "boolean"
          },
          "cardholder_authenticated": {
            "description": "Indicates if identification and verifications (ID&V) was performed on the returned payment credential",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "google_pay_info": {
        "description": "Information about the selected payment card",
        "properties": {
          "assurance_details": {
            "$ref": "#/components/schemas/google_pay_assurance_details"
          },
          "billing_address": {
            "$ref": "#/components/schemas/google_pay_address"
          },
          "card_details": {
            "description": "Details about the card. This value is commonly the last four digits of the selected payment account number.",
            "type": "string"
          },
          "card_network": {
            "description": "Payment card network of the selected payment",
            "enum": [
              "AMEX",
              "DISCOVER",
              "INTERAC",
              "JCB",
              "MASTERCARD",
              "VISA"
            ],
            "type": "string"
          }
        },
        "required": [
          "assurance_details",
          "card_details",
          "card_network"
        ],
        "type": "object"
      },
      "google_pay_payment_data": {
        "description": "Payload containing payment information, obtained from Google following payment approval",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/google_pay_address"
          },
          "api_version": {
            "description": "Major API version",
            "type": "integer"
          },
          "api_version_minor": {
            "description": "Minor API version",
            "type": "integer"
          },
          "email": {
            "description": "Email address of cardholder, present if requested in payment request",
            "type": "string"
          },
          "payment_method_data": {
            "$ref": "#/components/schemas/google_pay_payment_method_data"
          }
        },
        "required": [
          "api_version",
          "api_version_minor",
          "payment_method_data"
        ],
        "type": "object"
      },
      "google_pay_payment_method_data": {
        "description": "Data about the selected payment method",
        "properties": {
          "description": {
            "description": "User-facing message to describe the payment method that funds this transaction",
            "type": "string"
          },
          "info": {
            "$ref": "#/components/schemas/google_pay_info"
          },
          "tokenization_data": {
            "$ref": "#/components/schemas/google_pay_tokenization_data"
          },
          "type": {
            "description": "Payment method type selected in the Google Pay payment sheet. `CARD` is the only supported value.",
            "enum": [
              "CARD"
            ],
            "type": "string"
          }
        },
        "required": [
          "description",
          "info",
          "tokenization_data",
          "type"
        ],
        "type": "object"
      },
      "google_pay_tokenization_data": {
        "description": "Payment tokenization data for the selected payment method",
        "properties": {
          "token": {
            "description": "Generated payment method token",
            "type": "string"
          },
          "type": {
            "description": "Type of tokenization",
            "enum": [
              "DIRECT",
              "PAYMENT_GATEWAY"
            ],
            "type": "string"
          }
        },
        "required": [
          "token",
          "type"
        ],
        "type": "object"
      },
      "in_app_provisioning": {
        "properties": {
          "address_verification": {
            "$ref": "#/components/schemas/digital_wallet_token_address_verification"
          },
          "enabled": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "incoming_synctera_pay_configuration_list": {
        "allOf": [
          {
            "$ref": "#/components/schemas/paginated_response"
          },
          {
            "properties": {
              "configurations": {
                "items": {
                  "$ref": "#/components/schemas/incoming_synctera_pay_configuration_response"
                },
                "type": "array"
              }
            },
            "required": [
              "configurations"
            ],
            "type": "object"
          }
        ]
      },
      "incoming_synctera_pay_configuration_response": {
        "properties": {
          "creation_time": {
            "description": "The timestamp representing when the dispute was created",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          },
          "currency": {
            "description": "ISO 4217 Alpha-3 code representing the currency to be credited to the Synctera account.",
            "example": "USD",
            "maxLength": 3,
            "minLength": 3,
            "type": "string"
          },
          "enabled": {
            "description": "Determines if this Incoming Synctera Pay Configuration can be used to create new transfers.",
            "type": "boolean"
          },
          "id": {
            "description": "The unique ID of the Incoming Synctera Pay configuration",
            "format": "uuid",
            "type": "string"
          },
          "last_updated_time": {
            "description": "The timestamp representing when the dispute was last modified",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "description": "User-supplied name for the configuration",
            "type": "string"
          },
          "settlement_account_id": {
            "description": "Account used for settlement of all transfers that use this configuration.",
            "format": "uuid",
            "type": "string"
          },
          "settlement_account_owner_id": {
            "description": "Business or Person that owns the settlement account for all transfers that use this configuration.",
            "format": "uuid",
            "type": "string"
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          },
          "transaction_subtype": {
            "$ref": "#/components/schemas/incoming_synctera_pay_subtype"
          }
        },
        "required": [
          "creation_time",
          "currency",
          "enabled",
          "id",
          "last_updated_time",
          "name",
          "settlement_account_id",
          "settlement_account_owner_id",
          "tenant",
          "transaction_subtype"
        ],
        "title": "Incoming Synctera Pay Configuration",
        "type": "object"
      },
      "incoming_synctera_pay_status": {
        "description": "The status of the incoming transfer. All values other than POSTED and DECLINED are intermediate statuses that will only appear if the transfer needs to be retried, using the same idempotency key.\n",
        "enum": [
          "CHECK",
          "CREATE_HOLD",
          "DECLINED",
          "DECLINE_HOLD",
          "POSTED",
          "POST_HOLD"
        ],
        "type": "string"
      },
      "incoming_synctera_pay_subtype": {
        "description": "Transaction sub-type to be recorded in the Synctera ledger for transactions using this configuration.",
        "enum": [
          "INCOMING_INTERNATIONAL_WIRE"
        ],
        "type": "string"
      },
      "incoming_synctera_pay_transfer_creation_request": {
        "properties": {
          "amount": {
            "description": "The amount in the source currency's minor unit. For example, 10000 would be $100 for USD.",
            "format": "int64",
            "minimum": 1,
            "type": "integer"
          },
          "configuration_id": {
            "description": "The ID of the Incoming Synctera Pay configuration to be used for this transfer",
            "format": "uuid",
            "type": "string"
          },
          "destination_account_id": {
            "description": "The ID of the account in the Synctera Platform that will receive the funds for this transfer.",
            "format": "uuid",
            "type": "string"
          },
          "external_data": {
            "description": "External Data for FinTech use, copied to ledger transactions related to this transfer.",
            "type": "object"
          },
          "payee_id": {
            "description": "The ID of the person or business customer in the Synctera Platform that is the receiver of the this transfer.",
            "format": "uuid",
            "type": "string"
          },
          "payer_id": {
            "description": "The ID of the person or business in the Synctera Platform that is the originator of the this transfer. Depending on the configuration being used, this does not necessarily need to be a customer.",
            "format": "uuid",
            "type": "string"
          },
          "reference_id": {
            "description": "The unique network reference ID assigned to the transfer by the FinTech. This will be copied to the reference_id of the related ledger transaction.",
            "minLength": 1,
            "type": "string"
          },
          "settlement_date": {
            "format": "date",
            "type": "string"
          },
          "source_external_account_id": {
            "description": "The ID of the external account in the Synctera Platform that is the ultimate source of funds for this transfer.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "amount",
          "configuration_id",
          "destination_account_id",
          "payee_id",
          "payer_id",
          "reference_id",
          "settlement_date",
          "source_external_account_id"
        ],
        "type": "object"
      },
      "incoming_synctera_pay_transfer_list": {
        "allOf": [
          {
            "properties": {
              "transfers": {
                "items": {
                  "$ref": "#/components/schemas/incoming_synctera_pay_transfer_response"
                },
                "type": "array"
              }
            },
            "required": [
              "transfers"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "incoming_synctera_pay_transfer_response": {
        "properties": {
          "amount": {
            "description": "The amount in the source currency's minor unit. For example, 10000 would be $100 for USD.",
            "format": "int64",
            "minimum": 1,
            "type": "integer"
          },
          "configuration_id": {
            "description": "The ID of the Incoming Synctera Pay configuration used for this transfer",
            "format": "uuid",
            "type": "string"
          },
          "creation_time": {
            "description": "The timestamp representing when the dispute was created",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          },
          "destination_account_id": {
            "description": "The ID of the account in the Synctera Platform that will receive the funds for this transfer.",
            "format": "uuid",
            "type": "string"
          },
          "external_data": {
            "description": "External Data for FinTech use, copied to ledger transactions related to this transfer.",
            "type": "object"
          },
          "id": {
            "description": "The unique ID of the Incoming Synctera Pay transfer",
            "format": "uuid",
            "type": "string"
          },
          "last_updated_time": {
            "description": "The timestamp representing when the dispute was last modified",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          },
          "payee_id": {
            "description": "The ID of the person or business customer in the Synctera Platform that is the receiver of the this transfer.",
            "format": "uuid",
            "type": "string"
          },
          "payer_id": {
            "description": "The ID of the person or business in the Synctera Platform that is the originator of the this transfer. Depending on the configuration being used, this does not necessarily need to be a customer.",
            "format": "uuid",
            "type": "string"
          },
          "reference_id": {
            "description": "The unique network reference ID assigned to the transfer by the FinTech.",
            "type": "string"
          },
          "settlement_date": {
            "format": "date",
            "type": "string"
          },
          "source_external_account_id": {
            "description": "The ID of the external account in the Synctera Platform that is the ultimate source of funds for this transfer.",
            "format": "uuid",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/incoming_synctera_pay_status"
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          },
          "transaction_id": {
            "description": "The ID of the transaction in the Synctera Ledger related to this transfer.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "amount",
          "configuration_id",
          "creation_time",
          "destination_account_id",
          "id",
          "last_updated_time",
          "payee_id",
          "payer_id",
          "reference_id",
          "settlement_date",
          "source_external_account_id",
          "status",
          "tenant"
        ],
        "type": "object"
      },
      "initialize_3ds_request": {
        "description": "Initialization for an External Card Transfer 3-D Secure Authentication request",
        "properties": {
          "amount": {
            "description": "Amount in cents of the External Card Transfer to be authenticated",
            "minimum": 1,
            "type": "integer"
          },
          "currency": {
            "$ref": "#/components/schemas/currency_code"
          },
          "external_card_id": {
            "description": "The ID of the External Card for which the 3DS Authentication will be performed",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "amount",
          "currency",
          "external_card_id"
        ],
        "type": "object"
      },
      "initialize_3ds_response": {
        "description": "Initialization for an External Card Transfer 3-D Secure Authentication response",
        "properties": {
          "device_data_collection_jwt": {
            "description": "JWT used for device data collection",
            "type": "string"
          },
          "device_data_collection_url": {
            "description": "URL used for device data collection",
            "format": "uri",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the 3DS authentication",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "device_data_collection_jwt",
          "device_data_collection_url",
          "id"
        ],
        "type": "object"
      },
      "internal_transfer_transaction": {
        "allOf": [
          {
            "properties": {
              "internal_transfer_transaction": {
                "$ref": "#/components/schemas/internal_transfer_transaction_data"
              },
              "subtype": {
                "$ref": "#/components/schemas/internal_transfer_transaction_subtypes"
              }
            },
            "required": [
              "subtype"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/base_transaction"
          }
        ]
      },
      "internal_transfer_transaction_data": {
        "description": "Transaction metadata specific to transactions with type `INTERNAL_TRANSFER`",
        "properties": {
          "originating_account_id": {
            "description": "The uuid of the account being debited",
            "type": "string"
          },
          "receiving_account_id": {
            "description": "The uuid of the account being credited",
            "type": "string"
          }
        },
        "type": "object"
      },
      "internal_transfer_transaction_subtypes": {
        "description": "The set of valid INTERNAL_TRANSFER transaction subtypes",
        "enum": [
          "ACCOUNT_BALANCE_ADJUSTMENT",
          "ACCOUNT_BALANCE_ADJUSTMENT_REVERSAL",
          "ACCOUNT_DECREASE_LIMIT",
          "ACCOUNT_DECREASE_LIMIT_REVERSAL",
          "ACCOUNT_INCREASE_LIMIT",
          "ACCOUNT_INCREASE_LIMIT_REVERSAL",
          "ACCOUNT_TO_ACCOUNT",
          "ACCOUNT_TO_ACCOUNT_REVERSAL",
          "ACCOUNT_TO_ACCOUNT_SWEEP",
          "ACCOUNT_TO_ACCOUNT_SWEEP_REVERSAL",
          "ACH_CREDIT_SWEEP",
          "ACH_CREDIT_SWEEP_REVERSAL",
          "ACH_DEBIT_SWEEP",
          "ACH_DEBIT_SWEEP_REVERSAL",
          "ACH_FLOAT_TRANSFER",
          "ACH_FLOAT_TRANSFER_REVERSAL",
          "ACH_INCOMING_CREDIT_SWEEP",
          "ACH_INCOMING_CREDIT_SWEEP_REVERSAL",
          "ACH_INCOMING_DEBIT_SWEEP",
          "ACH_INCOMING_DEBIT_SWEEP_REVERSAL",
          "ACH_INCOMING_RETURN_CREDIT_SWEEP",
          "ACH_INCOMING_RETURN_CREDIT_SWEEP_REVERSAL",
          "ACH_INCOMING_RETURN_DEBIT_SWEEP",
          "ACH_INCOMING_RETURN_DEBIT_SWEEP_REVERSAL",
          "ACH_OUTGOING_CREDIT_SWEEP",
          "ACH_OUTGOING_CREDIT_SWEEP_REVERSAL",
          "ACH_OUTGOING_DEBIT_SWEEP",
          "ACH_OUTGOING_DEBIT_SWEEP_REVERSAL",
          "ACH_OUTGOING_RETURN_CREDIT_SWEEP",
          "ACH_OUTGOING_RETURN_CREDIT_SWEEP_REVERSAL",
          "ACH_OUTGOING_RETURN_DEBIT_SWEEP",
          "ACH_OUTGOING_RETURN_DEBIT_SWEEP_REVERSAL",
          "ACH_SWEEP",
          "ACH_SWEEP_REVERSAL",
          "BULK_DOMESTIC_WIRE_OUTGOING_SWEEP",
          "BULK_DOMESTIC_WIRE_OUTGOING_SWEEP_REVERSAL",
          "BULK_EFT_CA_OUTGOING_CREDIT_SWEEP",
          "BULK_EFT_CA_OUTGOING_CREDIT_SWEEP_REVERSAL",
          "BULK_EFT_CA_OUTGOING_DEBIT_SWEEP",
          "BULK_EFT_CA_OUTGOING_DEBIT_SWEEP_REVERSAL",
          "CARD_CHARGEBACK_CASE_WON_SWEEP",
          "CARD_CHARGEBACK_CASE_WON_SWEEP_REVERSAL",
          "CARD_CHARGEBACK_WRITEOFF_SWEEP",
          "CARD_CHARGEBACK_WRITEOFF_SWEEP_REVERSAL",
          "CARD_PROVISIONAL_CREDIT_SWEEP",
          "CARD_PROVISIONAL_CREDIT_SWEEP_REVERSAL",
          "CASHBACK",
          "CASHBACK_REVERSAL",
          "CASHBACK_SWEEP",
          "CASHBACK_SWEEP_REVERSAL",
          "CREDIT_MEMO",
          "CREDIT_MEMO_REVERSAL",
          "DOMESTIC_WIRE_INCOMING_RETURN_SWEEP",
          "DOMESTIC_WIRE_INCOMING_RETURN_SWEEP_REVERSAL",
          "DOMESTIC_WIRE_INCOMING_SWEEP",
          "DOMESTIC_WIRE_INCOMING_SWEEP_REVERSAL",
          "DOMESTIC_WIRE_OUTGOING_RETURN_SWEEP",
          "DOMESTIC_WIRE_OUTGOING_RETURN_SWEEP_REVERSAL",
          "DOMESTIC_WIRE_OUTGOING_SWEEP",
          "DOMESTIC_WIRE_OUTGOING_SWEEP_REVERSAL",
          "EFT_CA_INCOMING_CREDIT_RETURN_SWEEP",
          "EFT_CA_INCOMING_CREDIT_RETURN_SWEEP_REVERSAL",
          "EFT_CA_INCOMING_CREDIT_SWEEP",
          "EFT_CA_INCOMING_CREDIT_SWEEP_REVERSAL",
          "EFT_CA_INCOMING_DEBIT_RETURN_SWEEP",
          "EFT_CA_INCOMING_DEBIT_RETURN_SWEEP_REVERSAL",
          "EFT_CA_INCOMING_DEBIT_SWEEP",
          "EFT_CA_INCOMING_DEBIT_SWEEP_REVERSAL",
          "EFT_CA_OUTGOING_CREDIT_RETURN_SWEEP",
          "EFT_CA_OUTGOING_CREDIT_RETURN_SWEEP_REVERSAL",
          "EFT_CA_OUTGOING_CREDIT_SWEEP",
          "EFT_CA_OUTGOING_CREDIT_SWEEP_REVERSAL",
          "EFT_CA_OUTGOING_DEBIT_RETURN_SWEEP",
          "EFT_CA_OUTGOING_DEBIT_RETURN_SWEEP_REVERSAL",
          "EFT_CA_OUTGOING_DEBIT_SWEEP",
          "EFT_CA_OUTGOING_DEBIT_SWEEP_REVERSAL",
          "ETRANSFER_SWEEP",
          "ETRANSFER_SWEEP_REVERSAL",
          "EXCHANGE_RATE_DIFFERENCE_GAIN",
          "EXCHANGE_RATE_DIFFERENCE_GAIN_REVERSAL",
          "EXCHANGE_RATE_DIFFERENCE_LOSS",
          "EXCHANGE_RATE_DIFFERENCE_LOSS_REVERSAL",
          "FEE",
          "FEE_REVERSAL",
          "FEE_SWEEP",
          "FEE_SWEEP_REVERSAL",
          "FORCE_PAYMENT",
          "FORCE_PAYMENT_REVERSAL",
          "GENERAL_FEE_SWEEP",
          "GENERAL_FEE_SWEEP_REVERSAL",
          "GENERAL_INTERNAL_TRANSFER_SWEEP",
          "GENERAL_INTERNAL_TRANSFER_SWEEP_REVERSAL",
          "GENERAL_REWARD_SWEEP",
          "GENERAL_REWARD_SWEEP_REVERSAL",
          "INCOMING_WIRE",
          "INCOMING_WIRE_REVERSAL",
          "INCOMING_WIRE_SWEEP",
          "INCOMING_WIRE_SWEEP_REVERSAL",
          "INTEREST_CHARGED",
          "INTEREST_CHARGED_REVERSAL",
          "INTEREST_CHARGED_SWEEP",
          "INTEREST_CHARGED_SWEEP_REVERSAL",
          "INTEREST_CORRECTION",
          "INTEREST_CORRECTION_REVERSAL",
          "INTEREST_PAYOUT",
          "INTEREST_PAYOUT_REVERSAL",
          "INTEREST_PAYOUT_SWEEP",
          "INTEREST_PAYOUT_SWEEP_REVERSAL",
          "INTERNATIONAL_WIRE_INCOMING_SWEEP",
          "INTERNATIONAL_WIRE_INCOMING_SWEEP_REVERSAL",
          "INTERNATIONAL_WIRE_OUTGOING_RETURN_SWEEP",
          "INTERNATIONAL_WIRE_OUTGOING_RETURN_SWEEP_REVERSAL",
          "INTERNATIONAL_WIRE_OUTGOING_SWEEP",
          "INTERNATIONAL_WIRE_OUTGOING_SWEEP_REVERSAL",
          "INVOICE",
          "INVOICE_REVERSAL",
          "IN_STORE_CASH_DEPOSIT_SWEEP",
          "IN_STORE_CASH_DEPOSIT_SWEEP_REVERSAL",
          "JIT_FUND",
          "JIT_FUND_REVERSAL",
          "LOAN_DISBURSEMENT",
          "LOAN_DISBURSEMENT_REVERSAL",
          "LOAN_FUNDING",
          "LOAN_FUNDING_REVERSAL",
          "LOC_USAGE",
          "LOC_USAGE_REVERSAL",
          "MANUAL_ADJUSTMENT",
          "MANUAL_ADJUSTMENT_REVERSAL",
          "MANUAL_ADJUSTMENT_SWEEP",
          "MANUAL_ADJUSTMENT_SWEEP_REVERSAL",
          "MANUAL_AFT_SWEEP",
          "MANUAL_AFT_SWEEP_REVERSAL",
          "MANUAL_CARD_SWEEP",
          "MANUAL_CARD_SWEEP_REVERSAL",
          "MANUAL_CASH_DEPOSIT_SWEEP",
          "MANUAL_CASH_DEPOSIT_SWEEP_REVERSAL",
          "MANUAL_CASH_ORDER_SWEEP",
          "MANUAL_CASH_ORDER_SWEEP_REVERSAL",
          "MANUAL_CHECK_ISSUANCE",
          "MANUAL_CHECK_ISSUANCE_REVERSAL",
          "MANUAL_CHECK_SWEEP",
          "MANUAL_CHECK_SWEEP_REVERSAL",
          "MANUAL_OCT_SWEEP",
          "MANUAL_OCT_SWEEP_REVERSAL",
          "MANUAL_WIRE_SWEEP",
          "MANUAL_WIRE_SWEEP_REVERSAL",
          "MASTERCARD_GROSS_SWEEP",
          "MASTERCARD_GROSS_SWEEP_REVERSAL",
          "MASTERCARD_INTERCHANGE_SWEEP",
          "MASTERCARD_INTERCHANGE_SWEEP_REVERSAL",
          "MASTERCARD_NET_SWEEP",
          "MASTERCARD_NET_SWEEP_REVERSAL",
          "MOBILE_DEPOSIT_RETURN_SWEEP",
          "MOBILE_DEPOSIT_RETURN_SWEEP_REVERSAL",
          "MOBILE_DEPOSIT_SWEEP",
          "MOBILE_DEPOSIT_SWEEP_REVERSAL",
          "NEGATIVE_BALANCE_DRAW",
          "NEGATIVE_BALANCE_DRAW_REVERSAL",
          "NEGATIVE_BALANCE_REPAYMENT",
          "NEGATIVE_BALANCE_REPAYMENT_REVERSAL",
          "NEGATIVE_BALANCE_RESERVE",
          "NEGATIVE_BALANCE_RESERVE_REVERSAL",
          "NEGATIVE_BALANCE_WRITEOFF",
          "NEGATIVE_BALANCE_WRITEOFF_REVERSAL",
          "NETWORK_ADJUSTMENT_SWEEP",
          "NETWORK_ADJUSTMENT_SWEEP_REVERSAL",
          "NETWORK_CHARGEBACK_SWEEP",
          "NETWORK_CHARGEBACK_SWEEP_REVERSAL",
          "OUTGOING_INTERNATIONAL_REMITTANCE",
          "OUTGOING_INTERNATIONAL_REMITTANCE_REVERSAL",
          "OVERDUE_CARD_WRITEOFF",
          "OVERDUE_CARD_WRITEOFF_REVERSAL",
          "PEER_TO_PEER",
          "PEER_TO_PEER_REVERSAL",
          "PROGRAM_DECREASE",
          "PROGRAM_DECREASE_REVERSAL",
          "PROGRAM_EXPANSION",
          "PROGRAM_EXPANSION_REVERSAL",
          "PROMOTIONAL_CREDIT",
          "PROMOTIONAL_CREDIT_REVERSAL",
          "PROMOTIONAL_CREDIT_SWEEP",
          "PROMOTIONAL_CREDIT_SWEEP_REVERSAL",
          "PULSE_GROSS_SWEEP",
          "PULSE_GROSS_SWEEP_REVERSAL",
          "PULSE_INTERCHANGE_SWEEP",
          "PULSE_INTERCHANGE_SWEEP_REVERSAL",
          "REPAYMENT",
          "REPAYMENT_REVERSAL",
          "SECURITY_ACCOUNT_PAYMENT",
          "SECURITY_ACCOUNT_PAYMENT_REVERSAL",
          "SECURITY_OVERPAY_ADJUSTMENT",
          "SECURITY_OVERPAY_ADJUSTMENT_REVERSAL",
          "SIGN_UP_BONUS",
          "SIGN_UP_BONUS_REVERSAL",
          "SUBSCRIPTION_FEE",
          "SUBSCRIPTION_FEE_REVERSAL",
          "TRANSFER_FEE",
          "TRANSFER_FEE_REVERSAL",
          "TRANSFER_FEE_REVERSAL_REVERSAL",
          "VISA_GROSS_SWEEP",
          "VISA_GROSS_SWEEP_REVERSAL",
          "VISA_INTERCHANGE_SWEEP",
          "VISA_INTERCHANGE_SWEEP_REVERSAL",
          "VISA_NET_SWEEP",
          "VISA_NET_SWEEP_REVERSAL"
        ],
        "type": "string"
      },
      "inventory_details": {
        "properties": {
          "commodity_code": {
            "example": "COM123",
            "type": "string"
          },
          "description": {
            "example": "Item description",
            "type": "string"
          },
          "discount_amount": {
            "example": "5.00",
            "type": "string"
          },
          "item_detail_taxes": {
            "items": {
              "$ref": "#/components/schemas/item_detail_taxes"
            },
            "type": "array"
          },
          "item_discount_amount": {
            "example": 500,
            "type": "integer"
          },
          "item_discount_amount_indicator": {
            "example": "D",
            "type": "string"
          },
          "item_discount_applied_indicator": {
            "example": "true",
            "type": "string"
          },
          "item_discount_rate": {
            "example": 10,
            "type": "integer"
          },
          "item_extended_amount": {
            "example": 1000,
            "type": "integer"
          },
          "item_extended_amount_indicator": {
            "example": "E",
            "type": "string"
          },
          "item_total_amount": {
            "example": 1500,
            "type": "integer"
          },
          "item_total_amount_indicator": {
            "example": "T",
            "type": "string"
          },
          "item_vat_amount": {
            "example": 200,
            "type": "integer"
          },
          "item_vat_rate": {
            "example": 20,
            "type": "integer"
          },
          "product_code": {
            "example": "PROD123",
            "type": "string"
          },
          "quantity": {
            "example": 10,
            "format": "float",
            "type": "number"
          },
          "total_amount": {
            "example": "1500.00",
            "type": "string"
          },
          "unit_of_measure": {
            "example": "Piece",
            "type": "string"
          },
          "unit_price": {
            "example": 100,
            "type": "integer"
          },
          "vat_tax_amount": {
            "example": "200.00",
            "type": "string"
          },
          "vat_tax_rate": {
            "example": "0.20",
            "type": "string"
          }
        },
        "type": "object"
      },
      "item_detail_taxes": {
        "properties": {
          "detail_tax_amount": {
            "example": 1,
            "format": "int64",
            "type": "integer"
          },
          "detail_tax_amount_inclusion_indicator": {
            "example": "Included",
            "type": "string"
          },
          "detail_tax_amount_indicator": {
            "example": "D",
            "type": "string"
          },
          "detail_tax_rate": {
            "example": 1,
            "format": "int64",
            "type": "integer"
          },
          "detail_tax_type_applied": {
            "example": "VAT",
            "type": "string"
          },
          "detail_tax_type_identifier": {
            "example": "VAT123",
            "type": "string"
          }
        },
        "type": "object"
      },
      "l2l3_enabled": {
        "default": false,
        "description": "Enable/Disable l2l3 transaction - L2l3 transaction are disabled by default.\n",
        "type": "boolean"
      },
      "l2l3_model": {
        "properties": {
          "enhanced_data_id": {
            "example": "ED123456",
            "type": "string"
          },
          "financial": {
            "$ref": "#/components/schemas/financial"
          },
          "fleet_emv": {
            "$ref": "#/components/schemas/fleets_emv"
          },
          "fleets": {
            "$ref": "#/components/schemas/fleets"
          },
          "inventory_details": {
            "items": {
              "$ref": "#/components/schemas/inventory_details"
            },
            "type": "array"
          },
          "original_transaction_id": {
            "description": "Value of the `transaction.token` returned in the simulated clearing response.",
            "type": "string"
          },
          "purchase_order": {
            "example": "PO987654",
            "type": "string"
          }
        },
        "required": [
          "original_transaction_id"
        ],
        "type": "object"
      },
      "line_of_credit_statement": {
        "allOf": [
          {
            "properties": {
              "credit_summary": {
                "$ref": "#/components/schemas/credit_summary"
              }
            },
            "required": [
              "credit_summary"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/base_statement"
          }
        ],
        "description": "A statement for a line of credit account",
        "title": "Line of Credit Statement"
      },
      "lookup_3ds_request": {
        "discriminator": {
          "mapping": {
            "BROWSER": "#/components/schemas/lookup_3ds_request_browser",
            "SDK": "#/components/schemas/lookup_3ds_request_sdk"
          },
          "propertyName": "device_channel"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/lookup_3ds_request_browser"
          },
          {
            "$ref": "#/components/schemas/lookup_3ds_request_sdk"
          }
        ],
        "type": "object"
      },
      "lookup_3ds_request_base": {
        "description": "Details for an External Card Transfer 3-D Secure Authentication lookup request",
        "properties": {
          "authentication_indicator": {
            "enum": [
              "INSTALLMENT",
              "PAYMENT",
              "RECURRING"
            ],
            "type": "string"
          },
          "device_channel": {
            "description": "Channel through which Device Data Collection was performed\n\nChannel | Description\n--- | ---\n`BROWSER` | Internet browser\n`SDK` | Mobile app\n",
            "enum": [
              "BROWSER",
              "SDK"
            ],
            "example": "BROWSER",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the 3DS authentication",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "transaction_mode": {
            "enum": [
              "COMPUTER_DEVICE",
              "MOBILE_DEVICE",
              "TABLET_DEVICE"
            ],
            "type": "string"
          }
        },
        "required": [
          "authentication_indicator",
          "device_channel",
          "id",
          "transaction_mode"
        ],
        "type": "object"
      },
      "lookup_3ds_request_browser": {
        "allOf": [
          {
            "properties": {
              "device_details": {
                "$ref": "#/components/schemas/device_details"
              }
            },
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/lookup_3ds_request_base"
          }
        ],
        "type": "object"
      },
      "lookup_3ds_request_sdk": {
        "allOf": [
          {
            "$ref": "#/components/schemas/lookup_3ds_request_base"
          }
        ],
        "type": "object"
      },
      "lookup_3ds_response": {
        "description": "Details for an External Card Transfer 3-D Secure Authentication lookup response",
        "properties": {
          "challenge_payload": {
            "description": "3DS challenge payload, returned if challenge is required",
            "type": "string"
          },
          "challenge_url": {
            "description": "3DS challenge URL, returned if challenge is required",
            "format": "uri",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the 3DS authentication",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "processor_transaction_id": {
            "description": "Processor Transaction ID, returned if challenge is required",
            "type": "string"
          },
          "status": {
            "description": "Status of the 3DS authentication",
            "enum": [
              "CHALLENGE_REQUIRED",
              "FAILED",
              "NOT_ENROLLED",
              "SUCCESS",
              "UNKNOWN"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "status"
        ],
        "type": "object"
      },
      "managed_by_types": {
        "description": "The type of resource manager",
        "enum": [
          "BANK",
          "FINTECH",
          "PLATFORM"
        ],
        "type": "string"
      },
      "manual_entry": {
        "properties": {
          "address_verification": {
            "$ref": "#/components/schemas/digital_wallet_token_address_verification"
          },
          "enabled": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "merchant": {
        "description": "Merchant descriptor information that will be shown on statement and transaction details. If not provided, FinTech information will be used.",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/address"
          },
          "email": {
            "description": "Merchant's email",
            "example": "alice@example.com",
            "type": "string"
          },
          "name": {
            "description": "Merchant's name",
            "type": "string"
          },
          "phone_number": {
            "description": "Merchant's phone number with country code in E.164 format. Must have a valid country code. Area code and local phone number are not validated.",
            "example": "+14374570680",
            "pattern": "^\\+[1-9]\\d{1,14}$",
            "type": "string"
          }
        },
        "required": [
          "address",
          "name"
        ],
        "type": "object"
      },
      "merchant_category_codes": {
        "description": "merchant category codes for spend control",
        "items": {
          "description": "specify a specific MCC or a range of MCCs using a dash (-)",
          "example": "5600–5699",
          "pattern": "^\\d{4}(-\\d{4})?$",
          "type": "string"
        },
        "maxItems": 10,
        "type": "array"
      },
      "metadata": {
        "description": "Optional field to store additional information about the resource. Intended to be used by the integrator to store non-sensitive data.\n",
        "type": "object"
      },
      "network_fee_model": {
        "example": {
          "amount": 123,
          "credit_debit": "C",
          "type": "ISSUER_FEE"
        },
        "properties": {
          "amount": {
            "description": "The amount of the fee in the smallest whole denomination of the applicable currency (eg. For USD use cents)",
            "type": "integer"
          },
          "credit_debit": {
            "description": "C = credit; D = debit",
            "enum": [
              "C",
              "D"
            ],
            "type": "string"
          },
          "type": {
            "enum": [
              "ACQUIRER_FEE",
              "CROSS_BORDER_ISSUER_FEE",
              "CUR_CONV_CARDHOLDER_FEE",
              "CUR_CONV_ISSUER_FEE",
              "INTERCHANGE_FEE",
              "ISSUER_FEE",
              "PINDEBIT_ASSOC_FEE",
              "SWITCH_FEE"
            ],
            "type": "string"
          }
        },
        "required": [
          "amount",
          "type"
        ],
        "type": "object"
      },
      "non_fuel_item_details": {
        "properties": {
          "description": {
            "example": "Item description",
            "type": "string"
          },
          "product_code": {
            "example": "PC001",
            "type": "string"
          },
          "quantity": {
            "example": 10,
            "format": "int64",
            "type": "integer"
          },
          "unit_of_measure": {
            "example": "Units",
            "type": "string"
          },
          "unit_price": {
            "example": 15,
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "notification_language": {
        "description": "Specifies the language for 3D Secure and digital wallet token notifications sent to cardholders.\nBy default, notifications are sent in English.\nLimited list of ISO 639-3 languages codes are supported.",
        "enum": [
          "ces",
          "deu",
          "ell",
          "eng",
          "fra",
          "ita",
          "nld",
          "pol",
          "por",
          "ron",
          "spa"
        ],
        "type": "string"
      },
      "original_credit_request_model": {
        "properties": {
          "amount": {
            "description": "The amount of the transaction in the smallest whole denomination of the applicable currency (eg. For USD use cents)",
            "type": "integer"
          },
          "card_acceptor": {
            "$ref": "#/components/schemas/card_acceptor_model"
          },
          "card_id": {
            "format": "uuid",
            "type": "string"
          },
          "mid": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "screening_score": {
            "type": "string"
          },
          "sender_data": {
            "$ref": "#/components/schemas/original_credit_sender_data"
          },
          "transactionPurpose": {
            "type": "string"
          },
          "type": {
            "enum": [
              "account_to_account",
              "bill_payment",
              "business_to_business",
              "card_bill_payment",
              "cash_claim",
              "cash_in",
              "cash_out",
              "disbursement",
              "face_to_face_merchant_payment",
              "gambling_payout",
              "government_disbursement",
              "government_payment",
              "loyalty",
              "merchant_disbursement",
              "mobile_air_time_payment",
              "money_transfer_by_bank",
              "money_transfer_by_merchant",
              "online_gambling_payout",
              "payments_goods_services",
              "pension_disbursement",
              "person_to_person",
              "prepaid",
              "prepaid_loads",
              "wallet_transfer"
            ],
            "type": "string"
          }
        },
        "required": [
          "amount",
          "card_id",
          "mid",
          "type"
        ],
        "type": "object"
      },
      "original_credit_sender_data": {
        "properties": {
          "funding_source": {
            "enum": [
              "cash",
              "credit",
              "debit",
              "deposit_account",
              "mobile_money_payment",
              "non_visa_credit",
              "prepaid"
            ],
            "type": "string"
          },
          "sender_account_number": {
            "type": "string"
          },
          "sender_account_type": {
            "enum": [
              "bank_account_number_and_identification_code",
              "card_account",
              "email",
              "iban",
              "other",
              "phone_number",
              "rtn_bank_account",
              "social_network_id",
              "wallet_id"
            ],
            "type": "string"
          },
          "sender_address": {
            "type": "string"
          },
          "sender_city": {
            "type": "string"
          },
          "sender_country": {
            "type": "string"
          },
          "sender_name": {
            "type": "string"
          },
          "sender_reference_number": {
            "type": "string"
          },
          "sender_state": {
            "type": "string"
          },
          "transaction_purpose": {
            "enum": [
              "crypto_currency",
              "education",
              "emergency_need",
              "family_support",
              "gifts",
              "labor_transfers",
              "lending",
              "medical_treatment",
              "other",
              "salary",
              "savings",
              "travel"
            ],
            "type": "string"
          },
          "unique_transaction_reference_number": {
            "maxLength": 17,
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "funding_source"
        ],
        "type": "object"
      },
      "paginated_response": {
        "properties": {
          "next_page_token": {
            "description": "If returned, use the next_page_token to query for the next page of results. Not returned if there are no more rows.",
            "example": "a8937a0d",
            "type": "string"
          }
        },
        "title": "Paginated List response",
        "type": "object"
      },
      "paginated_transactions": {
        "properties": {
          "next_page_token": {
            "description": "If returned, use the value of `next_page_token` in the `page_token` query parameter to query for the next page of results. This will be `null` if there are no more pages.",
            "nullable": true,
            "type": "string"
          },
          "transactions": {
            "description": "List of transactions",
            "items": {
              "$ref": "#/components/schemas/transaction1"
            },
            "type": "array"
          }
        },
        "required": [
          "next_page_token",
          "transactions"
        ],
        "title": "Paginated Transactions Response",
        "type": "object"
      },
      "payment_account_reference": {
        "description": "A unique identifier associated with a specific cardholder PAN and its affiliated tokens",
        "maxLength": 29,
        "minLength": 29,
        "type": "string"
      },
      "payment_rail": {
        "description": "A short string representing the payment rail of the dispute.\n",
        "enum": [
          "ACH",
          "CARD",
          "EXTERNAL_CARD"
        ],
        "type": "string"
      },
      "payment_sub_type": {
        "enum": [
          "ACH.INCOMING_CREDIT",
          "ACH.INCOMING_DEBIT",
          "ACH.OUTGOING_CREDIT",
          "ACH.OUTGOING_DEBIT",
          "CARD.ATM_WITHDRAWAL",
          "CARD.POS_CASHBACK",
          "SYNCTERA_PAY.INCOMING_INTERAC_AUTODEPOSIT",
          "SYNCTERA_PAY.OUTGOING_BILL_PAYMENT",
          "SYNCTERA_PAY.OUTGOING_INTERAC_E_TRANSFER"
        ],
        "type": "string"
      },
      "payment_sub_type_list": {
        "description": "A list of payment sub-types to which a spend control will apply, if set. If not set or the array is empty, then the spend control will apply to all sub-types.",
        "items": {
          "$ref": "#/components/schemas/payment_sub_type"
        },
        "type": "array"
      },
      "payment_type": {
        "description": "The type of payment to which a spend control applies.\nIf this is not set, the spend control applies to all spending, regardless of payment type.\n",
        "enum": [
          "ACH",
          "CARD",
          "CASH",
          "CHECK",
          "EFT_CA",
          "EXTERNAL_CARD",
          "INTERNAL_TRANSFER",
          "SYNCTERA_PAY",
          "WIRE"
        ],
        "type": "string"
      },
      "payment_type_list": {
        "description": "A list of payment types to which a spend control will apply, if set. If not set or the array is empty, then the spend control will apply to all types of payments.",
        "items": {
          "$ref": "#/components/schemas/payment_type"
        },
        "type": "array"
      },
      "person": {
        "properties": {
          "creation_time": {
            "format": "date-time",
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "last_updated_time": {
            "format": "date-time",
            "type": "string"
          },
          "middle_name": {
            "type": "string"
          },
          "relationship_type": {
            "type": "string"
          }
        },
        "title": "Person",
        "type": "object"
      },
      "phone_number": {
        "description": "The phone number of the recipient",
        "example": "+14374570680",
        "pattern": "^\\+[1-9]\\d{1,14}$",
        "type": "string"
      },
      "physical_card": {
        "allOf": [
          {
            "$ref": "#/components/schemas/base_card"
          },
          {
            "properties": {
              "bulk_order_config_id": {
                "description": "The ID of the bulk order config which should be used for shipping this card as part of a bulk order.\nRefer to Bulk Issuance for details on ordering cards in bulk.\n",
                "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
                "format": "uuid",
                "type": "string"
              },
              "card_image_id": {
                "description": "The ID of the custom card image used for this card",
                "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
                "format": "uuid",
                "type": "string"
              },
              "shipping": {
                "$ref": "#/components/schemas/shipping"
              }
            },
            "type": "object"
          }
        ],
        "description": "Details pertaining to issuing a new physical card",
        "title": "Physical Card"
      },
      "physical_card_format": {
        "description": "The format of a physical card product",
        "enum": [
          "CHIP",
          "CONTACTLESS",
          "MAGNETIC_STRIPE",
          "PHYSICAL_COMBO"
        ],
        "type": "string"
      },
      "physical_card_plus_status": {
        "allOf": [
          {
            "$ref": "#/components/schemas/physical_card"
          },
          {
            "$ref": "#/components/schemas/physical_debit_card_response_status"
          }
        ]
      },
      "physical_credit_card_issuance_request": {
        "allOf": [
          {
            "$ref": "#/components/schemas/physical_card"
          },
          {
            "required": [
              "account_id",
              "card_product_id",
              "form"
            ],
            "type": "object"
          }
        ],
        "example": {
          "account_id": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "card_product_id": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "customer_id": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "form": "PHYSICAL"
        }
      },
      "physical_credit_card_response": {
        "allOf": [
          {
            "$ref": "#/components/schemas/physical_card_plus_status"
          },
          {
            "properties": {
              "bin": {
                "description": "The bin number",
                "type": "string"
              },
              "card_brand": {
                "$ref": "#/components/schemas/card_brand"
              },
              "physical_card_format": {
                "$ref": "#/components/schemas/physical_card_format"
              }
            },
            "required": [
              "account_id",
              "card_brand",
              "card_product_id",
              "creation_time",
              "emboss_name",
              "form",
              "id",
              "physical_card_format",
              "shipping"
            ],
            "type": "object"
          }
        ]
      },
      "physical_debit_card_issuance_request": {
        "allOf": [
          {
            "$ref": "#/components/schemas/physical_card"
          },
          {
            "required": [
              "account_id",
              "card_product_id",
              "form"
            ],
            "type": "object"
          }
        ],
        "example": {
          "account_id": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "card_product_id": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "customer_id": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "form": "PHYSICAL"
        }
      },
      "physical_debit_card_response": {
        "allOf": [
          {
            "$ref": "#/components/schemas/physical_card_plus_status"
          },
          {
            "properties": {
              "bin": {
                "description": "The bin number",
                "type": "string"
              },
              "card_brand": {
                "$ref": "#/components/schemas/card_brand"
              },
              "physical_card_format": {
                "$ref": "#/components/schemas/physical_card_format"
              }
            },
            "required": [
              "account_id",
              "card_brand",
              "card_product_id",
              "creation_time",
              "emboss_name",
              "form",
              "id",
              "physical_card_format",
              "shipping"
            ],
            "type": "object"
          }
        ]
      },
      "physical_debit_card_response_status": {
        "allOf": [
          {
            "$ref": "#/components/schemas/card_status_object"
          },
          {
            "properties": {
              "card_fulfillment_status": {
                "$ref": "#/components/schemas/card_fulfillment_status"
              },
              "fulfillment_details": {
                "$ref": "#/components/schemas/fulfillment_details"
              }
            },
            "required": [
              "card_fulfillment_status",
              "card_status",
              "status_reason"
            ],
            "type": "object"
          }
        ]
      },
      "pin_issuance_policy": {
        "description": "Issuance for physical cards with respect to the PIN being set.\n\nPolicy              | Description\n------------------- | -----------\nNOT_REQUIRED        | Cards may be fulfilled as soon as possible whether or not a PIN has been set (default).\nREQUIRED            | On creation, cards will be PENDING and will not be fulfilled until a PIN has been set.\nRANDOM              | Cards may be fulfilled as soon as possible with a random PIN.\n",
        "enum": [
          "NOT_REQUIRED",
          "RANDOM",
          "REQUIRED"
        ],
        "type": "string"
      },
      "provisioning_app_version": {
        "description": "Version of the application making the provisioning request.",
        "maxLength": 50,
        "type": "string"
      },
      "provisioning_controls": {
        "properties": {
          "in_app_provisioning": {
            "$ref": "#/components/schemas/in_app_provisioning"
          },
          "manual_entry": {
            "$ref": "#/components/schemas/manual_entry"
          },
          "wallet_provider_card_on_file": {
            "$ref": "#/components/schemas/wallet_provider_card_on_file"
          },
          "web_push_provisioning": {
            "$ref": "#/components/schemas/web_push_provisioning"
          }
        },
        "type": "object"
      },
      "pull_details": {
        "description": "Additional PULL transfer details",
        "properties": {
          "country": {
            "$ref": "#/components/schemas/country_code"
          },
          "currency": {
            "$ref": "#/components/schemas/currency_code"
          },
          "network": {
            "description": "Payment network",
            "type": "string"
          },
          "product_type": {
            "$ref": "#/components/schemas/external_card_product_type"
          },
          "regulated": {
            "description": "Exemption status from debit card interchange fee standards",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "purpose": {
        "description": "Purpose or cause of this adverse action notice.",
        "enum": [
          "ACCOUNT_CLOSURE",
          "ACCOUNT_OPENING",
          "APR_INCREASE",
          "LINE_DECREASE",
          "OTHER"
        ],
        "type": "string"
      },
      "push_details": {
        "description": "Additional PUSH transfer details",
        "properties": {
          "country": {
            "$ref": "#/components/schemas/country_code"
          },
          "currency": {
            "$ref": "#/components/schemas/currency_code"
          },
          "funds_availability": {
            "$ref": "#/components/schemas/external_cards_funds_availability"
          },
          "network": {
            "description": "Payment network",
            "type": "string"
          },
          "product_type": {
            "$ref": "#/components/schemas/external_card_product_type"
          },
          "regulated": {
            "description": "Exemption status from debit card interchange fee standards",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "push_tokenize_request_data": {
        "properties": {
          "display_name": {
            "type": "string"
          },
          "last_digits": {
            "type": "string"
          },
          "network": {
            "example": "mastercard",
            "type": "string"
          },
          "opaque_payment_card": {
            "type": "string"
          },
          "token_service_provider": {
            "type": "string"
          },
          "user_address": {
            "$ref": "#/components/schemas/address"
          }
        },
        "type": "object"
      },
      "reason": {
        "description": "Reason provided to customers when adverse action is taken.",
        "example": "Too many inquiries or insufficient credit history",
        "type": "string"
      },
      "recipient_name": {
        "properties": {
          "first_name": {
            "example": "Jane",
            "maxLength": 30,
            "type": "string"
          },
          "last_name": {
            "example": "Smith",
            "maxLength": 30,
            "type": "string"
          },
          "middle_name": {
            "example": "Anne",
            "maxLength": 30,
            "type": "string"
          }
        },
        "required": [
          "first_name",
          "last_name"
        ],
        "type": "object"
      },
      "related_resource_type": {
        "description": "The type of the resource related to this adverse action notice.",
        "enum": [
          "ACCOUNT",
          "BUSINESS",
          "CUSTOMER"
        ],
        "type": "string"
      },
      "response_history_item": {
        "description": "Response history object of the webhook request",
        "properties": {
          "code": {
            "description": "Response code from the request",
            "type": "integer"
          },
          "response_body": {
            "description": "Response body from the request(Length more than 1024 will be trimmed)",
            "type": "string"
          },
          "response_time": {
            "description": "Timestamp that the response is received",
            "format": "date-time",
            "type": "string"
          },
          "sent_time": {
            "description": "Timestamp that the request is sent",
            "format": "date-time",
            "type": "string"
          }
        },
        "title": "Response history",
        "type": "object"
      },
      "restricted_application": {
        "properties": {
          "application_details": {
            "$ref": "#/components/schemas/restricted_application_details"
          },
          "business_id": {
            "description": "Business ID for the application. An application must have either a Business or a customer associated with it.",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "customer_id": {
            "description": "Customer ID for the application. An application must have either a Business or a customer associated with it.",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "description": {
            "description": "A description of the restricted account application",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/restricted_application_status"
          },
          "type": {
            "$ref": "#/components/schemas/application_type"
          }
        },
        "required": [
          "application_details",
          "status",
          "type"
        ],
        "title": "Restricted account application details",
        "type": "object"
      },
      "restricted_application_details": {
        "description": "Details about the restricted account application",
        "properties": {
          "sections": {
            "description": "Section of the application",
            "items": {
              "$ref": "#/components/schemas/restricted_application_section"
            },
            "type": "array"
          }
        },
        "required": [
          "sections"
        ],
        "type": "object"
      },
      "restricted_application_document": {
        "description": "Document within an application page",
        "properties": {
          "description": {
            "description": "File description",
            "type": "string"
          },
          "document_id": {
            "description": "ID of the document within the Synctera platform",
            "format": "UUID",
            "type": "string"
          },
          "fintech_item_id": {
            "description": "Client supplied item id",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/restricted_application_item_type"
          }
        },
        "required": [
          "description",
          "document_id",
          "type"
        ],
        "type": "object"
      },
      "restricted_application_item": {
        "discriminator": {
          "mapping": {
            "DOCUMENT": "#/components/schemas/restricted_application_document",
            "QUESTION": "#/components/schemas/restricted_application_question"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/restricted_application_question"
          },
          {
            "$ref": "#/components/schemas/restricted_application_document"
          }
        ]
      },
      "restricted_application_item_type": {
        "description": "Type of Item of a restricted account application",
        "enum": [
          "DOCUMENT",
          "QUESTION"
        ],
        "title": "Type of Item of a restricted account application",
        "type": "string"
      },
      "restricted_application_page": {
        "description": "A page of items (questions and files) within a section",
        "properties": {
          "fintech_page_id": {
            "description": "Client supplied page id",
            "type": "string"
          },
          "items": {
            "description": "Items (questions and files) within the page",
            "items": {
              "$ref": "#/components/schemas/restricted_application_item"
            },
            "type": "array"
          },
          "title": {
            "description": "Page title",
            "type": "string"
          }
        },
        "required": [
          "items",
          "title"
        ],
        "type": "object"
      },
      "restricted_application_patch": {
        "properties": {
          "application_details": {
            "$ref": "#/components/schemas/restricted_application_details"
          },
          "description": {
            "description": "A description of the restricted account application",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/restricted_application_status"
          }
        },
        "title": "Restricted account application details",
        "type": "object"
      },
      "restricted_application_question": {
        "description": "Question and answer within an applications page",
        "properties": {
          "answer": {
            "description": "Responses to the question",
            "type": "string"
          },
          "fintech_item_id": {
            "description": "Client supplied item id",
            "type": "string"
          },
          "question": {
            "description": "Question for the applicant",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/restricted_application_item_type"
          }
        },
        "required": [
          "answer",
          "question",
          "type"
        ],
        "type": "object"
      },
      "restricted_application_response": {
        "allOf": [
          {
            "$ref": "#/components/schemas/restricted_application"
          },
          {
            "properties": {
              "creation_time": {
                "description": "Application creation timestamp in RFC3339 format",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "description": {
                "description": "A description of the restricted account application",
                "type": "string"
              },
              "id": {
                "description": "Generated ID for the application",
                "format": "uuid",
                "readOnly": true,
                "type": "string"
              },
              "last_updated_time": {
                "description": "Timestamp of the last application modification in RFC3339 format",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              }
            },
            "required": [
              "creation_time",
              "id",
              "last_updated_time"
            ]
          }
        ],
        "title": "Restricted account application details",
        "type": "object"
      },
      "restricted_application_section": {
        "description": "Section within the application",
        "properties": {
          "fintech_section_id": {
            "description": "Client supplied section ID",
            "type": "string"
          },
          "pages": {
            "description": "Pages within the section",
            "items": {
              "$ref": "#/components/schemas/restricted_application_page"
            },
            "type": "array"
          },
          "title": {
            "description": "Section title",
            "type": "string"
          }
        },
        "required": [
          "pages",
          "title"
        ],
        "type": "object"
      },
      "restricted_application_status": {
        "description": "Status of the restricted account application. APPROVED and DENIED are terminal status.\n",
        "enum": [
          "APPROVED",
          "DENIED",
          "IN_PROGRESS",
          "REVIEW_INFO_REQUESTED",
          "REVIEW_ON_SYNCTERA",
          "SUBMITTED"
        ],
        "title": "Restricted Account Application Status",
        "type": "string",
        "x-enumDescriptions": {
          "APPROVED": "application has been approved",
          "DENIED": "application has been denied",
          "IN_PROGRESS": "In process of filling out the application",
          "REVIEW_ON_SYNCTERA": "This triggers a case to review the application on Synctera",
          "SUBMITTED": "This is an enum for off platform review of an application"
        }
      },
      "reversal_model": {
        "example": {
          "amount": 80,
          "find_original_window_days": 6,
          "is_advice": false,
          "network_fees": [
            {
              "amount": 123,
              "credit_debit": "C",
              "type": "ISSUER_FEE"
            },
            {
              "amount": 123,
              "credit_debit": "C",
              "type": "ISSUER_FEE"
            }
          ],
          "original_transaction_id": "original_transaction_id"
        },
        "properties": {
          "amount": {
            "description": "The amount of the transaction in the smallest whole denomination of the applicable currency (eg. For USD use cents)",
            "type": "integer"
          },
          "find_original_window_days": {
            "format": "int32",
            "type": "integer"
          },
          "is_advice": {
            "default": false,
            "type": "boolean"
          },
          "network_fees": {
            "items": {
              "$ref": "#/components/schemas/network_fee_model"
            },
            "type": "array"
          },
          "original_transaction_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "amount",
          "original_transaction_id"
        ],
        "type": "object"
      },
      "reward_base": {
        "properties": {
          "account_id": {
            "description": "The ID of the business or customer account being charged the reward.",
            "example": "12943c51-e4ff-4e57-9558-08cab6b96364",
            "format": "uuid",
            "type": "string"
          },
          "amount": {
            "description": "The amount of the reward in ISO 4217 minor currency units, e.g. cents.\nThe internal account referenced by the reward template will be debited this amount.\nDefaults to the value in the reward template.\n",
            "example": 1000,
            "type": "integer"
          },
          "metadata": {
            "$ref": "#/components/schemas/metadata"
          },
          "note": {
            "description": "An optional note for this instance of the reward.",
            "example": "Reduced account reward based on phone call with customer",
            "type": "string"
          },
          "template_id": {
            "description": "The ID of the reward template to use to create the reward.\nValues from the reward template will be used as defaults for the reward.\nNote that the reward template may have been updated since the reward was created and\nthat such subsequent updates to the reward template do not affect existing rewards.\n",
            "example": "64943c51-e4ff-4e57-9558-08cab6b96352",
            "format": "uuid",
            "type": "string"
          }
        },
        "title": "Common properties for reward schemas",
        "type": "object"
      },
      "reward_list": {
        "allOf": [
          {
            "$ref": "#/components/schemas/paginated_response"
          },
          {
            "properties": {
              "rewards": {
                "description": "Array of rewards",
                "items": {
                  "$ref": "#/components/schemas/reward_response"
                },
                "type": "array"
              }
            },
            "required": [
              "rewards"
            ],
            "type": "object"
          }
        ],
        "title": "List of rewards"
      },
      "reward_post": {
        "allOf": [
          {
            "$ref": "#/components/schemas/reward_base"
          },
          {}
        ],
        "required": [
          "account_id",
          "template_id"
        ],
        "title": "Reward creation object",
        "type": "object"
      },
      "reward_response": {
        "allOf": [
          {
            "$ref": "#/components/schemas/reward_base"
          },
          {
            "properties": {
              "creation_time": {
                "description": "The timestamp representing when the reward was created",
                "example": "2010-05-06T12:23:34.321Z",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "currency": {
                "description": "currency of the reward, as a three character ISO 4217 alphabetic currency code.",
                "example": "USD",
                "type": "string"
              },
              "description": {
                "description": "The description of the reward template.",
                "example": "Referral Reward",
                "type": "string"
              },
              "id": {
                "description": "The ID of the reward.",
                "example": "44943c51-e4ff-4e57-9558-08cab6b96321",
                "format": "uuid",
                "type": "string"
              },
              "internal_account_id": {
                "description": "The ID of internal_account that is the source of the reward transfer.",
                "example": "42943c51-e4ff-4e57-9558-08cab6b963c8",
                "format": "uuid",
                "type": "string"
              },
              "last_updated_time": {
                "description": "The timestamp representing when the reward was last updated",
                "example": "2010-05-06T12:23:34.321Z",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "subtype": {
                "$ref": "#/components/schemas/reward_subtype"
              },
              "tenant": {
                "$ref": "#/components/schemas/tenant_id"
              },
              "transaction_id": {
                "description": "The ID the resulting transaction resource.",
                "example": "11943c51-e4ff-4e57-9558-08cab6b96333",
                "format": "uuid",
                "type": "string"
              }
            }
          }
        ],
        "required": [
          "account_id",
          "amount",
          "creation_time",
          "currency",
          "description",
          "id",
          "internal_account_id",
          "last_updated_time",
          "subtype",
          "template_id",
          "tenant",
          "transaction_id"
        ],
        "title": "Reward response object",
        "type": "object"
      },
      "reward_reverse_post": {
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/metadata"
          },
          "note": {
            "description": "A note for the reward reversal.",
            "example": "Charge was made in error",
            "type": "string"
          }
        },
        "required": [
          "note"
        ],
        "title": "Reward reversal properties",
        "type": "object"
      },
      "reward_subtype": {
        "description": "A short string representing the sub-type of the reward.\nThis will be used as the subtype of the resulting transaction.\n",
        "enum": [
          "ACCOUNT_OPENING_BONUS",
          "ACCOUNT_OPENING_BONUS_REVERSAL",
          "CASHBACK",
          "CASHBACK_REVERSAL",
          "INTEREST_RATE_BONUS",
          "INTEREST_RATE_BONUS_REVERSAL",
          "LOAN_INTEREST_RATE_REDUCTION",
          "LOAN_INTEREST_RATE_REDUCTION_REVERSAL",
          "MANUAL_ADJUSTMENT",
          "MANUAL_ADJUSTMENT_REVERSAL",
          "MILES",
          "MILES_REVERSAL",
          "MISCELLANEOUS",
          "MISCELLANEOUS_REVERSAL",
          "POINTS",
          "POINTS_REVERSAL",
          "REFERRAL_BONUS",
          "REFERRAL_BONUS_REVERSAL"
        ],
        "type": "string"
      },
      "reward_subtype_post": {
        "description": "A short string representing the sub-type of the reward.\nThis will be used as the subtype of the resulting transaction.\n",
        "enum": [
          "ACCOUNT_OPENING_BONUS",
          "CASHBACK",
          "INTEREST_RATE_BONUS",
          "LOAN_INTEREST_RATE_REDUCTION",
          "MANUAL_ADJUSTMENT",
          "MILES",
          "MISCELLANEOUS",
          "POINTS",
          "REFERRAL_BONUS"
        ],
        "type": "string"
      },
      "reward_template_base": {
        "properties": {
          "amount": {
            "description": "The default amount of the reward in ISO 4217 minor currency units, e.g. cents.\nThe internal account will be debited this amount.\nCan be overridden when creating a reward.\n",
            "example": 1000,
            "type": "integer"
          },
          "currency": {
            "description": "currency for the reward, as a three character ISO 4217 alphabetic currency code.",
            "example": "USD",
            "type": "string"
          },
          "description": {
            "description": "The description of the reward template.",
            "example": "Referral Reward",
            "type": "string"
          },
          "internal_account_id": {
            "description": "The ID of default internal_account to use as the source of the reward transfer. Cannot be a system internal account.",
            "example": "42943c51-e4ff-4e57-9558-08cab6b963c8",
            "format": "uuid",
            "type": "string"
          },
          "is_enabled": {
            "description": "Whether the reward template is enabled.\nIf false, rewards cannot be created from this template.\n",
            "example": true,
            "type": "boolean"
          },
          "metadata": {
            "$ref": "#/components/schemas/metadata"
          }
        },
        "title": "Common properties for reward template schemas",
        "type": "object"
      },
      "reward_template_list": {
        "allOf": [
          {
            "properties": {
              "reward_templates": {
                "description": "Array of reward templates",
                "items": {
                  "$ref": "#/components/schemas/reward_template_response"
                },
                "type": "array"
              }
            },
            "required": [
              "reward_templates"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ],
        "title": "List of reward templates"
      },
      "reward_template_patch": {
        "allOf": [
          {
            "$ref": "#/components/schemas/reward_template_base"
          },
          {
            "properties": {
              "subtype": {
                "$ref": "#/components/schemas/reward_subtype_post"
              }
            }
          }
        ],
        "title": "reward template properties to update",
        "type": "object"
      },
      "reward_template_post": {
        "allOf": [
          {
            "$ref": "#/components/schemas/reward_template_base"
          },
          {
            "properties": {
              "subtype": {
                "$ref": "#/components/schemas/reward_subtype_post"
              }
            }
          }
        ],
        "required": [
          "currency",
          "description",
          "internal_account_id",
          "subtype"
        ],
        "title": "reward template creation object",
        "type": "object"
      },
      "reward_template_response": {
        "allOf": [
          {
            "$ref": "#/components/schemas/reward_template_base"
          },
          {
            "properties": {
              "creation_time": {
                "description": "The timestamp representing when the reward template was created",
                "example": "2010-05-06T12:23:34.321Z",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "id": {
                "description": "The ID of the reward template.",
                "example": "85943c51-e4ff-4e57-9558-08cab6b96364",
                "format": "uuid",
                "type": "string"
              },
              "last_updated_time": {
                "description": "The timestamp representing when the reward template was last modified",
                "example": "2010-05-06T12:23:34.321Z",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "subtype": {
                "$ref": "#/components/schemas/reward_subtype"
              },
              "tenant": {
                "$ref": "#/components/schemas/tenant_id"
              }
            }
          }
        ],
        "required": [
          "creation_time",
          "currency",
          "id",
          "internal_account_id",
          "is_enabled",
          "last_updated_time",
          "subtype",
          "tenant"
        ],
        "title": "reward template response object",
        "type": "object"
      },
      "reward_transaction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/base_transaction"
          },
          {
            "properties": {
              "reward_transaction": {
                "$ref": "#/components/schemas/reward_transaction_data"
              },
              "subtype": {
                "$ref": "#/components/schemas/reward_subtype"
              }
            },
            "required": [
              "reward_transaction",
              "subtype"
            ],
            "type": "object"
          }
        ]
      },
      "reward_transaction_data": {
        "description": "Transaction metadata specific to transactions with type `REWARD`",
        "properties": {
          "reward_id": {
            "description": "The Synctera reward id",
            "type": "string"
          },
          "template_id": {
            "description": "The Synctera reward template id",
            "type": "string"
          }
        },
        "type": "object"
      },
      "saving_summary": {
        "description": "A summary of the accrued interest for the saving account in the current period",
        "properties": {
          "accrual_days": {
            "description": "The number of days for which interest was accrued. In most cases this will match the number of days in the billing period, but may be less if an account was closed part way through the period.\n",
            "format": "int32",
            "type": "integer"
          },
          "apy": {
            "description": "The annual percentage yield (APY) for this statement period, in basis points. For example, an APY of 5.5% will display as 550.\n",
            "example": 550,
            "type": "integer"
          },
          "interest_earned": {
            "description": "The total interest earned by the depository account for this statement period in ISO 4217 minor currency units. For example, $1.50 USD of interest will be displayed as 150.\n",
            "example": 150,
            "format": "int64",
            "type": "integer"
          },
          "interest_earned_previous_month": {
            "description": "The total interest earned by the depository account in the previous statement period in ISO 4217 minor currency units. For example, $1.50 USD of interest will be displayed as 150.\n",
            "example": 150,
            "format": "int64",
            "type": "integer"
          },
          "interest_earned_previous_year": {
            "description": "The total interest earned by the depository account in the previous year in ISO 4217 minor currency units. For example, $100 USD of interest will be displayed as 10000.\n",
            "example": 10000,
            "format": "int64",
            "type": "integer"
          },
          "interest_earned_ytd": {
            "description": "The total interest earned by the depository account for this year to date in ISO 4217 minor currency units. For example, $100 USD of interest will be displayed as 10000.\n",
            "example": 10000,
            "format": "int64",
            "type": "integer"
          }
        },
        "title": "Saving Summary",
        "type": "object"
      },
      "security_account_summary": {
        "description": "A summary for the security account backing the credit account.",
        "properties": {
          "account_id": {
            "description": "The unique identifier of the backing account.",
            "format": "uuid",
            "type": "string"
          },
          "account_number": {
            "description": "Account number of the backing account.",
            "type": "string"
          },
          "account_type": {
            "description": "The type of the account. It refers to the backing account.\n",
            "type": "string"
          },
          "apy": {
            "description": "The annual percentage yield (APY) for the security account for this statement period, in basis points. For example, an APY of 5.5% will display as 550.\n",
            "example": 550,
            "format": "int64",
            "type": "integer"
          },
          "closing_balance": {
            "description": "The security account balance at the end of the statement period, in ISO 4217 minor currency units. For example, $1,000 USD will be displayed as 100000.",
            "example": 100000,
            "format": "int64",
            "type": "integer"
          },
          "disclosure": {
            "type": "string"
          },
          "interest": {
            "description": "The total interest earned by the security account for this statement period in ISO 4217 minor currency units. For example, $1.50 USD of interest will be displayed as 150.\n",
            "example": 150,
            "format": "int64",
            "type": "integer"
          },
          "interest_previous_month": {
            "description": "The total interest earned by the security account in the previous statement period in ISO 4217 minor currency units. For example, $1.50 USD of interest will be displayed as 150.\n",
            "example": 150,
            "format": "int64",
            "type": "integer"
          },
          "interest_previous_year": {
            "description": "The total interest earned by the security account in the previous year in ISO 4217 minor currency units. For example, $100 USD of interest will be displayed as 10000.\n",
            "example": 10000,
            "format": "int64",
            "type": "integer"
          },
          "interest_ytd": {
            "description": "The total interest earned by the security account for this year to date in ISO 4217 minor currency units. For example, $100 USD of interest will be displayed as 10000.\n",
            "example": 10000,
            "format": "int64",
            "type": "integer"
          },
          "opening_balance": {
            "description": "The security account balance at the start of the statement period, in ISO 4217 minor currency units. For example, $1,000 USD will be displayed as 100000.",
            "example": 100000,
            "format": "int64",
            "type": "integer"
          }
        },
        "title": "Security Account Summary",
        "type": "object"
      },
      "set_pin_request": {
        "properties": {
          "pin": {
            "description": "The new PIN for the card",
            "example": "1234",
            "type": "string"
          }
        },
        "required": [
          "pin"
        ],
        "type": "object"
      },
      "shipping": {
        "description": "Details about the shipping method. If supplied this will override the default shipping address of the customer or account.",
        "properties": {
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/address"
              }
            ],
            "description": "The address to which the card will be shipped - Defaults to account shipping address if none supplied"
          },
          "care_of_line": {
            "description": "The name of the person to send in care of",
            "type": "string"
          },
          "is_expedited_fulfillment": {
            "$ref": "#/components/schemas/expedited_fulfillment"
          },
          "method": {
            "$ref": "#/components/schemas/shipping_method"
          },
          "phone_number": {
            "$ref": "#/components/schemas/phone_number"
          },
          "recipient_name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/recipient_name"
              }
            ],
            "description": "The name of the recipient to whom the card will be shipped"
          }
        },
        "type": "object"
      },
      "shipping_method": {
        "description": "The shipping method.\n* `INTERNATIONAL_GROUND` is only available for addresses in Canada and Mexico.\n",
        "enum": [
          "INTERNATIONAL",
          "INTERNATIONAL_GROUND",
          "INTERNATIONAL_PRIORITY",
          "LOCAL_MAIL",
          "LOCAL_PRIORITY",
          "OVERNIGHT",
          "TWO_DAY"
        ],
        "example": "LOCAL_MAIL",
        "type": "string"
      },
      "simulate_card_fulfillment": {
        "properties": {
          "card_fulfillment_status": {
            "$ref": "#/components/schemas/card_fulfillment_status"
          }
        },
        "required": [
          "card_fulfillment_status"
        ],
        "type": "object"
      },
      "simulation_response_model": {
        "type": "object"
      },
      "source_of_score": {
        "description": "The source of the credit score",
        "enum": [
          "ACCOUNT_MANAGEMENT",
          "ACCOUNT_OPENING",
          "HARDSHIP",
          "LINE_INCREASE_REQUEST",
          "OTHER"
        ],
        "example": "ACCOUNT_OPENING",
        "type": "string"
      },
      "spend_control": {
        "properties": {
          "action_case": {
            "description": "If set, create a case for transactions that do not conform to the spend control",
            "type": "boolean"
          },
          "action_decline": {
            "description": "If set, decline transactions that do not conform to the spend control",
            "type": "boolean"
          },
          "amount_limit": {
            "description": "Monetary limit for the spend control in the smallest currency unit (eg cents)",
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "creation_time": {
            "description": "The timestamp representing when the spend control was created",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "direction": {
            "$ref": "#/components/schemas/spend_control_direction"
          },
          "id": {
            "description": "Spend Control ID",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_active": {
            "description": "Indicates if spend control is active",
            "example": true,
            "type": "boolean"
          },
          "last_modified_time": {
            "description": "The timestamp representing when the spend control was last modified",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "managed_by": {
            "$ref": "#/components/schemas/managed_by_types"
          },
          "merchant_category_codes": {
            "$ref": "#/components/schemas/merchant_category_codes"
          },
          "name": {
            "description": "Name assigned to spend control",
            "type": "string"
          },
          "payment_sub_types": {
            "$ref": "#/components/schemas/payment_sub_type_list"
          },
          "payment_types": {
            "$ref": "#/components/schemas/payment_type_list"
          },
          "time_range": {
            "$ref": "#/components/schemas/spend_control_time_range"
          }
        },
        "required": [
          "action_case",
          "action_decline",
          "amount_limit",
          "direction",
          "is_active",
          "name",
          "time_range"
        ],
        "title": "Spend Control",
        "type": "object"
      },
      "spend_control_creation_request": {
        "allOf": [
          {
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/spend_control"
          }
        ],
        "required": [
          "action_case",
          "action_decline",
          "amount_limit",
          "is_active",
          "name",
          "time_range"
        ]
      },
      "spend_control_direction": {
        "description": "The direction of funds flow to which a spend control applies. To limit the rate of funds flowing out of an\naccount, use DEBIT. To limit the rate of funds flowing in to an account, use CREDIT.\nIf this is not set, the spend control applies to debits (ie spending) only.\n",
        "enum": [
          "CREDITS",
          "DEBITS"
        ],
        "type": "string"
      },
      "spend_control_id": {
        "description": "The unique identifier of a spending control",
        "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
        "format": "uuid",
        "type": "string"
      },
      "spend_control_response": {
        "allOf": [
          {
            "$ref": "#/components/schemas/spend_control"
          },
          {
            "properties": {
              "number_of_related_accounts": {
                "description": "A count of how many accounts are using this spend control",
                "minimum": 0,
                "type": "integer"
              },
              "tenant": {
                "$ref": "#/components/schemas/tenant_id"
              }
            },
            "required": [
              "number_of_related_accounts",
              "tenant"
            ],
            "type": "object"
          }
        ],
        "required": [
          "action_case",
          "action_decline",
          "amount_limit",
          "creation_time",
          "id",
          "is_active",
          "last_modified_time",
          "name",
          "number_of_related_accounts",
          "time_range"
        ]
      },
      "spend_control_response_list": {
        "allOf": [
          {
            "properties": {
              "spend_controls": {
                "description": "Array of Spend Controls",
                "items": {
                  "$ref": "#/components/schemas/spend_control_response"
                },
                "type": "array"
              }
            },
            "required": [
              "spend_controls"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "spend_control_rolling_window_days": {
        "properties": {
          "days": {
            "description": "The number of days to define a rolling window for a spend control",
            "maximum": 31,
            "minimum": 1,
            "type": "integer"
          },
          "time_range_type": {
            "$ref": "#/components/schemas/spend_control_time_range_type"
          }
        },
        "required": [
          "days",
          "time_range_type"
        ]
      },
      "spend_control_single_transaction": {
        "properties": {
          "time_range_type": {
            "$ref": "#/components/schemas/spend_control_time_range_type"
          }
        },
        "required": [
          "time_range_type"
        ]
      },
      "spend_control_time_range": {
        "description": "The time range to which the spend control applies",
        "discriminator": {
          "mapping": {
            "ROLLING_WINDOW_DAYS": "#/components/schemas/spend_control_rolling_window_days",
            "SINGLE_TRANSACTION": "#/components/schemas/spend_control_single_transaction"
          },
          "propertyName": "time_range_type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/spend_control_single_transaction"
          },
          {
            "$ref": "#/components/schemas/spend_control_rolling_window_days"
          }
        ],
        "type": "object"
      },
      "spend_control_time_range_type": {
        "enum": [
          "ROLLING_WINDOW_DAYS",
          "SINGLE_TRANSACTION"
        ],
        "type": "string"
      },
      "spend_control_update_request": {
        "additionalProperties": false,
        "properties": {
          "action_case": {
            "description": "If set, create a case for transactions that do not conform to the spend control",
            "type": "boolean"
          },
          "action_decline": {
            "description": "If set, decline transactions that do not conform to the spend control",
            "type": "boolean"
          },
          "amount_limit": {
            "description": "Monetary limit for the spend control in the smallest currency unit (eg cents)",
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "direction": {
            "$ref": "#/components/schemas/spend_control_direction"
          },
          "is_active": {
            "description": "Indicates if spend control is active",
            "example": true,
            "type": "boolean"
          },
          "managed_by": {
            "$ref": "#/components/schemas/managed_by_types"
          },
          "merchant_category_codes": {
            "$ref": "#/components/schemas/merchant_category_codes"
          },
          "name": {
            "description": "Name assigned to spend control",
            "type": "string"
          },
          "payment_sub_types": {
            "$ref": "#/components/schemas/payment_sub_type_list"
          },
          "payment_types": {
            "$ref": "#/components/schemas/payment_type_list"
          },
          "time_range": {
            "$ref": "#/components/schemas/spend_control_time_range"
          }
        },
        "type": "object"
      },
      "start_date": {
        "description": "The date when the resource goes live",
        "example": "2010-05-06T12:23:34.321Z",
        "format": "date-time",
        "type": "string"
      },
      "statement": {
        "discriminator": {
          "mapping": {
            "CHARGE_SECURED": "#/components/schemas/charge_secured_statement",
            "CHARGE_UNSECURED": "#/components/schemas/charge_unsecured_statement",
            "DEPOSIT": "#/components/schemas/depository_statement",
            "LINE_OF_CREDIT": "#/components/schemas/line_of_credit_statement"
          },
          "propertyName": "statement_type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/depository_statement"
          },
          {
            "$ref": "#/components/schemas/line_of_credit_statement"
          },
          {
            "$ref": "#/components/schemas/charge_unsecured_statement"
          },
          {
            "$ref": "#/components/schemas/charge_secured_statement"
          }
        ],
        "title": "Statement"
      },
      "statement_list": {
        "allOf": [
          {
            "properties": {
              "statements": {
                "description": "Array of statements",
                "items": {
                  "$ref": "#/components/schemas/statement_summary"
                },
                "type": "array"
              }
            },
            "required": [
              "statements"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ],
        "title": "Statement List"
      },
      "statement_summary": {
        "properties": {
          "account_id": {
            "description": "The unique identifier of the account the statement belongs to",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "end_date": {
            "description": "The date indicating the ending of the time interval covered by the statement",
            "format": "date",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "description": "statement ID",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "issue_date": {
            "description": "The date when the statement has been issued",
            "format": "date",
            "readOnly": true,
            "type": "string"
          },
          "start_date": {
            "description": "The date indicating the beginning of the time interval covered by the statement",
            "format": "date",
            "readOnly": true,
            "type": "string"
          }
        },
        "title": "Statement",
        "type": "object"
      },
      "statement_type": {
        "description": "The type of statement",
        "enum": [
          "CHARGE_SECURED",
          "CHARGE_UNSECURED",
          "DEPOSIT",
          "LINE_OF_CREDIT"
        ],
        "title": "Statement Type",
        "type": "string",
        "x-enumDescriptions": {
          "CHARGE_SECURED": "Secured charge card account statement (e.g. for Smart Charge Cards)",
          "CHARGE_UNSECURED": "Unsecured charge card account statement (e.g. for Smart Charge Cards)",
          "DEPOSIT": "Deposit account statement (e.g. for CHECKING or SAVING accounts)",
          "LINE_OF_CREDIT": "Line of Credit account statement"
        }
      },
      "synctera_pay_base": {
        "description": "Outgoing Synctera Pay transfer",
        "properties": {
          "amount": {
            "description": "Transfer amount in cents",
            "example": 10000,
            "format": "int64",
            "minimum": 1,
            "type": "integer"
          },
          "configuration_id": {
            "description": "The ID of the Synctera Pay configuration that will be used to match the Synctera Pay transfer to the appropriate configuration. Only required if the transfer is not automatically matched to a configuration.\n",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "currency": {
            "description": "The currency of the transfer in ISO 4217 format",
            "example": "USD",
            "type": "string"
          },
          "dc_sign": {
            "description": "Debit or credit sign",
            "enum": [
              "CREDIT",
              "DEBIT"
            ],
            "example": "DEBIT",
            "type": "string"
          },
          "direction": {
            "$ref": "#/components/schemas/synctera_pay_direction"
          },
          "exchange_details": {
            "$ref": "#/components/schemas/exchange_details"
          },
          "final_external_account_id": {
            "description": "The ID of the final external account that will be the receiver of the Synctera Pay transfer. Required unless previously agreed with Synctera.\n",
            "format": "uuid",
            "type": "string"
          },
          "source_data": {
            "description": "Additional information to be added to the transfer",
            "type": "object"
          },
          "subtype": {
            "$ref": "#/components/schemas/synctera_pay_subtype"
          },
          "synctera_pay_network": {
            "description": "The network of the transfer.\n",
            "example": "WISE",
            "type": "string"
          },
          "synctera_pay_vendor_id": {
            "$ref": "#/components/schemas/synctera_pay_vendor_id"
          }
        },
        "required": [
          "amount",
          "currency",
          "dc_sign",
          "direction",
          "subtype",
          "synctera_pay_network"
        ],
        "title": "Outgoing Synctera Pay Transfer",
        "type": "object"
      },
      "synctera_pay_configuration": {
        "description": "A Synctera Pay configuration is a configuration that is used when creating an outgoing Synctera Pay transfer.\n",
        "properties": {
          "description": {
            "example": "This configuration is used for international remittance",
            "type": "string"
          },
          "details": {
            "$ref": "#/components/schemas/synctera_pay_configuration_details"
          },
          "enabled": {
            "description": "Whether or not the configuration is enabled. If the configuration is not enabled, it will not be used when creating a Synctera Pay transfer.\n",
            "type": "boolean"
          },
          "id": {
            "description": "The ID of the Synctera Pay configuration\n",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "example": "International Remittance",
            "type": "string"
          },
          "rules": {
            "$ref": "#/components/schemas/synctera_pay_configuration_rules"
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          }
        },
        "required": [
          "details",
          "name",
          "rules",
          "tenant"
        ],
        "title": "Synctera Pay Configuration",
        "type": "object"
      },
      "synctera_pay_configuration_details": {
        "description": "The details of an outgoing Synctera Pay configuration. This is used to match the Synctera Pay configuration to a Synctera Pay transfer.\n",
        "properties": {
          "currency": {
            "description": "The currency that will be used to match the Synctera Pay transfer to the appropriate configuration.\n",
            "type": "string"
          },
          "domestic": {
            "description": "Whether the transfer is domestic or international.\n",
            "type": "boolean"
          },
          "external_payment_rail": {
            "description": "The external payment rail that will be used for AML checks.\n",
            "enum": [
              "INTERAC",
              "WIRE"
            ],
            "type": "string"
          },
          "settlement_account_id": {
            "description": "The ID of the settlement account that will be used to match the Synctera Pay transfer to the appropriate configuration.\n",
            "format": "uuid",
            "type": "string"
          },
          "settlement_account_type": {
            "description": "The type of the settlement account that will be used to match the Synctera Pay transfer to the appropriate configuration.\n",
            "enum": [
              "ACCOUNT",
              "INTERNAL_ACCOUNT"
            ],
            "type": "string"
          },
          "subtypes": {
            "description": "The subtypes that will be used to match the Synctera Pay transfer to the appropriate configuration.\n",
            "items": {
              "$ref": "#/components/schemas/synctera_pay_subtype"
            },
            "type": "array"
          }
        },
        "required": [
          "currency",
          "external_payment_rail",
          "settlement_account_id",
          "settlement_account_type",
          "subtypes"
        ],
        "title": "Outgoing Synctera Pay Configuration Details",
        "type": "object"
      },
      "synctera_pay_configuration_required_details": {
        "description": "The required details of a Synctera Pay configuration. This is used when processing a Synctera Pay transfer.\n",
        "enum": [
          "exchange_details",
          "final_external_account_id",
          "reference_id",
          "vendor_id"
        ],
        "example": "exchange_details",
        "title": "Synctera Pay outgoing Configuration Required Details",
        "type": "string"
      },
      "synctera_pay_configuration_rules": {
        "description": "The rules of an outgoing Synctera Pay configuration. This is used when processing a Synctera Pay transfer.\n",
        "properties": {
          "enforce_payee": {
            "description": "If true, the customer matches the payee if and only if the peer_to_peer flag is set.\n",
            "type": "boolean"
          },
          "hold_time": {
            "description": "The number of minutes that the Synctera Pay transfer will be held before being processed.\n",
            "type": "integer"
          },
          "payee_account_required": {
            "description": "If true, external account creation is mandatory and customer must pass final_external_account_id in the payload.\n",
            "type": "boolean"
          },
          "peer_to_peer": {
            "description": "If true, peer-to-peer payments are allowed. Has no effect if enforce_payee is false.\n",
            "type": "boolean"
          },
          "required_details": {
            "description": "The required objects on a transfer that must be present in order to post the transfer. Note that a transfer can be initiated without these objects, but they must be present in order to post the transfer.\n",
            "example": [
              "exchange_details"
            ],
            "items": {
              "$ref": "#/components/schemas/synctera_pay_configuration_required_details"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "title": "Outgoing Synctera Pay Configuration Rules",
        "type": "object"
      },
      "synctera_pay_configurations": {
        "description": "A collection of outgoing Synctera Pay configurations\n",
        "items": {
          "$ref": "#/components/schemas/synctera_pay_configuration"
        },
        "title": "Synctera Pay Configurations",
        "type": "array"
      },
      "synctera_pay_direction": {
        "description": "The direction of the transfer. This determines the origination and receiver of the transfer. In an outgoing transfer, the `customer_id` and `account_id` field will be the originator of the transfer. In an incoming transfer, the `customer_id` and `account_id` field will be the receiver of the transfer.\n",
        "enum": [
          "INCOMING",
          "OUTGOING"
        ],
        "example": "OUTGOING",
        "type": "string"
      },
      "synctera_pay_list": {
        "allOf": [
          {
            "properties": {
              "transfers": {
                "description": "Array of transfers.",
                "items": {
                  "$ref": "#/components/schemas/synctera_pay_response"
                },
                "type": "array"
              }
            },
            "required": [
              "transfers"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "synctera_pay_network_status": {
        "description": "The network status of the outgoing transfer in the Synctera platform.\n",
        "enum": [
          "PENDING",
          "POSTED",
          "RETURNED",
          "REVERSED"
        ],
        "example": "POSTED",
        "type": "string"
      },
      "synctera_pay_patch": {
        "description": "Properties for updating an outgoing transfer",
        "properties": {
          "amount": {
            "description": "The amount in the source currency's minor unit. For example, 10000 would be $100 for USD.  One of the amount or percentage is required.\n",
            "format": "int64",
            "minimum": 1,
            "type": "integer"
          },
          "exchange_details": {
            "$ref": "#/components/schemas/exchange_details"
          },
          "final_external_account_id": {
            "description": "The ID of the final external account that will be the receiver of the Synctera Pay transfer.",
            "format": "uuid",
            "type": "string"
          },
          "reference_id": {
            "description": "The reference id of the transfer.",
            "type": "string"
          },
          "source_data": {
            "description": "Additional information to be added to the transfer",
            "type": "object"
          },
          "status": {
            "enum": [
              "CANCELLED",
              "POSTED"
            ],
            "type": "string"
          },
          "synctera_pay_vendor_id": {
            "$ref": "#/components/schemas/synctera_pay_vendor_id"
          }
        },
        "title": "Synctera Pay Transfer Patch",
        "type": "object"
      },
      "synctera_pay_post": {
        "allOf": [
          {
            "properties": {
              "account_id": {
                "description": "The UUID of the Synctera account resource of the customer.\n",
                "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
                "format": "uuid",
                "type": "string"
              },
              "customer_id": {
                "description": "The UUID of the Synctera customer resource.\n",
                "example": "46fec39e-e776-4571-bf90-d0e1d15172fe",
                "format": "uuid",
                "type": "string"
              },
              "effective_date": {
                "description": "The effective date of the transaction once it gets posted",
                "example": "2022-03-18",
                "format": "date",
                "type": "string"
              },
              "reference_id": {
                "description": "The network reference id of the transfer, this must be supplied by the vendor.",
                "type": "string"
              }
            },
            "required": [
              "account_id",
              "customer_id",
              "effective_date"
            ]
          },
          {
            "$ref": "#/components/schemas/synctera_pay_base"
          }
        ],
        "description": "Properties for creating an outgoing transfer",
        "title": "Outgoing Synctera Pay Transfer Post",
        "type": "object"
      },
      "synctera_pay_response": {
        "allOf": [
          {
            "properties": {
              "customer_id": {
                "description": "The UUID of the Synctera customer resource that is the originator of the transfer.\n",
                "example": "46fec39e-e776-4571-bf90-d0e1d15172fe",
                "type": "string"
              },
              "destination_account_id": {
                "description": "The UUID of the Synctera account that is the destination of the transfer. For a transfer originated by the Synctera platform, this will be an external account resource, while for a transfer originated by the external account, this account will be an account resource.\n",
                "example": "fccb4a46-1261-4e91-b622-73b5b946183d",
                "type": "string"
              },
              "destination_account_owner_name": {
                "description": "The account owner name of the destination account.",
                "type": "string"
              },
              "effective_date": {
                "description": "The effective date of the transaction once it gets posted",
                "example": "2022-03-18",
                "format": "date",
                "type": "string"
              },
              "failed": {
                "description": "Whether the transfer failed or not.",
                "example": false,
                "type": "boolean"
              },
              "history": {
                "items": {
                  "$ref": "#/components/schemas/action"
                },
                "type": "array"
              },
              "id": {
                "description": "ID of the transfer",
                "format": "uuid",
                "type": "string"
              },
              "is_same_day": {
                "description": "Send the same day (use only is_same_day without specific effective_date).",
                "example": true,
                "type": "boolean"
              },
              "network_status": {
                "$ref": "#/components/schemas/synctera_pay_network_status"
              },
              "original_reference_id": {
                "description": "The original reference id of the transfer if it's a return.",
                "type": "string"
              },
              "originating_account_id": {
                "description": "The UUID of the Synctera account that is the origination of the transfer. For a transfer originated by the Synctera platform, this will be an account resource, while for a transfer originated by the external account, this will be an external account resource.\n",
                "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
                "type": "string"
              },
              "originating_account_owner_name": {
                "description": "The account owner name of the origination account.",
                "type": "string"
              },
              "posting_date": {
                "description": "The posting date of the transaction once it gets posted",
                "example": "2022-03-18",
                "format": "date",
                "type": "string"
              },
              "reference_id": {
                "description": "The reference id of the transfer.",
                "type": "string"
              },
              "status": {
                "$ref": "#/components/schemas/synctera_pay_status"
              },
              "suspended": {
                "description": "Whether the transfer is suspended or not.",
                "example": false,
                "type": "boolean"
              },
              "tenant_id": {
                "$ref": "#/components/schemas/tenant_id"
              },
              "transaction_id": {
                "description": "The related transaction id of the transfer.",
                "example": "45b5246f-ad97-4629-9aac-465b74a05505",
                "format": "uuid",
                "type": "string"
              }
            },
            "required": [
              "currency",
              "effective_date",
              "id",
              "is_same_day",
              "status",
              "subtype",
              "tenant_id"
            ]
          },
          {
            "$ref": "#/components/schemas/synctera_pay_base"
          }
        ],
        "description": "Outgoing Synctera Pay transfer",
        "title": "Outgoing Synctera Pay Transfer Response",
        "type": "object"
      },
      "synctera_pay_status": {
        "description": "The status of the outgoing transfer in the Synctera platform. This is automatically set upon the creation of a transfer. To cancel a transfer, the current status must be 'INITIATED' or 'PENDING' and the request status set to 'CANCELLED'. To trigger a return, the current status must be 'POSTED' and the returned status will be set to 'RETURNED' if successful.\n",
        "enum": [
          "CANCELLED",
          "EXPIRED",
          "INITIATED",
          "PENDING",
          "POSTED"
        ],
        "example": "POSTED",
        "type": "string"
      },
      "synctera_pay_subtype": {
        "description": "The subtype of the outgoing synctera pay transfer\n",
        "enum": [
          "INCOMING_INTERAC_AUTODEPOSIT",
          "INCOMING_INTERAC_AUTODEPOSIT_RETURN",
          "INCOMING_INTERAC_AUTODEPOSIT_RETURN_REVERSAL",
          "INCOMING_INTERAC_AUTODEPOSIT_REVERSAL",
          "INCOMING_INTERAC_E_TRANSFER",
          "INCOMING_INTERAC_E_TRANSFER_RETURN",
          "INCOMING_INTERAC_E_TRANSFER_RETURN_REVERSAL",
          "INCOMING_INTERAC_E_TRANSFER_REVERSAL",
          "OUTGOING_ACCOUNT_TRANSFER",
          "OUTGOING_ACCOUNT_TRANSFER_RETURN",
          "OUTGOING_ACCOUNT_TRANSFER_RETURN_REVERSAL",
          "OUTGOING_ACCOUNT_TRANSFER_REVERSAL",
          "OUTGOING_BILL_PAYMENT",
          "OUTGOING_BILL_PAYMENT_RETURN",
          "OUTGOING_BILL_PAYMENT_RETURN_REVERSAL",
          "OUTGOING_BILL_PAYMENT_REVERSAL",
          "OUTGOING_CARD_LOAD",
          "OUTGOING_CARD_LOAD_REVERSAL",
          "OUTGOING_INTERAC_E_TRANSFER",
          "OUTGOING_INTERAC_E_TRANSFER_RETURN",
          "OUTGOING_INTERAC_E_TRANSFER_RETURN_REVERSAL",
          "OUTGOING_INTERAC_E_TRANSFER_REVERSAL",
          "OUTGOING_INTERNATIONAL_REMITTANCE",
          "OUTGOING_INTERNATIONAL_REMITTANCE_RETURN",
          "OUTGOING_INTERNATIONAL_REMITTANCE_RETURN_REVERSAL",
          "OUTGOING_INTERNATIONAL_REMITTANCE_REVERSAL"
        ],
        "example": "OUTGOING_INTERNATIONAL_REMITTANCE",
        "type": "string"
      },
      "synctera_pay_transaction": {
        "allOf": [
          {
            "properties": {
              "subtype": {
                "$ref": "#/components/schemas/synctera_pay_transaction_subtypes"
              },
              "synctera_pay_transaction": {
                "$ref": "#/components/schemas/synctera_pay_transaction_data"
              }
            },
            "required": [
              "subtype",
              "synctera_pay_transaction"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/base_transaction"
          }
        ]
      },
      "synctera_pay_transaction_data": {
        "description": "Transaction metadata specific to transactions with type `SYNCTERA_PAY`",
        "properties": {
          "id": {
            "description": "The Synctera Pay payment UUID",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "synctera_pay_transaction_subtypes": {
        "description": "The set of valid Synctera Pay transaction subtypes",
        "enum": [
          "INCOMING_INTERAC_AUTODEPOSIT",
          "INCOMING_INTERAC_AUTODEPOSIT_RETURN",
          "INCOMING_INTERAC_AUTODEPOSIT_RETURN_REVERSAL",
          "INCOMING_INTERAC_AUTODEPOSIT_REVERSAL",
          "INCOMING_INTERAC_E_TRANSFER",
          "INCOMING_INTERAC_E_TRANSFER_RETURN",
          "INCOMING_INTERAC_E_TRANSFER_RETURN_REVERSAL",
          "INCOMING_INTERAC_E_TRANSFER_REVERSAL",
          "INCOMING_INTERNATIONAL_WIRE",
          "INCOMING_INTERNATIONAL_WIRE_REVERSAL",
          "OUTGOING_ACCOUNT_TRANSFER",
          "OUTGOING_ACCOUNT_TRANSFER_RETURN",
          "OUTGOING_ACCOUNT_TRANSFER_RETURN_REVERSAL",
          "OUTGOING_ACCOUNT_TRANSFER_REVERSAL",
          "OUTGOING_BILL_PAYMENT",
          "OUTGOING_BILL_PAYMENT_RETURN",
          "OUTGOING_BILL_PAYMENT_RETURN_REVERSAL",
          "OUTGOING_BILL_PAYMENT_REVERSAL",
          "OUTGOING_CARD_LOAD",
          "OUTGOING_CARD_LOAD_REVERSAL",
          "OUTGOING_INTERAC_E_TRANSFER",
          "OUTGOING_INTERAC_E_TRANSFER_RETURN",
          "OUTGOING_INTERAC_E_TRANSFER_RETURN_REVERSAL",
          "OUTGOING_INTERAC_E_TRANSFER_REVERSAL",
          "OUTGOING_INTERNATIONAL_REMITTANCE",
          "OUTGOING_INTERNATIONAL_REMITTANCE_RETURN",
          "OUTGOING_INTERNATIONAL_REMITTANCE_RETURN_REVERSAL",
          "OUTGOING_INTERNATIONAL_REMITTANCE_REVERSAL"
        ],
        "type": "string"
      },
      "synctera_pay_vendor_base": {
        "description": "The base schema for a Synctera Pay vendor.\n",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/synctera_pay_vendor_config"
          },
          "description": {
            "description": "A description of the vendor.",
            "example": "Wise is a financial technology company that provides international money transfer services.",
            "type": "string"
          },
          "name": {
            "description": "The name of the vendor.",
            "example": "Wise",
            "type": "string"
          }
        },
        "required": [
          "config",
          "name"
        ],
        "title": "Synctera Pay Vendor Base",
        "type": "object"
      },
      "synctera_pay_vendor_config": {
        "properties": {
          "unique_reference_ids": {
            "description": "Whether the vendor supports unique reference IDs. If true, synctera pay will check for unique reference IDs. If a transfer with the same reference ID is found, the transfer will be rejected with a duplicate reference ID error.\n",
            "example": true,
            "type": "boolean"
          }
        },
        "title": "Synctera Pay Vendor Config",
        "type": "object"
      },
      "synctera_pay_vendor_id": {
        "description": "The ID of the vendor that will be used to process the Synctera Pay transfer.",
        "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
        "format": "uuid",
        "type": "string"
      },
      "synctera_pay_vendor_list": {
        "allOf": [
          {
            "properties": {
              "vendors": {
                "description": "Array of vendors",
                "items": {
                  "$ref": "#/components/schemas/synctera_pay_vendor_response"
                },
                "type": "array"
              }
            },
            "required": [
              "vendors"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "synctera_pay_vendor_response": {
        "allOf": [
          {
            "$ref": "#/components/schemas/synctera_pay_vendor_base"
          },
          {
            "properties": {
              "enabled": {
                "description": "Whether the vendor is enabled.",
                "example": true,
                "type": "boolean"
              },
              "id": {
                "description": "Unique identifier for the vendor.",
                "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
                "format": "uuid",
                "type": "string"
              },
              "tenant_id": {
                "$ref": "#/components/schemas/tenant_id"
              }
            },
            "required": [
              "enabled",
              "id",
              "tenant_id"
            ]
          }
        ],
        "description": "Synctera Pay Vendor Response",
        "title": "Synctera Pay Vendor Response",
        "type": "object"
      },
      "tenant_id": {
        "description": "The id of the tenant containing the resource.\n",
        "example": "abcdef_ghijkl",
        "type": "string"
      },
      "test_authorize_response": {
        "properties": {
          "redirect_url": {
            "description": "Complete URL to redirect to for the test authorization flow\n",
            "type": "string"
          }
        },
        "title": "Test authorize response",
        "type": "object"
      },
      "three_ds_authentication_request_type": {
        "enum": [
          "ADD_CARD",
          "EMV_CARDHOLDER_VERIFICATION",
          "INSTALLMENT",
          "MAINTAIN_CARD",
          "PAYMENT",
          "RECURRING"
        ],
        "type": "string"
      },
      "three_ds_decision": {
        "description": "Possible decision responses when faced with a EMV 3-D Secure transaction.\n\nPolicy           | Description\n---------------- | -----------\nSMS_OTP          | Use the card holder's phone number on file to perform advanced authentication via SMS\nEXEMPT           | Transactions will be exempted from advanced authentication\n",
        "enum": [
          "EXEMPT",
          "SMS_OTP"
        ],
        "type": "string"
      },
      "three_ds_decision_gateway_decision": {
        "properties": {
          "decision": {
            "$ref": "#/components/schemas/three_ds_decision"
          }
        },
        "required": [
          "decision"
        ],
        "type": "object"
      },
      "three_ds_decision_gateway_id": {
        "description": "The unique identifier of an 3DS decision gateway",
        "format": "uuid",
        "type": "string"
      },
      "three_ds_decision_gateway_list": {
        "allOf": [
          {
            "$ref": "#/components/schemas/paginated_response"
          },
          {
            "properties": {
              "gateways": {
                "description": "Array of 3DS decision gateways",
                "items": {
                  "$ref": "#/components/schemas/three_ds_decision_gateway_response"
                },
                "type": "array"
              }
            },
            "required": [
              "gateways"
            ],
            "type": "object"
          }
        ]
      },
      "three_ds_decision_gateway_request": {
        "description": "Request sent to three ds gateway for decision.",
        "properties": {
          "acs_transaction_id": {
            "description": "Universally unique transaction identifier assigned by the ACS to identify a single transaction.",
            "maxLength": 36,
            "type": "string"
          },
          "authentication_request_type": {
            "$ref": "#/components/schemas/three_ds_authentication_request_type"
          },
          "card_id": {
            "format": "uuid",
            "type": "string"
          },
          "card_product_id": {
            "format": "uuid",
            "type": "string"
          },
          "client_ip_address": {
            "type": "string"
          },
          "currency_code": {
            "$ref": "#/components/schemas/currency_code"
          },
          "device_channel": {
            "$ref": "#/components/schemas/three_ds_device_channel"
          },
          "merchant": {
            "$ref": "#/components/schemas/three_ds_decision_gateway_request_merchant"
          },
          "transaction_amount": {
            "type": "integer"
          },
          "transaction_sub_type": {
            "$ref": "#/components/schemas/three_ds_transaction_subtype"
          },
          "transaction_type": {
            "$ref": "#/components/schemas/three_ds_transaction_type"
          }
        },
        "required": [
          "acs_transaction_id",
          "card_id",
          "card_product_id"
        ],
        "type": "object"
      },
      "three_ds_decision_gateway_request_merchant": {
        "properties": {
          "category_code": {
            "type": "string"
          },
          "country_code": {
            "description": "ISO 3166-1 three-digit numeric country code of the merchant address",
            "pattern": "^\\d{3}$",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "three_ds_decision_gateway_response": {
        "properties": {
          "card_products": {
            "description": "List of Card Product IDs that will use the 3DS decision gateway",
            "items": {
              "example": "29346ae3-6481-48c0-ada4-13a60f2d1bd1",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "creation_time": {
            "description": "The timestamp when the 3DS decision gateway was created",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "custom_headers": {
            "$ref": "#/components/schemas/gateway_custom_headers"
          },
          "decision_url": {
            "description": "URL of the 3DS decision gateway",
            "format": "uri",
            "maxLength": 1000,
            "type": "string"
          },
          "fallback_decision": {
            "$ref": "#/components/schemas/three_ds_decision"
          },
          "id": {
            "$ref": "#/components/schemas/three_ds_decision_gateway_id"
          },
          "is_active": {
            "description": "The 3DS decision gateway will only be used if this is true.",
            "type": "boolean"
          },
          "last_updated_time": {
            "description": "The timestamp when the 3DS decision gateway was last modified",
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          }
        },
        "required": [
          "card_products",
          "creation_time",
          "decision_url",
          "fallback_decision",
          "id",
          "is_active",
          "last_updated_time",
          "tenant"
        ],
        "type": "object"
      },
      "three_ds_device_channel": {
        "enum": [
          "APP_BASED",
          "BROWSER",
          "THREEDS_REQUESTER_INITIATED"
        ],
        "type": "string"
      },
      "three_ds_policy": {
        "description": "EMV 3-D Secure policy. Whenever a 3DS decision gateway refers to a card product, the policy for that card\nproduct is always DECISION_GATEWAY.\n\nPolicy           | Description\n---------------- | -----------\nSMS_OTP          | Use the card holder's phone number on file to perform advanced authentication via SMS\nEXEMPT           | Transactions will be exempted from advanced authentication\nDECISION_GATEWAY | Fintech 3DS decision gateway will decide the 3DS action for each transaction\n",
        "enum": [
          "DECISION_GATEWAY",
          "EXEMPT",
          "SMS_OTP"
        ],
        "type": "string"
      },
      "three_ds_transaction_subtype": {
        "enum": [
          "ACCOUNT_FUNDING",
          "ACCOUNT_VERIFICATION",
          "PREPAID_ACTIVATION_AND_LOAD",
          "PURCHASE",
          "QUASI_CASH"
        ],
        "type": "string"
      },
      "three_ds_transaction_type": {
        "enum": [
          "NON_PAYMENT",
          "PAYMENT"
        ],
        "type": "string"
      },
      "token_list": {
        "properties": {
          "digital_wallet_tokens": {
            "description": "Array of Digital Wallet Token information of a Card",
            "items": {
              "$ref": "#/components/schemas/digital_wallet_token_response"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "token_list_response": {
        "allOf": [
          {
            "$ref": "#/components/schemas/paginated_response"
          },
          {
            "$ref": "#/components/schemas/token_list"
          }
        ],
        "required": [
          "digital_wallet_tokens"
        ]
      },
      "transaction": {
        "properties": {
          "account_id": {
            "description": "The account uuid associated with the transaction. `account_id` and `internal_account_id` are mutually exclusive",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "type": "string"
          },
          "amount": {
            "description": "The total amount of the transaction including both pending and already posted amounts. The value is represented as the smallest denomination of the applicable currency.",
            "format": "int64",
            "type": "integer"
          },
          "creation_time": {
            "description": "The exact time the transaction was recorded in the ledger",
            "format": "date-time",
            "type": "string"
          },
          "currency": {
            "description": "ISO 4217 alphabetic currency code of the transfer amount",
            "type": "string"
          },
          "customer_id": {
            "description": "The uuid of the customer that initiated the transaction (if any)\n",
            "type": "string"
          },
          "dc_sign": {
            "description": "The `dc_sign` represents the direction money was moved. A value of `DEBIT` is money moving out of an account, a value of `CREDIT` is money moving into an account",
            "enum": [
              "CREDIT",
              "DEBIT"
            ],
            "type": "string"
          },
          "decline": {
            "$ref": "#/components/schemas/decline_info"
          },
          "description": {
            "description": "A human-friendly description of the transaction, provided by the integrator",
            "type": "string"
          },
          "effective_date": {
            "description": "The effective date of the transaction. This usually aligns with network settlement date, which differs between transaction types.\nThe effective date is also used to determine effective daily balances for the purposes of interest calculation.",
            "format": "date",
            "type": "string"
          },
          "enhanced_transaction": {
            "$ref": "#/components/schemas/enhanced_transaction_data"
          },
          "force_post": {
            "description": "Determines whether or not a transaction or auth was \"forced\" or not. A forced transaction skips any account balance checks",
            "type": "boolean"
          },
          "fraud_risk": {
            "$ref": "#/components/schemas/fraud_risk_data"
          },
          "group_id": {
            "description": "The group id of the transaction. Every transaction in the ledger is one entry in a double-entry system and the primary and offset transactions share the same `group_id`",
            "type": "string"
          },
          "hold_expiration_time": {
            "description": "The date and time any pending amount is expected to be released back to the account.",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the transaction",
            "format": "uuid",
            "type": "string"
          },
          "internal_account_id": {
            "description": "The internal account uuid associated with the transaction. `account_id` and `internal_account_id` are mutually exclusive",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "type": "string"
          },
          "last_updated_time": {
            "description": "The date and time the transaction was last modified",
            "format": "date-time",
            "type": "string"
          },
          "metadata": {
            "description": "an unstructured json blob representing additional transaction information supplied by the integrator.",
            "nullable": true,
            "type": "object"
          },
          "partial_hold": {
            "description": "Determines whether or not the funds on hold were the result of a partial auth or not. If `true` the `pending_amount` of the transaction will be less than the requested amount.\nThis is primarily used for certain types of card transactions.",
            "type": "boolean"
          },
          "pending_amount": {
            "description": "The amount amount of the transaction currently authorized or on hold",
            "format": "int64",
            "type": "integer"
          },
          "posted_amount": {
            "description": "The amount of the transaction that has been fully posted to the account",
            "format": "int64",
            "type": "integer"
          },
          "posted_date": {
            "description": "The date the transaction was posted (based on the bank calendar and end-of-day). For transaction with multiple postings, this is the date of the earliest posting.\nThis will be omitted for transactions with a `posted_amount` of `0`.",
            "format": "date",
            "type": "string"
          },
          "reference_id": {
            "description": "An external ID provided by the payment network to represent this transaction. This is not guaranteed to be globally unique.\nThis will always be omitted for internal transfers.",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/transaction_statuses"
          },
          "subtype": {
            "description": "The subtype of the transaction. For the full list of available values, see the spec for `GET /v1/transactions`.",
            "type": "string"
          },
          "system_description": {
            "description": "A human-friendly description of the transaction, provided by the Synctera platform",
            "type": "string"
          },
          "transaction_time": {
            "description": "The time the transaction occurred. In most cases this will be roughly identical to creation_time, but it can differ in some situations if the payment doesn't appear in the ledger in real-time.",
            "format": "date-time",
            "type": "string"
          },
          "type": {
            "description": "The type of the transaction. For the full list of available values, see the spec for `GET /v1/transactions`.",
            "type": "string"
          }
        },
        "required": [
          "amount",
          "creation_time",
          "currency",
          "dc_sign",
          "effective_date",
          "force_post",
          "group_id",
          "id",
          "last_updated_time",
          "partial_hold",
          "pending_amount",
          "posted_amount",
          "status",
          "subtype",
          "transaction_time",
          "type"
        ],
        "type": "object"
      },
      "transaction1": {
        "discriminator": {
          "mapping": {
            "ACH": "#/components/schemas/ach_transaction",
            "CARD": "#/components/schemas/card_transaction",
            "CASH": "#/components/schemas/cash_transaction",
            "CHECK": "#/components/schemas/check_transaction",
            "EXTERNAL_CARD": "#/components/schemas/external_card_transaction",
            "FEDNOW": "#/components/schemas/fednow_transaction",
            "FEE": "#/components/schemas/fee_transaction",
            "INTERNAL_TRANSFER": "#/components/schemas/internal_transfer_transaction",
            "REWARD": "#/components/schemas/reward_transaction",
            "SYNCTERA_PAY": "#/components/schemas/synctera_pay_transaction",
            "WIRE": "#/components/schemas/wire_transaction"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/card_transaction"
          },
          {
            "$ref": "#/components/schemas/fee_transaction"
          },
          {
            "$ref": "#/components/schemas/external_card_transaction"
          },
          {
            "$ref": "#/components/schemas/fednow_transaction"
          },
          {
            "$ref": "#/components/schemas/synctera_pay_transaction"
          },
          {
            "$ref": "#/components/schemas/check_transaction"
          },
          {
            "$ref": "#/components/schemas/wire_transaction"
          },
          {
            "$ref": "#/components/schemas/cash_transaction"
          },
          {
            "$ref": "#/components/schemas/ach_transaction"
          },
          {
            "$ref": "#/components/schemas/reward_transaction"
          },
          {
            "$ref": "#/components/schemas/internal_transfer_transaction"
          }
        ],
        "type": "object"
      },
      "transaction_id": {
        "description": "The unique identifier of a posted transaction",
        "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
        "format": "uuid",
        "type": "string"
      },
      "transaction_list": {
        "allOf": [
          {
            "properties": {
              "transactions": {
                "description": "Array of statement transactions",
                "items": {
                  "$ref": "#/components/schemas/transaction"
                },
                "type": "array"
              }
            },
            "required": [
              "transactions"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ],
        "title": "Transaction List"
      },
      "transaction_options": {
        "properties": {
          "additional_data": {
            "type": "string"
          },
          "card_expiration_date_yymm": {
            "type": "string"
          },
          "database_transaction_timeout": {
            "format": "int32",
            "type": "integer"
          },
          "encryption_key_id": {
            "type": "string"
          },
          "is_async": {
            "default": false,
            "type": "boolean"
          },
          "pre_auth_time_limit": {
            "type": "string"
          },
          "send_expiration_date": {
            "default": false,
            "type": "boolean"
          },
          "send_track_data": {
            "default": false,
            "type": "boolean"
          },
          "transaction_id": {
            "type": "string"
          },
          "transaction_timeout_threshold_seconds": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "transaction_statuses": {
        "description": "The status of the transaction",
        "enum": [
          "COMPLETE",
          "DECLINED",
          "PENDING"
        ],
        "type": "string"
      },
      "transaction_types": {
        "description": "The type of the transaction. This typically represents the \"payment\" rail that is used. For example, for ACH payments this will be `ach`, while debit card transactions will use `card`.",
        "enum": [
          "ACH",
          "CARD",
          "CASH",
          "CHECK",
          "EXTERNAL_CARD",
          "FEDNOW",
          "FEE",
          "INTERNAL_TRANSFER",
          "REWARD",
          "SYNCTERA_PAY",
          "WIRE"
        ],
        "type": "string"
      },
      "transfer_customer_id": {
        "description": "The customer_id of the cardholder",
        "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
        "format": "uuid",
        "type": "string"
      },
      "transfer_list_response": {
        "allOf": [
          {
            "properties": {
              "external_transfers": {
                "description": "Array of External transfer",
                "items": {
                  "$ref": "#/components/schemas/transfer_response"
                },
                "type": "array"
              }
            },
            "required": [
              "external_transfers"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "transfer_originating_customer_id": {
        "description": "For person-to-person PUSH transactions this is the customer_id of the sender who must have privileges to access funds in the originating account in order to send funds to the recipient cardholder",
        "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
        "format": "uuid",
        "type": "string"
      },
      "transfer_request": {
        "discriminator": {
          "mapping": {
            "PULL": "#/components/schemas/transfer_request_pull",
            "PUSH": "#/components/schemas/transfer_request_push"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/transfer_request_push"
          },
          {
            "$ref": "#/components/schemas/transfer_request_pull"
          }
        ],
        "type": "object"
      },
      "transfer_request_apple_pay": {
        "allOf": [
          {
            "$ref": "#/components/schemas/transfer_request_base"
          },
          {
            "properties": {
              "apple_pay_payment": {
                "$ref": "#/components/schemas/apple_pay_payment"
              },
              "customer_id": {
                "$ref": "#/components/schemas/transfer_customer_id"
              }
            },
            "required": [
              "apple_pay_payment",
              "customer_id"
            ],
            "type": "object"
          }
        ],
        "type": "object"
      },
      "transfer_request_base": {
        "properties": {
          "amount": {
            "description": "Amount of the transfer in cents (USD)",
            "minimum": 1,
            "type": "integer"
          },
          "merchant": {
            "$ref": "#/components/schemas/merchant"
          },
          "originating_account_id": {
            "description": "The ID of the account to which the transfer will be initiated/received",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          }
        },
        "required": [
          "amount",
          "originating_account_id"
        ],
        "type": "object"
      },
      "transfer_request_google_pay": {
        "allOf": [
          {
            "$ref": "#/components/schemas/transfer_request_base"
          },
          {
            "properties": {
              "customer_id": {
                "$ref": "#/components/schemas/transfer_customer_id"
              },
              "google_pay_payment_data": {
                "$ref": "#/components/schemas/google_pay_payment_data"
              }
            },
            "required": [
              "customer_id",
              "google_pay_payment_data"
            ],
            "type": "object"
          }
        ],
        "type": "object"
      },
      "transfer_request_pull": {
        "allOf": [
          {
            "$ref": "#/components/schemas/transfer_request_base"
          },
          {
            "properties": {
              "external_card_id": {
                "$ref": "#/components/schemas/external_card_id"
              },
              "three_ds_id": {
                "description": "Unique identifier of an External Card Transfer 3-D Secure Authorization - conditionally required according to your program's 3DS policy",
                "example": "40e2de9e-4375-4fa1-9393-92da972a9338",
                "format": "uuid",
                "type": "string"
              },
              "type": {
                "$ref": "#/components/schemas/create_transfer_type"
              }
            },
            "required": [
              "external_card_id",
              "type"
            ],
            "type": "object"
          }
        ],
        "description": "Push/pull funds to/from an External Card",
        "type": "object"
      },
      "transfer_request_push": {
        "allOf": [
          {
            "$ref": "#/components/schemas/transfer_request_base"
          },
          {
            "properties": {
              "external_card_id": {
                "$ref": "#/components/schemas/external_card_id"
              },
              "originating_customer_id": {
                "description": "For person-to-person PUSH transactions this is the customer_id of the sender who must have privileges to access funds in the originating account in order to send funds to the recipient cardholder",
                "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
                "format": "uuid",
                "type": "string"
              },
              "type": {
                "$ref": "#/components/schemas/create_transfer_type"
              }
            },
            "required": [
              "external_card_id",
              "type"
            ],
            "type": "object"
          }
        ],
        "description": "Push/pull funds to/from an External Card",
        "type": "object"
      },
      "transfer_response": {
        "discriminator": {
          "mapping": {
            "APPLE_PAY_PULL": "#/components/schemas/transfer_response_token",
            "APPLE_PAY_PULL_REVERSAL": "#/components/schemas/transfer_response_token",
            "GOOGLE_PAY_PULL": "#/components/schemas/transfer_response_token",
            "GOOGLE_PAY_PULL_REVERSAL": "#/components/schemas/transfer_response_token",
            "PULL": "#/components/schemas/transfer_response_pull",
            "PULL_REVERSAL": "#/components/schemas/transfer_response_pull",
            "PUSH": "#/components/schemas/transfer_response_push"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/transfer_response_token"
          },
          {
            "$ref": "#/components/schemas/transfer_response_pull"
          },
          {
            "$ref": "#/components/schemas/transfer_response_push"
          }
        ],
        "type": "object"
      },
      "transfer_response_base": {
        "properties": {
          "account_id": {
            "description": "The ID of the Synctera account into which or from which funds were moved",
            "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
            "format": "uuid",
            "type": "string"
          },
          "amount": {
            "description": "Amount of the transfer in cents",
            "type": "integer"
          },
          "creation_time": {
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          },
          "currency": {
            "$ref": "#/components/schemas/currency_code"
          },
          "customer_id": {
            "$ref": "#/components/schemas/transfer_customer_id"
          },
          "id": {
            "description": "The ID of the transfer",
            "type": "string"
          },
          "last_updated_time": {
            "example": "2010-05-06T12:23:34.321Z",
            "format": "date-time",
            "type": "string"
          },
          "merchant": {
            "$ref": "#/components/schemas/merchant"
          },
          "network_decline_details": {
            "description": "If available, a human readable string indicating why a transfer was declined downstream of our system",
            "type": "string"
          },
          "reason": {
            "description": "The reason for the status, e.g. INSUFFICIENT_FUNDS, SUSPECTED_FRAUD, NETWORK_DECLINED",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/transfer_status"
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          },
          "transaction_id": {
            "description": "The transaction ID",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "account_id",
          "amount",
          "creation_time",
          "currency",
          "customer_id",
          "id",
          "last_updated_time",
          "merchant",
          "status",
          "tenant"
        ],
        "type": "object"
      },
      "transfer_response_pull": {
        "allOf": [
          {
            "properties": {
              "external_card_id": {
                "$ref": "#/components/schemas/external_card_id"
              },
              "three_ds_id": {
                "$ref": "#/components/schemas/transfer_three_ds_id"
              },
              "type": {
                "$ref": "#/components/schemas/transfer_type"
              }
            },
            "required": [
              "external_card_id",
              "type"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/transfer_response_base"
          }
        ],
        "type": "object"
      },
      "transfer_response_push": {
        "allOf": [
          {
            "$ref": "#/components/schemas/transfer_response_base"
          },
          {
            "properties": {
              "external_card_id": {
                "$ref": "#/components/schemas/external_card_id"
              },
              "originating_customer_id": {
                "$ref": "#/components/schemas/transfer_originating_customer_id"
              },
              "type": {
                "$ref": "#/components/schemas/transfer_type"
              }
            },
            "required": [
              "external_card_id",
              "type"
            ],
            "type": "object"
          }
        ],
        "type": "object"
      },
      "transfer_response_token": {
        "allOf": [
          {
            "properties": {
              "card_details": {
                "$ref": "#/components/schemas/external_card_details"
              },
              "type": {
                "$ref": "#/components/schemas/transfer_type"
              }
            },
            "required": [
              "card_details",
              "type"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/transfer_response_base"
          }
        ],
        "type": "object"
      },
      "transfer_reversal_request": {
        "description": "Reversal for a transfer with type PULL",
        "properties": {
          "amount": {
            "description": "Amount of the refund in cents (Amount can be up to the original amount)",
            "type": "integer"
          },
          "currency": {
            "$ref": "#/components/schemas/currency_code"
          }
        },
        "required": [
          "amount",
          "currency"
        ],
        "type": "object"
      },
      "transfer_status": {
        "description": "The status of the transfer",
        "enum": [
          "CANCELED",
          "DECLINED",
          "PENDING",
          "SUCCEEDED",
          "UNKNOWN"
        ],
        "type": "string"
      },
      "transfer_three_ds_id": {
        "description": "Unique identifier of an External Card Transfer 3-D Secure Authorization - conditionally required according to your program's 3DS policy",
        "example": "40e2de9e-4375-4fa1-9393-92da972a9338",
        "format": "uuid",
        "type": "string"
      },
      "transfer_type": {
        "description": "Type of transfer operation.\n\nType | Description\n--- | ---\nPUSH | Funds pushed to an External Card from an Account\nPULL | Funds pulled from an External Card to an Account\nPULL_REVERSAL | Funds pushed back to an External Card from an Account\nAPPLE_PAY_PULL | Funds pulled from an Apple Pay card to an Account\nAPPLE_PAY_PULL_REVERSAL | Funds returned to Apple Pay card from original recipient Account\nGOOGLE_PAY_PULL | Pull funds from a Google Pay card to an Account\nGOOGLE_PAY_PULL_REVERSAL | Funds returned to Google Pay card from original recipient Account\n",
        "enum": [
          "APPLE_PAY_PULL",
          "APPLE_PAY_PULL_REVERSAL",
          "GOOGLE_PAY_PULL",
          "GOOGLE_PAY_PULL_REVERSAL",
          "PULL",
          "PULL_REVERSAL",
          "PUSH"
        ],
        "example": "PULL",
        "type": "string"
      },
      "txn_enhancer": {
        "default": "MX",
        "description": "Whether to use a transaction enhancer and/or which vendor to use. Enhancer is a third party service that provides additional data for card transactions. MX is included by default.",
        "enum": [
          "MX",
          "NONE"
        ],
        "example": "NONE",
        "type": "string"
      },
      "underwriting_data": {
        "properties": {
          "request_time": {
            "description": "Timestamp of the request in RFC3359 format",
            "format": "date-time",
            "type": "string"
          },
          "vendor": {
            "description": "Vendor name",
            "example": "PLAID",
            "type": "string"
          },
          "vendor_info": {
            "description": "Information about the vendor provided info",
            "type": "object"
          }
        },
        "type": "object"
      },
      "update_card_image_request": {
        "properties": {
          "rejection_memo": {
            "type": "string"
          },
          "rejection_reason": {
            "$ref": "#/components/schemas/card_image_rejection_reason"
          },
          "status": {
            "$ref": "#/components/schemas/card_image_status"
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "update_gateway_request": {
        "properties": {
          "card_products": {
            "description": "List of Card Product unique identifiers that will utilize the Gateway",
            "items": {
              "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "custom_headers": {
            "$ref": "#/components/schemas/gateway_custom_headers"
          },
          "is_active": {
            "description": "Current status of the Authorization gateway",
            "type": "boolean"
          },
          "standin": {
            "$ref": "#/components/schemas/gateway_standin"
          },
          "url": {
            "description": "URL of the Authorization gateway",
            "format": "uri",
            "maxLength": 1000,
            "type": "string"
          }
        },
        "type": "object"
      },
      "update_three_ds_decision_gateway_request": {
        "properties": {
          "card_products": {
            "description": "List of card product unique IDs that will use the 3DS decision gateway. Note that the list of card product\nIDs from this request does not merge with the 3DS gateway's previous list of card product IDs. The list of\ncard product IDs for the gateway will be fully replaced by the list from the update request, if any such\nlist is included in the request.\n",
            "items": {
              "example": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "custom_headers": {
            "$ref": "#/components/schemas/gateway_custom_headers"
          },
          "decision_url": {
            "description": "URL of the 3DS decision gateway",
            "format": "uri",
            "maxLength": 1000,
            "type": "string"
          },
          "fallback_decision": {
            "$ref": "#/components/schemas/three_ds_decision"
          },
          "is_active": {
            "description": "The 3DS decision gateway will only be used if this is true.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "vendor_name": {
        "description": "The name of the credit score provider",
        "enum": [
          "EQUIFAX",
          "EXPERIAN",
          "OTHER",
          "TRANSUNION"
        ],
        "example": "EQUIFAX",
        "type": "string"
      },
      "virtual_card": {
        "allOf": [
          {
            "$ref": "#/components/schemas/base_card"
          }
        ],
        "description": "A virtual card",
        "title": "Virtual Card"
      },
      "virtual_card_plus_status": {
        "allOf": [
          {
            "$ref": "#/components/schemas/virtual_card"
          },
          {
            "$ref": "#/components/schemas/virtual_debit_card_response_status"
          }
        ]
      },
      "virtual_credit_card_issuance_request": {
        "allOf": [
          {
            "$ref": "#/components/schemas/virtual_card"
          },
          {
            "required": [
              "account_id",
              "card_product_id",
              "form"
            ],
            "type": "object"
          }
        ],
        "example": {
          "account_id": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "card_product_id": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "customer_id": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "form": "VIRTUAL"
        }
      },
      "virtual_credit_card_response": {
        "allOf": [
          {
            "$ref": "#/components/schemas/virtual_card_plus_status"
          },
          {
            "properties": {
              "bin": {
                "description": "The bin number",
                "type": "string"
              },
              "card_brand": {
                "$ref": "#/components/schemas/card_brand"
              }
            },
            "required": [
              "account_id",
              "card_brand",
              "card_product_id",
              "creation_time",
              "emboss_name",
              "expiration_month",
              "expiration_year",
              "form",
              "id",
              "last_four"
            ],
            "type": "object"
          }
        ]
      },
      "virtual_debit_card_issuance_request": {
        "allOf": [
          {
            "$ref": "#/components/schemas/virtual_card"
          },
          {
            "required": [
              "account_id",
              "card_product_id",
              "form"
            ],
            "type": "object"
          }
        ],
        "example": {
          "account_id": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "card_product_id": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "customer_id": "7d943c51-e4ff-4e57-9558-08cab6b963c7",
          "form": "VIRTUAL"
        }
      },
      "virtual_debit_card_response": {
        "allOf": [
          {
            "$ref": "#/components/schemas/virtual_card_plus_status"
          },
          {
            "properties": {
              "bin": {
                "description": "The bin number",
                "type": "string"
              },
              "card_brand": {
                "$ref": "#/components/schemas/card_brand"
              }
            },
            "required": [
              "account_id",
              "card_brand",
              "card_product_id",
              "creation_time",
              "emboss_name",
              "expiration_month",
              "expiration_year",
              "form",
              "id",
              "last_four"
            ],
            "type": "object"
          }
        ]
      },
      "virtual_debit_card_response_status": {
        "allOf": [
          {
            "required": [
              "card_status",
              "status_reason"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/card_status_object"
          }
        ]
      },
      "wallet_provider_card_on_file": {
        "properties": {
          "address_verification": {
            "$ref": "#/components/schemas/digital_wallet_token_address_verification"
          },
          "enabled": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "web_push_provisioning": {
        "properties": {
          "apple_card_template_id": {
            "type": "string"
          },
          "apple_partner_id": {
            "type": "string"
          },
          "google_piaid": {
            "description": "Google Payment Integrator Account ID.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "webhook": {
        "description": "Webhook object",
        "properties": {
          "creation_time": {
            "description": "Webhook creation timestamp in RFC3339 format",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "description": "A description of what the webhook is used for",
            "type": "string"
          },
          "enabled_events": {
            "description": "A list of the events that will trigger the webhook. Subscribing to a wildcard event, e.g. ACCOUNT.*, will send all webhooks for all events that match that pattern. Note that this can include new event types added after the subscription was created.",
            "items": {
              "$ref": "#/components/schemas/event_type"
            },
            "type": "array"
          },
          "id": {
            "description": "The unique ID of the webhook",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_enabled": {
            "description": "Set the webhook to be enabled or disabled",
            "type": "boolean"
          },
          "last_updated": {
            "description": "Timestamp that this webhook was created or the last time any field was changed",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "last_updated_time": {
            "description": "Timestamp of the last Webhook modification in RFC3339 format",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "metadata": {
            "description": "Additional information stored to the webhook",
            "type": "object"
          },
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          },
          "url": {
            "description": "URL that the webhook will send request to",
            "format": "uri",
            "maxLength": 1000,
            "type": "string"
          }
        },
        "required": [
          "enabled_events",
          "is_enabled",
          "url"
        ],
        "title": "Webhook",
        "type": "object"
      },
      "webhook_list": {
        "allOf": [
          {
            "properties": {
              "webhooks": {
                "description": "Array of webhooks",
                "items": {
                  "$ref": "#/components/schemas/webhook"
                },
                "type": "array"
              }
            },
            "required": [
              "webhooks"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "webhook_request_object": {
        "description": "Request body for webhook http request",
        "properties": {
          "changed_fields": {
            "description": "Json string of object associated with the event related to a resource change. This only contains those fields that have value changed on the event, and the field values are prior to the resource change event.\n",
            "type": "string"
          },
          "event_time": {
            "description": "Timestamp of the current event raised",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "The unique ID of the current event",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "metadata": {
            "description": "Metadata that stored in the webhook subscription",
            "maxLength": 1024,
            "type": "string"
          },
          "resource": {
            "description": "Json string of object associated with the event. For example, if your event is ACCOUNT.CREATED, You can refer to Acccount to parse the account event to obtain the ID, status etc.\n",
            "type": "string"
          },
          "resource_id": {
            "description": "The ID of the resource this event occurred on, if available.",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/event_type_explicit"
          },
          "url": {
            "description": "URL that you specified for the webhook and where this request will be sent",
            "format": "uri",
            "maxLength": 1000,
            "type": "string"
          },
          "webhook_id": {
            "description": "Id of the Webhook the current request belongs to",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "event_time",
          "id",
          "metadata",
          "type",
          "url",
          "webhook_id"
        ],
        "title": "Webhook request object",
        "type": "object"
      },
      "widget_token": {
        "properties": {
          "tenant": {
            "$ref": "#/components/schemas/tenant_id"
          },
          "widget_token": {
            "description": "A short-lived, one-time token for use with Synctera widgets",
            "example": "0b0319e2-d5f4-49cb-b426-9ff9b2e96969",
            "type": "string"
          }
        },
        "required": [
          "tenant",
          "widget_token"
        ],
        "title": "Widget Token",
        "type": "object"
      },
      "widget_type": {
        "description": "The widget type",
        "enum": [
          "ACTIVATE_CARD",
          "SET_PIN"
        ],
        "type": "string"
      },
      "wire_transaction": {
        "allOf": [
          {
            "properties": {
              "subtype": {
                "$ref": "#/components/schemas/wire_transaction_subtypes"
              },
              "wire_transaction": {
                "$ref": "#/components/schemas/wire_transaction_data"
              }
            },
            "required": [
              "subtype",
              "wire_transaction"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/base_transaction"
          }
        ]
      },
      "wire_transaction_data": {
        "description": "Transaction metadata specific to transactions with type `WIRE`",
        "properties": {
          "beneficiary_name": {
            "description": "The name of the beneficiary (recipient) of the wire transfer.",
            "type": "string"
          },
          "file_name": {
            "description": "The file name the wire was sent in or received from",
            "type": "string"
          },
          "id": {
            "description": "The Synctera Wire payment UUID",
            "format": "uuid",
            "type": "string",
            "x-go-type": "string"
          },
          "originating_account_id": {
            "description": "The UUID of the account that the wire payment is being sent from",
            "format": "uuid",
            "type": "string",
            "x-go-type": "string"
          },
          "originator_name": {
            "description": "The name of the originator of the wire transfer.",
            "type": "string"
          },
          "receiving_account_id": {
            "description": "The UUID if the account that is receiving the wire",
            "format": "uuid",
            "type": "string",
            "x-go-type": "string"
          },
          "recipient_message": {
            "description": "The message to the recipient",
            "type": "string"
          },
          "wire_reference_number": {
            "description": "The wire Sender Reference Number for the transfer",
            "type": "string"
          }
        },
        "type": "object"
      },
      "wire_transaction_subtypes": {
        "description": "The set of valid WIRE transaction subtypes",
        "enum": [
          "BULK_DOMESTIC_OUTGOING",
          "BULK_DOMESTIC_OUTGOING_REVERSAL",
          "DOMESTIC_INCOMING",
          "DOMESTIC_INCOMING_RETURN",
          "DOMESTIC_INCOMING_RETURN_REVERSAL",
          "DOMESTIC_INCOMING_REVERSAL",
          "DOMESTIC_OUTGOING",
          "DOMESTIC_OUTGOING_RETURN",
          "DOMESTIC_OUTGOING_RETURN_REVERSAL",
          "DOMESTIC_OUTGOING_REVERSAL",
          "INTERNATIONAL_INCOMING",
          "INTERNATIONAL_INCOMING_RETURN",
          "INTERNATIONAL_INCOMING_RETURN_REVERSAL",
          "INTERNATIONAL_INCOMING_REVERSAL",
          "INTERNATIONAL_OUTGOING",
          "INTERNATIONAL_OUTGOING_RETURN",
          "INTERNATIONAL_OUTGOING_RETURN_REVERSAL",
          "INTERNATIONAL_OUTGOING_REVERSAL"
        ],
        "type": "string"
      },
      "withdrawal_request_model": {
        "properties": {
          "account_type": {
            "enum": [
              "checking",
              "credit",
              "savings"
            ],
            "type": "string"
          },
          "amount": {
            "description": "The amount of the transaction in the smallest whole denomination of the applicable currency (eg. For USD use cents)",
            "type": "integer"
          },
          "card_acceptor": {
            "$ref": "#/components/schemas/card_acceptor_model"
          },
          "card_id": {
            "format": "uuid",
            "type": "string"
          },
          "mid": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "pin": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "amount",
          "card_id",
          "mid"
        ],
        "type": "object"
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "bearerFormat": "api_key",
        "scheme": "bearer",
        "type": "http"
      }
    }
  },
  "info": {
    "description": "This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>",
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "title": "Synctera API",
    "version": "1.142.0"
  },
  "openapi": "3.0.3",
  "paths": {
    "/adverse_actions": {
      "get": {
        "operationId": "listAdverseActions",
        "parameters": [
          {
            "$ref": "#/components/parameters/related_resource_id_query"
          },
          {
            "$ref": "#/components/parameters/id_query"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/adverse_action_list"
                }
              }
            },
            "description": "List of adverse action notices."
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List adverse action notices",
        "tags": [
          "Adverse Actions (beta)"
        ],
        "x-external": true
      },
      "post": {
        "description": "An adverse action notice is required for Reg B and FCRA when an application to grant or increase credit is refused; a counteroffer is made; an credit account is terminated; the terms on the account has an unfavorable change. \n",
        "operationId": "createAdverseAction",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/adverse_action"
              }
            }
          },
          "description": "Adverse action notice to be created.",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/adverse_action_response"
                }
              }
            },
            "description": "Created adverse action notice."
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create an adverse action notice",
        "tags": [
          "Adverse Actions (beta)"
        ],
        "x-external": true
      }
    },
    "/adverse_actions/{adverse_action_id}": {
      "get": {
        "operationId": "getAdverseAction",
        "parameters": [
          {
            "$ref": "#/components/parameters/adverse_action_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/adverse_action_response"
                }
              }
            },
            "description": "An adverse action created in the system"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Retrieve an adverse action notice",
        "tags": [
          "Adverse Actions (beta)"
        ],
        "x-external": true
      }
    },
    "/applications": {
      "get": {
        "description": "> 🚧 Beta\n> This is an Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.\n\nList records of applications made for accounts.\n",
        "operationId": "listApplications",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_query_array"
          },
          {
            "$ref": "#/components/parameters/application_type"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/sort_by"
          },
          {
            "$ref": "#/components/parameters/application_status"
          },
          {
            "$ref": "#/components/parameters/business_id_query_array"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/application_list"
                }
              }
            },
            "description": "List of applications."
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List applications",
        "tags": [
          "Applications (beta)"
        ],
        "x-external": true
      },
      "post": {
        "description": "> 🚧 Beta\n> This is an Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.\n\nSubmit a record of application details for an account.\n",
        "operationId": "createApplication",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/application"
              }
            }
          },
          "description": "Application model.",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/application_response"
                }
              }
            },
            "description": "Application created."
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/already_exists"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create an application",
        "tags": [
          "Applications (beta)"
        ],
        "x-external": true
      },
      "summary": "Applications"
    },
    "/applications/{application_id}": {
      "get": {
        "description": "> 🚧 Beta\n> This is an Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.\n\nGet an application's details.\n",
        "operationId": "getApplication",
        "parameters": [
          {
            "$ref": "#/components/parameters/application_id_path"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/application_response"
                }
              }
            },
            "description": "Application returned."
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get an application",
        "tags": [
          "Applications (beta)"
        ],
        "x-external": true
      },
      "patch": {
        "description": "> 🚧 Beta\n> This is an Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.\n\nModify an existing application for an account.\n",
        "operationId": "patchApplication",
        "parameters": [
          {
            "$ref": "#/components/parameters/application_id_path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/application_patch"
              }
            }
          },
          "description": "Application fields to be patched.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/application_response"
                }
              }
            },
            "description": "Updated application."
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Modify an application",
        "tags": [
          "Applications (beta)"
        ],
        "x-external": true
      },
      "summary": "Application"
    },
    "/batch_templates": {
      "description": "The collection represents the templates that are used to create, update, and delete Batch Payment Templates.\n",
      "get": {
        "description": "Get all Batch Payment templates\n",
        "operationId": "getBatchPaymentTemplates",
        "parameters": [
          {
            "$ref": "#/components/parameters/batch_payment_template_name"
          },
          {
            "$ref": "#/components/parameters/batch_payment_template_enabled"
          },
          {
            "$ref": "#/components/parameters/batch_payment_template_description"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/batch_payment_templates"
                }
              }
            },
            "description": "Retrieve all Batch Payment templates"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get Batch Payment Templates",
        "tags": [
          "Batch Payments"
        ],
        "x-external": true
      },
      "post": {
        "description": "Create a Batch Payment template\n",
        "operationId": "createBatchPaymentTemplate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/batch_payment_template"
              }
            }
          },
          "description": "Attributes of the Batch Payment template",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/batch_payment_template"
                }
              }
            },
            "description": "Successful creation of a Batch Payment template"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create Batch Payment Template",
        "tags": [
          "Batch Payments"
        ],
        "x-external": true
      },
      "summary": "Batches"
    },
    "/batch_templates/{id}": {
      "description": "The collection represents the templates that are used to create, update, and delete Batch Payment Templates.\n",
      "get": {
        "description": "Get a Batch Payment template\n",
        "operationId": "getBatchPaymentTemplate",
        "parameters": [
          {
            "$ref": "#/components/parameters/id_path"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/batch_payment_template"
                }
              }
            },
            "description": "Retrieve a Batch Payment template"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get Batch Payment Template",
        "tags": [
          "Batch Payments"
        ],
        "x-external": true
      },
      "patch": {
        "description": "Update a Batch Payment template\n",
        "operationId": "updateBatchPaymentTemplate",
        "parameters": [
          {
            "$ref": "#/components/parameters/id_path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/batch_payment_template_patch"
              }
            }
          },
          "description": "Attributes of the Batch Payment template"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/batch_payment_template"
                }
              }
            },
            "description": "Successful update of a Batch Payment template"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Update Batch Payment Template",
        "tags": [
          "Batch Payments"
        ],
        "x-external": true
      },
      "summary": "Batches"
    },
    "/batches": {
      "description": "The collection represents the templates that are used to create, update, and delete batch payments.\n",
      "get": {
        "description": "Get all Batch Payments\n",
        "operationId": "getBatchPayments",
        "parameters": [
          {
            "$ref": "#/components/parameters/batch_payment_id"
          },
          {
            "$ref": "#/components/parameters/batch_payment_status"
          },
          {
            "$ref": "#/components/parameters/batch_payment_template_id"
          },
          {
            "$ref": "#/components/parameters/batch_payment_transaction_id"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/batch_payments"
                }
              }
            },
            "description": "Retrieve all Batch payments"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get Batch Payments",
        "tags": [
          "Batch Payments"
        ],
        "x-external": true
      },
      "post": {
        "description": "Create multiple batch payments\n",
        "operationId": "createBatchPayments",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_batch_payments_request"
              }
            }
          },
          "description": "Attributes of the Batch Payment"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/create_batch_payments_response"
                }
              }
            },
            "description": "Successful creation of a Batch Payment"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create Batch Payments",
        "tags": [
          "Batch Payments"
        ],
        "x-external": true
      },
      "summary": "Batches"
    },
    "/batches/{id}": {
      "description": "The collection represents the templates that are used to create, update, and delete Batches.\n",
      "get": {
        "description": "Get a Batch Payment\n",
        "operationId": "getBatchPayment",
        "parameters": [
          {
            "$ref": "#/components/parameters/id_path"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/batch_payment"
                }
              }
            },
            "description": "Retrieve a Batch Payment"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get BatchPayment",
        "tags": [
          "Batch Payments"
        ],
        "x-external": true
      },
      "patch": {
        "description": "Update a Batch Payment\n",
        "operationId": "updateBatchPayment",
        "parameters": [
          {
            "$ref": "#/components/parameters/id_path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/batch_payment_patch_request"
              }
            }
          },
          "description": "Attributes of the Batch Payment for udpate"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/batch_payment"
                }
              }
            },
            "description": "Successful update of a Batch Payment"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Update Batch Payment",
        "tags": [
          "Batch Payments"
        ],
        "x-external": true
      },
      "summary": "Batches"
    },
    "/cards": {
      "description": "The Card object represents your customer's spending card.\n",
      "get": {
        "description": "List of cards matching query parameters\n",
        "operationId": "listCards",
        "parameters": [
          {
            "$ref": "#/components/parameters/last_four_query"
          },
          {
            "$ref": "#/components/parameters/bulk_order_id_query"
          },
          {
            "$ref": "#/components/parameters/customer_id_query"
          },
          {
            "$ref": "#/components/parameters/card_brand_query"
          },
          {
            "$ref": "#/components/parameters/bin_prefix_query"
          },
          {
            "$ref": "#/components/parameters/emboss_name_query"
          },
          {
            "$ref": "#/components/parameters/bulk_order_config_id_query"
          },
          {
            "$ref": "#/components/parameters/form_query"
          },
          {
            "$ref": "#/components/parameters/expires_before_query"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/card_status_query"
          },
          {
            "$ref": "#/components/parameters/card_product_id_query"
          },
          {
            "$ref": "#/components/parameters/account_id_query_array"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/barcode_query"
          },
          {
            "$ref": "#/components/parameters/expiration_date_query"
          },
          {
            "$ref": "#/components/parameters/card_sort_by_query"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card_list_response"
                }
              }
            },
            "description": "Cards"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List Cards",
        "tags": [
          "Cards"
        ],
        "x-external": true,
        "x-permissions": [
          "cards:read"
        ]
      },
      "post": {
        "description": "Issue or reissue a new card for a customer\n",
        "operationId": "issueCard",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/card_issuance_request"
              }
            }
          },
          "description": "Card to issue",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card_response"
                }
              }
            },
            "description": "Card issued"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Issue a Card",
        "tags": [
          "Cards"
        ],
        "x-external": true
      },
      "summary": "Cards"
    },
    "/cards/activate": {
      "description": "Activate a card\n",
      "post": {
        "description": "Activate a card\n",
        "operationId": "activateCard",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/card_activation_request"
              }
            }
          },
          "description": "Card activation code",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card_response"
                }
              }
            },
            "description": "Card activated successfully"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Activate a card",
        "tags": [
          "Cards"
        ],
        "x-external": true
      },
      "summary": "Card Activation"
    },
    "/cards/bulk_issuance": {
      "description": "The bulk order object represents configuration for bulk issuance.\n",
      "get": {
        "description": "List bulk order configurations matching query parameters\n",
        "operationId": "listBulkOrderConfigs",
        "parameters": [
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/card_product_id_query"
          },
          {
            "$ref": "#/components/parameters/bulk_order_config_sort_by_query"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bulk_issuance_list_response"
                }
              }
            },
            "description": "Bulk order configurations"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List Bulk Order Configurations",
        "tags": [
          "Bulk Issuance"
        ],
        "x-external": true
      },
      "post": {
        "description": "Bulk card orders can be configured to ship cards in bulk.\n\nIn order to create a bulk order the associated card product needs to be configured for bulk issuance (Refer to Card Product `bulk_shipping_enabled`). \nOnce a Card Product is configured a bulk order can be created. \n\nCards are dynamically added to the bulk order using the `bulk_order_config_id` (Refer to Issue Card `bulk_order_config_id`) \nand will be shipped based on the `bulk_issuance_policy`. \n\nBulk orders configured with `AUTO` will be fulfilled daily at 9:30PM PST, all cards that have been added to the bulk order prior to the cutoff \nwill be shipped in the next bulk order, any subsequent cards will be added to the next days order. Bulk orders configured with `MANUAL` \nwill be shipped when an integrator sends a fulfillment request (Refer to Bulk Issuance Fulfill).\n",
        "operationId": "createBulkOrderConfig",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bulk_issuance_request"
              }
            }
          },
          "description": "Bulk issuance configuration",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bulk_issuance_response"
                }
              }
            },
            "description": "Bulk order configuration created"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create a bulk order configuration",
        "tags": [
          "Bulk Issuance"
        ],
        "x-external": true
      },
      "summary": "Bulk Issuance"
    },
    "/cards/bulk_issuance/{bulk_order_config_id}": {
      "description": "The bulk order object represents configuration for bulk issuance.\n",
      "get": {
        "description": "Get the details about a bulk order configuration.\n",
        "operationId": "getBulkOrderConfig",
        "parameters": [
          {
            "$ref": "#/components/parameters/bulk_order_config_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bulk_issuance_response"
                }
              }
            },
            "description": "Bulk order configuration details"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get bulk order configuration",
        "tags": [
          "Bulk Issuance"
        ],
        "x-external": true
      },
      "summary": "Bulk Issuance"
    },
    "/cards/bulk_issuance/{bulk_order_config_id}/fulfill": {
      "description": "The bulk order object represents configuration for bulk issuance.\n",
      "post": {
        "description": "Bulk orders configured with a `MANUAL` bulk issuance policy will be shipped when a fulfillment request is made (Refer to Bulk Orders `bulk_issuance_policy`).\n\nAll cards that have been created with the corresponding `bulk_order_config_id` since the previous fulfillment, will be included in the bulk order.\n",
        "operationId": "fulfillBulkOrder",
        "parameters": [
          {
            "$ref": "#/components/parameters/bulk_order_config_id"
          },
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "responses": {
          "202": {
            "description": "Bulk order has been accepted for processing."
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Fulfill a bulk order",
        "tags": [
          "Bulk Issuance"
        ],
        "x-external": true
      },
      "summary": "Bulk Issuance"
    },
    "/cards/card_widget_url": {
      "get": {
        "description": "This endpoint returns a URL address of the specified widget for a given card\n",
        "operationId": "getCardWidgetURL",
        "parameters": [
          {
            "description": "The ID of the card (required for set PIN widget)",
            "in": "query",
            "name": "card_id",
            "schema": {
              "$ref": "#/components/schemas/card_id"
            }
          },
          {
            "in": "query",
            "name": "account_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/account_id"
            }
          },
          {
            "in": "query",
            "name": "customer_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/customer_id1"
            }
          },
          {
            "description": "The type of widget for which to construct the URL",
            "in": "query",
            "name": "widget_type",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/widget_type"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card_widget_url_response"
                }
              }
            },
            "description": "Card issued"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get card widget URL",
        "tags": [
          "Cards"
        ],
        "x-external": true
      },
      "summary": "Get Card Widget URL"
    },
    "/cards/digital_wallet_tokens": {
      "get": {
        "description": "List Digital Wallet Tokens\n",
        "operationId": "listDigitalWalletTokens",
        "parameters": [
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/digital_wallet_token_state_query"
          },
          {
            "$ref": "#/components/parameters/card_id_query"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/token_list_response"
                }
              }
            },
            "description": "List of Digital Wallet Tokens of a card <br>NB: Digital wallet tokens cannot be created outside of production</br>\n"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List Digital Wallet Tokens",
        "tags": [
          "Digital Wallet Tokens"
        ],
        "x-external": true,
        "x-permissions": [
          "cards:read"
        ]
      }
    },
    "/cards/digital_wallet_tokens/{digital_wallet_token_id}": {
      "description": "The Digital Wallet token object represents your card's digital wallet token(s).\n",
      "get": {
        "description": "Get the details about the digital wallet token of a card\n<br>NB: Digital wallet tokens cannot be created outside of production</br>\n",
        "operationId": "getDigitalWalletToken",
        "parameters": [
          {
            "$ref": "#/components/parameters/digital_wallet_token_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/digital_wallet_token_response"
                }
              }
            },
            "description": "Digital Wallet Token details"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get Digital Wallet Token",
        "tags": [
          "Digital Wallet Tokens"
        ],
        "x-external": true
      },
      "patch": {
        "description": "The status of a digital wallet token can be updated as, ACTIVE to SUSPENDED, SUSPENDED to ACTIVE, ACTIVE to TERMINATED or SUSPENDED to TERMINATED.\n<br>NB: Digital wallet tokens cannot be created outside of production</br>\n",
        "operationId": "updateDigitalWalletTokenStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/digital_wallet_token_id"
          },
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/digital_wallet_token_edit_request"
              }
            }
          },
          "description": "Update Digital wallet token status",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/digital_wallet_token_response"
                }
              }
            },
            "description": "Digital wallet token Status updated"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Update Digital Wallet Token's life cycle status",
        "tags": [
          "Digital Wallet Tokens"
        ],
        "x-external": true
      },
      "summary": "Digital Wallet Token"
    },
    "/cards/gateways": {
      "description": "The Gateway object represents the Authorization gateway configuration.\n",
      "get": {
        "description": "List of gateways matching query parameters\n",
        "operationId": "listGateways",
        "parameters": [
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gateway_list_response"
                }
              }
            },
            "description": "Gateways"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List Gateways",
        "tags": [
          "Cards"
        ],
        "x-external": true
      },
      "post": {
        "callbacks": {
          "gateway_authorization": {
            "{$request.body#/url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/gateway_authorization"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "Approve the funding request.\n"
                  },
                  "402": {
                    "description": "Decline the funding request.\n*Note: while HTTP Code 402 is conventional, any code other than 200 will also be interpreted as a decline.\n"
                  }
                }
              }
            }
          }
        },
        "description": "Create a new Authorization Gateway Configuration\n",
        "operationId": "createGateway",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_gateway_request"
              }
            }
          },
          "description": "Create a new Authorization Gateway Configuration",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gateway_response"
                }
              }
            },
            "description": "New Authorization Gateway Configuration created"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create Gateway",
        "tags": [
          "Cards"
        ],
        "x-external": true
      },
      "summary": "Authorization Gateway Configuration"
    },
    "/cards/gateways/{gateway_id}": {
      "description": "The Gateway object represents the Authorization gateway configuration.\n",
      "get": {
        "description": "Get the details of an Authorization Gateway that has been configured\n",
        "operationId": "getGateway",
        "parameters": [
          {
            "$ref": "#/components/parameters/gateway_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gateway_response"
                }
              }
            },
            "description": "Gateway details"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get Gateway",
        "tags": [
          "Cards"
        ],
        "x-external": true
      },
      "patch": {
        "description": "Update Authorization Gateway configuration\n",
        "operationId": "updateGateway",
        "parameters": [
          {
            "$ref": "#/components/parameters/gateway_id"
          },
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_gateway_request"
              }
            }
          },
          "description": "Gateway edits",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gateway_response"
                }
              }
            },
            "description": "Gateway Updated"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Update Gateway",
        "tags": [
          "Cards"
        ],
        "x-external": true
      },
      "summary": "Authorization Gateway"
    },
    "/cards/images": {
      "get": {
        "description": "List all card image details\n",
        "operationId": "listCardImageDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_query_required"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card_image_details_list"
                }
              }
            },
            "description": "List of details for images uploaded by the given customer"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List Card Image Details",
        "tags": [
          "Cards"
        ],
        "x-external": true
      },
      "post": {
        "description": "Create a card image entity. Note that this does not include the image data itself. You can upload the image data via a subsequent uploadCardImageData request using the ID created here.\n",
        "operationId": "createCardImage",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_card_image_request"
              }
            }
          },
          "description": "Details of the image to create",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card_image_details"
                }
              }
            },
            "description": "Card image entity created"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create Card Image",
        "tags": [
          "Cards"
        ],
        "x-external": true
      }
    },
    "/cards/images/{card_image_id}": {
      "get": {
        "description": "Get card image details\n",
        "operationId": "getCardImageDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/card_image_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card_image_details"
                }
              }
            },
            "description": "Details of the card image"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get Card Image Details",
        "tags": [
          "Cards"
        ],
        "x-external": true
      },
      "patch": {
        "description": "Update card image details. The only detail that can be updated is the card status as APPROVED or REJECTED.\n",
        "operationId": "updateCardImageDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          },
          {
            "$ref": "#/components/parameters/card_image_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_card_image_request"
              }
            }
          },
          "description": "Details of the image to create",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card_image_details"
                }
              }
            },
            "description": "Details of the card image"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Update Card Image Details",
        "tags": [
          "Cards"
        ],
        "x-external": true
      }
    },
    "/cards/images/{card_image_id}/data": {
      "get": {
        "description": "Get card image data\n",
        "operationId": "getCardImageData",
        "parameters": [
          {
            "$ref": "#/components/parameters/card_image_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "image/jpeg": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "Image data"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get Card Image Data",
        "tags": [
          "Cards"
        ],
        "x-external": true
      },
      "post": {
        "description": "Upload card image data\n",
        "operationId": "uploadCardImageData",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          },
          {
            "$ref": "#/components/parameters/card_image_id"
          }
        ],
        "requestBody": {
          "content": {
            "image/jpeg": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            }
          },
          "description": "Binary image data",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card_image_details"
                }
              }
            },
            "description": "Card image data was successfully uploaded"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Upload Card Image",
        "tags": [
          "Cards"
        ],
        "x-external": true
      }
    },
    "/cards/products": {
      "get": {
        "description": "List of available Card Products\n",
        "operationId": "listCardProducts",
        "parameters": [
          {
            "$ref": "#/components/parameters/card_brand_query"
          },
          {
            "$ref": "#/components/parameters/form_query"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/card_product_sort_by_query"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card_product_list_response"
                }
              }
            },
            "description": "List of available Card Products"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List Card Products",
        "tags": [
          "Cards"
        ],
        "x-external": true,
        "x-permissions": [
          "cards:read"
        ]
      }
    },
    "/cards/three_ds_decision_gateways": {
      "description": "3DS Decision Gateways define endpoints to which the Synctera platform will send 3DS decision requests, allowing the integrator to make 3DS decisions on a per-transaction basis.\n",
      "get": {
        "description": "List of 3DS decision gateway matching query parameters\n",
        "operationId": "listThreeDsDecisionGateways",
        "parameters": [
          {
            "in": "query",
            "name": "is_active",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/card_product_id_query"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/three_ds_decision_gateway_list"
                }
              }
            },
            "description": "3DS Decision Gateway List"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List 3DS Decision Gateways",
        "tags": [
          "Cards"
        ],
        "x-external": true
      },
      "post": {
        "callbacks": {
          "three_ds_decision_gateway": {
            "{$request.body#/decision_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/three_ds_decision_gateway_request"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/three_ds_decision_gateway_decision"
                        }
                      }
                    },
                    "description": "Indicate your 3DS decision.\n*Note: If the Synctera platform sees a response status code other than `200` or can't decode the response body then it will use the gateway's `fallback_decision`.\n"
                  }
                }
              }
            }
          }
        },
        "description": "Create a new 3DS Decision Gateway\n",
        "operationId": "createThreeDsDecisionGateway",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_three_ds_decision_gateway_request"
              }
            }
          },
          "description": "The 3DS Decision Gateway to be created",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/three_ds_decision_gateway_response"
                }
              }
            },
            "description": "The newly-created 3DS Decision Gateway"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create 3DS Decision Gateway",
        "tags": [
          "Cards"
        ],
        "x-external": true
      },
      "summary": "3DS Decision Gateways"
    },
    "/cards/three_ds_decision_gateways/{id}": {
      "description": "3DS Decision Gateways define endpoints to which the Synctera platform will send 3DS decision requests, allowing the integrator to make 3DS decisions on a per-transaction basis.\n",
      "get": {
        "description": "Get the details of a 3DS Decision Gateway\n",
        "operationId": "getThreeDsDecisionGateway",
        "parameters": [
          {
            "$ref": "#/components/parameters/three_ds_decision_gateway_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/three_ds_decision_gateway_response"
                }
              }
            },
            "description": "3DS Decision Gateway details"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get 3DS DecisionGateway",
        "tags": [
          "Cards"
        ],
        "x-external": true
      },
      "patch": {
        "description": "Update 3DS Decision Gateway\n",
        "operationId": "updateThreeDsGateway",
        "parameters": [
          {
            "$ref": "#/components/parameters/three_ds_decision_gateway_id"
          },
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_three_ds_decision_gateway_request"
              }
            }
          },
          "description": "Updated 3DS Decision Gateway fields",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/three_ds_decision_gateway_response"
                }
              }
            },
            "description": "The updated 3DS Decision Gateway Updated"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Update 3DS Decision Gateway",
        "tags": [
          "Cards"
        ],
        "x-external": true
      },
      "summary": "3DS Decision Gateways"
    },
    "/cards/transaction_simulations/authorization": {
      "post": {
        "description": "> 🚧 Beta\n> This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.\n\nSimulate an `authorization` type transaction by including the `card_token` and other authorization details in your request.\n",
        "operationId": "simulateAuthorization",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/auth_request_model"
              }
            }
          },
          "description": "Authorization details"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/simulation_response_model"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Simulate authorization",
        "tags": [
          "Card Transaction Simulations (beta)"
        ],
        "x-external": true
      },
      "summary": "Simulate Authorization"
    },
    "/cards/transaction_simulations/authorization/advice": {
      "post": {
        "description": "> 🚧 Beta\n> This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.\n\nAn authorization advice allows an amount to be decreased after the authorization. This endpoint allows you to simulate post-swipe adjustments.\n\nSimulate an `authorization.advice` type transaction by including the `original_transaction_token` and other authorization details in your request.\n",
        "operationId": "simulateAuthorizationAdvice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/authorization_advice_model"
              }
            }
          },
          "description": "Authorization advice details"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/simulation_response_model"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Simulate authorization advice",
        "tags": [
          "Card Transaction Simulations (beta)"
        ],
        "x-external": true
      },
      "summary": "Simulate Authorization Advice"
    },
    "/cards/transaction_simulations/clearing": {
      "post": {
        "description": "> 🚧 Beta\n> This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.\n\nSimulate an `authorization.clearing` type transaction by including the `original_transaction_token` and `amount` in your request. To simulate a refund type transaction, set the `is_refund` field to true.\n",
        "operationId": "simulateClearing",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/clearing_model"
              }
            }
          },
          "description": "Transaction clearing or refund details"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/simulation_response_model"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Simulate clearing or refund",
        "tags": [
          "Card Transaction Simulations (beta)"
        ],
        "x-external": true
      },
      "summary": "Simulate Clearing or Refund"
    },
    "/cards/transaction_simulations/clearing/l2l3": {
      "post": {
        "description": "> 🚧 Alpha\n> This is a Alpha endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.\n\nSimulate a l2l3 type transaction by including the original_transaction_id and enhanced data in your request.\n\nL2L3 events enhance the data of a transaction with the `l2l3` details from your request.\n",
        "operationId": "simulatel2l3",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/l2l3_model"
              }
            }
          },
          "description": "L2l3 details",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/simulation_response_model"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Simulate L2l3",
        "tags": [
          "Card Transaction Simulations (beta)"
        ],
        "x-external": true
      },
      "summary": "Simulate L2l3"
    },
    "/cards/transaction_simulations/financial": {
      "post": {
        "description": "> 🚧 Beta\n> This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.\n\nA \"financial\" is a transaction message class that includes ATM transactions, PIN-debit transactions, and balance inquiries.\n\nSimulate a `pindebit` type transaction by including the `card_token` and `amount` in your request.\n",
        "operationId": "simulateFinancial",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/financial_request_model"
              }
            }
          },
          "description": "Financial details",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/simulation_response_model"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Simulate financial",
        "tags": [
          "Card Transaction Simulations (beta)"
        ],
        "x-external": true
      },
      "summary": "Simulate Financial"
    },
    "/cards/transaction_simulations/financial/advice": {
      "post": {
        "description": "> 🚧 Beta\n> This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.\n\nSimulate a financial advice by including the `original_transaction_token` and other authorization details in JSON format in the body of the request.\n",
        "operationId": "simulateFinancialAdvice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/authorization_advice_model"
              }
            }
          },
          "description": "Financial advice details",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/simulation_response_model"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Simulate financial advice",
        "tags": [
          "Card Transaction Simulations (beta)"
        ],
        "x-external": true
      },
      "summary": "Simulate Financial Advice"
    },
    "/cards/transaction_simulations/financial/balance_inquiry": {
      "post": {
        "description": "> 🚧 Beta\n> This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.\n\nSimulate a `pindebit.balanceinquiry` type transaction by sending a POST request to the `/simulate/financial/balanceinquiry` endpoint.\n",
        "operationId": "simulateBalanceInquiry",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/balance_inquiry_request_model"
              }
            }
          },
          "description": "Balance inquiry details",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/simulation_response_model"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Simulate balance inquiry",
        "tags": [
          "Card Transaction Simulations (beta)"
        ],
        "x-external": true
      },
      "summary": "Simulate Balance Inquiry"
    },
    "/cards/transaction_simulations/financial/original_credit": {
      "post": {
        "description": "> 🚧 Beta\n> This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.\n\nThis Original Credit Transaction (OCT) enables the cardholder to receive funds on the specified card from an external source via the card network. Use this endpoint to simulate a transaction that is similar to a wire transfer and not linked to any purchase.\n\nSimulate an OCT by including the `card_token`, `amount`, `mid`, and `type` in your request.\n",
        "operationId": "simulateOriginalCredit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/original_credit_request_model"
              }
            }
          },
          "description": "OCT details",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/simulation_response_model"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Simulate OCT",
        "tags": [
          "Card Transaction Simulations (beta)"
        ],
        "x-external": true
      },
      "summary": "Simulate OCT"
    },
    "/cards/transaction_simulations/financial/withdrawal": {
      "post": {
        "description": "> 🚧 Beta\n> This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.\n\nSimulate a `pindebit.atm.withdrawal` type transaction by including the `card_token` and `amount` in your request.\n",
        "operationId": "simulateWithdrawal",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/withdrawal_request_model"
              }
            }
          },
          "description": "ATM withdrawal details",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/simulation_response_model"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Simulate ATM withdrawal",
        "tags": [
          "Card Transaction Simulations (beta)"
        ],
        "x-external": true
      },
      "summary": "Simulate ATM Withdrawal"
    },
    "/cards/transaction_simulations/reversal": {
      "post": {
        "description": "> 🚧 Beta\n> This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.\n\nA reversal releases the hold that was placed on account funds by an authorization, thus returning the funds to the account.\n\nSimulate an `authorization.reversal` type transaction by including the `original_transaction_token` and `amount` in your request.\n",
        "operationId": "simulateReversal",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/reversal_model"
              }
            }
          },
          "description": "Reversal details",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/simulation_response_model"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Simulate reversal",
        "tags": [
          "Card Transaction Simulations (beta)"
        ],
        "x-external": true
      },
      "summary": "Simulate Reversal"
    },
    "/cards/{card_id}": {
      "description": "The Card object represents your customer's spending card.\n",
      "get": {
        "description": "Get the details about a card that has been issued\n",
        "operationId": "getCard",
        "parameters": [
          {
            "$ref": "#/components/parameters/card_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card_response"
                }
              }
            },
            "description": "Card details"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get Card",
        "tags": [
          "Cards"
        ],
        "x-external": true,
        "x-permissions": [
          "cards:read"
        ]
      },
      "patch": {
        "description": "Integrators can update the card resource to change status, update shipping (if the card hasn't been shipped) or edit metadata.\n",
        "operationId": "updateCard",
        "parameters": [
          {
            "$ref": "#/components/parameters/card_id"
          },
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/card_edit_request"
              }
            }
          },
          "description": "Card edits",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card_response"
                }
              }
            },
            "description": "Card issued"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Update Card",
        "tags": [
          "Cards"
        ],
        "x-external": true
      },
      "summary": "Cards"
    },
    "/cards/{card_id}/barcodes": {
      "get": {
        "description": "This endpoint is for testing environment only to provide access to barcode of a test card\n",
        "operationId": "getCardBarcode",
        "parameters": [
          {
            "$ref": "#/components/parameters/card_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "barcode": {
                      "description": "Barcode of the card",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Barcode"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get Card Barcode",
        "tags": [
          "Cards"
        ],
        "x-external": true
      },
      "summary": "Cards"
    },
    "/cards/{card_id}/client_token": {
      "description": "Client access token for accessing privileged details about a card\n",
      "post": {
        "description": "Create a client access token for interacting with a card.  This token will be used on the client to identify the card for flows like viewing Full PAN or setting the PIN in a PCI compliant manner.\n",
        "operationId": "getClientAccessToken",
        "parameters": [
          {
            "$ref": "#/components/parameters/card_id"
          },
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/client_token"
                }
              }
            },
            "description": "Client token"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get a client token",
        "tags": [
          "Cards"
        ],
        "x-external": true
      },
      "summary": "Get Client Access Token"
    },
    "/cards/{card_id}/digital_wallet_tokens/applepay": {
      "post": {
        "operationId": "createDigitalWalletApple",
        "parameters": [
          {
            "$ref": "#/components/parameters/card_id"
          },
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/apple_digital_wallet_provision_request"
              }
            }
          },
          "description": "Request to provision digital wallet card data to pass to Apple Pay digital wallet.\n> ⚠️ Cannot be used outside of production.\n",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apple_digital_wallet_provision_response"
                }
              }
            },
            "description": "Digital wallet token provision request data"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create digital wallet token provision request for Apple Pay",
        "tags": [
          "Digital Wallet Tokens"
        ],
        "x-external": true
      }
    },
    "/cards/{card_id}/digital_wallet_tokens/googlepay": {
      "post": {
        "operationId": "createDigitalWalletGoogle",
        "parameters": [
          {
            "$ref": "#/components/parameters/card_id"
          },
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/google_digital_wallet_provision_request"
              }
            }
          },
          "description": "Request to provision digital wallet card data to pass to Google Pay digital wallet.\n> ⚠️ Cannot be used outside of production.\n",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google_digital_wallet_provision_response"
                }
              }
            },
            "description": "Digital wallet token provision request data"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create digital wallet token provision request for Google Pay",
        "tags": [
          "Digital Wallet Tokens"
        ],
        "x-external": true
      }
    },
    "/cards/{card_id}/pin": {
      "post": {
        "description": "> 🚧 PCI Compliance \n> This endpoint requires PCI compliance. If you are PCI compliant and want this endpoint enabled, please work with your Synctera representative.\n\nSet a new PIN for a card\n",
        "operationId": "setCardPIN",
        "parameters": [
          {
            "$ref": "#/components/parameters/card_id"
          },
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/set_pin_request"
              }
            }
          },
          "description": "New PIN",
          "required": true
        },
        "responses": {
          "204": {
            "description": "PIN has been set"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Set Card PIN",
        "tags": [
          "Cards"
        ],
        "x-external": true
      }
    },
    "/cards/{card_id}/reveal": {
      "get": {
        "description": "> 🚧 PCI Compliance \n> This endpoint requires PCI compliance. If you are PCI compliant and want this endpoint enabled, please work with your Synctera representative.\n\nReveal card details \n",
        "operationId": "revealCardDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/card_id"
          },
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card_reveal_response"
                }
              }
            },
            "description": "Card details"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Reveal Card Details",
        "tags": [
          "Cards"
        ],
        "x-external": true
      }
    },
    "/cards/{card_id}/webhook_simulations/fulfillment": {
      "description": "Simulate card fulfillment event\n",
      "post": {
        "description": "> 🚧 Beta\n> This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.\n\nThis endpoint is for testing environment only to trigger a simulated change in card fulfillment status event\n",
        "operationId": "simulateCardFulfillmentEvent",
        "parameters": [
          {
            "$ref": "#/components/parameters/card_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/simulate_card_fulfillment"
              }
            }
          },
          "description": "Desired simulated fulfillment status change value",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/simulate_card_fulfillment"
                }
              }
            },
            "description": "Simulated fulfillment status change value"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Simulate Card Fulfillment Event",
        "tags": [
          "Card Webhook Simulations (beta)"
        ],
        "x-external": true
      },
      "summary": "Card Webhook Simulations"
    },
    "/cards/{card_id}/widget_token": {
      "description": "Get an ephemeral token for use with Synctera widgets.\n",
      "get": {
        "description": "Create an ephemeral (short-term, limited-scope) access token for interacting with a card via Synctera widgets.\n",
        "operationId": "getWidgetAccessToken",
        "parameters": [
          {
            "$ref": "#/components/parameters/card_id"
          },
          {
            "$ref": "#/components/parameters/card_widget_type_query"
          },
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/widget_token"
                }
              }
            },
            "description": "Client token"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get a widget access token",
        "tags": [
          "Cards"
        ],
        "x-external": true
      },
      "summary": "Get Card Widget Access Token"
    },
    "/cash/barcodes": {
      "get": {
        "description": "Get a list of barcodes\n> 🚧 Alpha > This is an Alpha spec-only endpoint. Feedback from the community is welcome. We may make breaking changes.\n",
        "operationId": "getBarcodes",
        "parameters": [
          {
            "description": "Case insensitive wildcard search for barcode_number, wildcards can be specified with '*'. Wildcards at both the start and the end of the input is assumed.",
            "in": "query",
            "name": "barcode_number_like",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Case insensitive wildcard search for upc, wildcards can be specified with '*'. Wildcards at both the start and the end of the input is assumed.",
            "in": "query",
            "name": "upc_like",
            "schema": {
              "type": "string"
            }
          },
          {
            "explode": false,
            "in": "query",
            "name": "barcode_number",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "to_timestamp_valid_to",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "explode": false,
            "in": "query",
            "name": "account_id",
            "schema": {
              "items": {
                "format": "uuid",
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "from_creation_time",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "from_last_updated_time",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "explode": false,
            "in": "query",
            "name": "type",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/barcode_type"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "explode": false,
            "in": "query",
            "name": "upc",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "to_last_updated_time",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "explode": false,
            "in": "query",
            "name": "tenant",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/tenant_id"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "description": "Case insensitive wildcard search for biller_id, wildcards can be specified with '*'. Wildcards at both the start and the end of the input is assumed.",
            "in": "query",
            "name": "biller_id_like",
            "schema": {
              "type": "string"
            }
          },
          {
            "explode": false,
            "in": "query",
            "name": "status",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/barcode_status"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "from_timestamp_valid_to",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "explode": false,
            "in": "query",
            "name": "sort_by",
            "schema": {
              "items": {
                "enum": [
                  "creation_time:asc",
                  "creation_time:desc",
                  "last_updated_time:asc",
                  "last_updated_time:desc",
                  "timestamp_valid_to:asc",
                  "timestamp_valid_to:desc"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "in": "query",
            "name": "to_creation_time",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "explode": false,
            "in": "query",
            "name": "customer_id",
            "schema": {
              "items": {
                "format": "uuid",
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "explode": false,
            "in": "query",
            "name": "biller_id",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "explode": false,
            "in": "query",
            "name": "id",
            "schema": {
              "items": {
                "format": "uuid",
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/barcode_list_response"
                }
              }
            },
            "description": "Successful retrieval of barcodes"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get a list of barcodes",
        "tags": [
          "In-Store Cash Deposits (alpha)"
        ],
        "x-alpha": true,
        "x-external": true
      },
      "post": {
        "description": "Create a barcode for a cash transaction \n> 🚧 Alpha > This is an Alpha spec-only endpoint. Feedback from the community is welcome. We may make breaking changes.\n",
        "operationId": "createBarcode",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_barcode_request"
              }
            }
          },
          "description": "The barcode to be created."
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/barcode_response"
                }
              }
            },
            "description": "Successful creation of a barcode"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create a barcode for a cash transaction",
        "tags": [
          "In-Store Cash Deposits (alpha)"
        ],
        "x-alpha": true,
        "x-external": true
      }
    },
    "/cash/barcodes/retailer_map_url": {
      "get": {
        "description": "Get the available retailer map URL\n> 🚧 Alpha > This is an Alpha spec-only endpoint. Feedback from the community is welcome. We may make breaking changes.\n",
        "operationId": "getRetailerMapUrl",
        "parameters": [
          {
            "$ref": "#/components/parameters/lat"
          },
          {
            "$ref": "#/components/parameters/lng"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/barcode_retailer_map_url_response"
                }
              }
            },
            "description": "Successful retrieval of the retailer map URL"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get the available retailer map URL.",
        "tags": [
          "In-Store Cash Deposits (alpha)"
        ],
        "x-alpha": true,
        "x-external": true
      }
    },
    "/cash/barcodes/{barcode_id}": {
      "get": {
        "description": "Get a barcode\n> 🚧 Alpha > This is an Alpha spec-only endpoint. Feedback from the community is welcome. We may make breaking changes.\n",
        "operationId": "getBarcode",
        "parameters": [
          {
            "$ref": "#/components/parameters/barcode_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/barcode_response"
                }
              }
            },
            "description": "Successful retrieval of barcode"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get a barcode",
        "tags": [
          "In-Store Cash Deposits (alpha)"
        ],
        "x-alpha": true,
        "x-external": true
      },
      "patch": {
        "description": "Update a barcode\n> 🚧 Alpha > This is an Alpha spec-only endpoint. Feedback from the community is welcome. We may make breaking changes.\n",
        "operationId": "updateBarcode",
        "parameters": [
          {
            "$ref": "#/components/parameters/barcode_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/barcode_patch_request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/barcode_response"
                }
              }
            },
            "description": "Successful update of barcode"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Update a barcode",
        "tags": [
          "In-Store Cash Deposits (alpha)"
        ],
        "x-alpha": true,
        "x-external": true
      }
    },
    "/cash/transaction_simulations/barcodes/deposit": {
      "post": {
        "description": "Create a cash deposit transaction simulation for a barcode\n",
        "operationId": "createBarcodeDepositSimulation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/barcode_deposit_simulation_request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successfully created the cash deposit transaction simulation"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create a cash deposit transaction simulation for a barcode",
        "tags": [
          "Cash Transaction Simulations (alpha)"
        ],
        "x-alpha": true,
        "x-external": true
      }
    },
    "/cash/transaction_simulations/barcodes/stores": {
      "get": {
        "description": "Retrieve store information for a barcode transaction simulation\n",
        "operationId": "getBarcodeSimulationStore",
        "parameters": [
          {
            "in": "query",
            "name": "radius",
            "schema": {
              "default": 1000,
              "description": "Radius in miles to search for stores",
              "example": 500,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "description": "Maximum number of stores to return per page",
              "example": 100,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "lat",
            "required": true,
            "schema": {
              "description": "Latitude of the store location for simulation",
              "example": 37.7749,
              "format": "float",
              "type": "number"
            }
          },
          {
            "in": "query",
            "name": "lng",
            "required": true,
            "schema": {
              "description": "Longitude of the store location for simulation",
              "example": -122.4194,
              "format": "float",
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "stores": {
                      "items": {
                        "$ref": "#/components/schemas/barcode_simulation_store_response"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successful retrieval of store information"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Retrieve Store Information for Barcode Simulation",
        "tags": [
          "Cash Transaction Simulations (alpha)"
        ],
        "x-alpha": true,
        "x-external": true
      }
    },
    "/certificates/applepay/csr": {
      "post": {
        "description": "Generates and returns a Certificate Signing Request (CSR) that can be used to create an Apple Pay Payment Processing Certificate in the Apple Developer Portal.\n",
        "operationId": "createApplePayCsr",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/applepay_csr_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "The `.csr` file was successfully created. The response contains the `.csr` in PEM format, which can be used to create an Apple Pay Payment Processing Certificate in the Apple Developer Portal.\n"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create an Apple Pay CSR",
        "tags": [
          "Apple Pay"
        ],
        "x-external": true
      },
      "summary": "Apple Pay CSR"
    },
    "/credit_scores": {
      "get": {
        "operationId": "listCreditScores",
        "parameters": [
          {
            "$ref": "#/components/parameters/credit_score_id_query"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/customer_id_query1"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/credit_score_list"
                }
              }
            },
            "description": "list of credit scores"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List credit scores",
        "tags": [
          "Credit Scores"
        ],
        "x-external": true
      },
      "post": {
        "description": "Credit score under customers that can link to accounts and applications\n",
        "operationId": "createCreditScores",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/credit_score"
              }
            }
          },
          "description": "credit score to be created",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/credit_score_response"
                }
              }
            },
            "description": "Created credit score."
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create a credit score and associate it with a customer",
        "tags": [
          "Credit Scores"
        ],
        "x-external": true
      }
    },
    "/credit_scores/{credit_score_id}": {
      "get": {
        "operationId": "getCreditScore",
        "parameters": [
          {
            "$ref": "#/components/parameters/credit_score_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/credit_score_response"
                }
              }
            },
            "description": "credit score of the customer"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Retrieve a credit score",
        "tags": [
          "Credit Scores"
        ],
        "x-external": true
      }
    },
    "/disputes": {
      "description": "The dispute object represents a disputed transaction.\n",
      "get": {
        "description": "Get paginated list of disputes\n",
        "operationId": "listDisputes",
        "parameters": [
          {
            "$ref": "#/components/parameters/to_date_query"
          },
          {
            "$ref": "#/components/parameters/transaction_id_query"
          },
          {
            "$ref": "#/components/parameters/related_transaction_id_query"
          },
          {
            "$ref": "#/components/parameters/account_id"
          },
          {
            "$ref": "#/components/parameters/payment_rail_query"
          },
          {
            "$ref": "#/components/parameters/start_time_query"
          },
          {
            "$ref": "#/components/parameters/dispute_status_query"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/end_time_query"
          },
          {
            "$ref": "#/components/parameters/from_date_query"
          },
          {
            "$ref": "#/components/parameters/dispute_decision_query"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dispute_list"
                }
              }
            },
            "description": "List of disputes"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List disputes",
        "tags": [
          "Disputes"
        ],
        "x-external": true,
        "x-permissions": [
          "disputes:read"
        ]
      },
      "post": {
        "description": "Create a dispute against a transaction.\n",
        "operationId": "createDispute",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dispute_request"
              }
            }
          },
          "description": "Details of the disputed transaction.",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dispute_response"
                }
              }
            },
            "description": "Dispute created"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Dispute a transaction",
        "tags": [
          "Disputes"
        ],
        "x-external": true
      },
      "summary": "Disputes"
    },
    "/disputes/documents/{document_id}/contents": {
      "get": {
        "description": "Returns the bytes of the requested document",
        "operationId": "getDisputeDocumentContents",
        "parameters": [
          {
            "$ref": "#/components/parameters/document_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "The request dispute document"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get dispute document contents",
        "tags": [
          "Disputes"
        ],
        "x-external": true
      }
    },
    "/disputes/simulations/{dispute_id}/actions": {
      "post": {
        "description": "> 🚧 Beta\n> This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced.\n\nThis endpoint is intended for use only in the testing environment to simulate a network action on a dispute.\n",
        "operationId": "simulateDisputeAction",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          },
          {
            "$ref": "#/components/parameters/dispute_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dispute_action_request"
              }
            }
          },
          "description": "Details of the simulated dispute action",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dispute_action_response"
                }
              }
            },
            "description": "Successfully simulated dispute action"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Simulate a network dispute action",
        "tags": [
          "Dispute Simulations (Beta)"
        ],
        "x-external": true
      }
    },
    "/disputes/{dispute_id}": {
      "get": {
        "description": "Get a dispute by ID.\n",
        "operationId": "getDispute",
        "parameters": [
          {
            "$ref": "#/components/parameters/dispute_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dispute_response"
                }
              }
            },
            "description": "Returned dispute"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get a Dispute",
        "tags": [
          "Disputes"
        ],
        "x-external": true
      },
      "patch": {
        "description": "Update a dispute.\n",
        "operationId": "updateDispute",
        "parameters": [
          {
            "$ref": "#/components/parameters/dispute_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dispute_patch_request"
              }
            }
          },
          "description": "Dispute update request body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dispute_response"
                }
              }
            },
            "description": "Returned dispute"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Update a dispute",
        "tags": [
          "Disputes"
        ],
        "x-external": true
      }
    },
    "/disputes/{dispute_id}/actions": {
      "post": {
        "description": "Create an action on a disputed transaction\n",
        "operationId": "createAction",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          },
          {
            "$ref": "#/components/parameters/dispute_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dispute_action_request"
              }
            }
          },
          "description": "Details of the dispute action",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dispute_action_response"
                }
              }
            },
            "description": "Successfully created dispute action"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create a dispute action",
        "tags": [
          "Disputes"
        ],
        "x-external": true
      }
    },
    "/disputes/{dispute_id}/documents": {
      "post": {
        "description": "Add a supporting document to a dispute object\n",
        "operationId": "addDisputeDocument",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          },
          {
            "$ref": "#/components/parameters/dispute_id"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/dispute_document_request"
              }
            }
          },
          "description": "Details of the document.",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dispute_document_response"
                }
              }
            },
            "description": "Dispute document added"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Add a document to a dispute",
        "tags": [
          "Disputes"
        ],
        "x-external": true
      }
    },
    "/external_cards": {
      "get": {
        "description": "List External Cards\n",
        "operationId": "listExternalCards",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_query"
          },
          {
            "$ref": "#/components/parameters/business_id_query"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/external_card_status_query"
          },
          {
            "$ref": "#/components/parameters/payment_account_reference"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/external_card_list_response"
                }
              }
            },
            "description": "External Card list"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List External Cards",
        "tags": [
          "External Cards"
        ],
        "x-external": true
      }
    },
    "/external_cards/authenticate_3ds": {
      "post": {
        "description": "Validates the results of an External Card Transfer 3DS authentication challenge.\n",
        "operationId": "authenticate3DS",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/authenticate_3ds_request"
              }
            }
          },
          "description": "Details of the External Card Transfer 3DS authentication challenge validation.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authenticate_3ds_response"
                }
              }
            },
            "description": "External Card Transfer 3DS authentication challenge validation complete"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Authenticate 3DS",
        "tags": [
          "External Cards"
        ],
        "x-external": true
      }
    },
    "/external_cards/initialize_3ds": {
      "post": {
        "description": "Initializes an External Card Transfer 3DS authentication.\n",
        "operationId": "initialize3DS",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/initialize_3ds_request"
              }
            }
          },
          "description": "Details of the External Card Transfer 3DS authentication to initialize.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/initialize_3ds_response"
                }
              }
            },
            "description": "External Card Transfer 3DS authentication initialized"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Initialize 3DS",
        "tags": [
          "External Cards"
        ],
        "x-external": true
      }
    },
    "/external_cards/lookup_3ds": {
      "post": {
        "description": "Using device collection data, performs a lookup for an External Card Transfer 3DS authentication. The results will indicate whether the transfer is successfully authenticated or if a 3DS challenge is required.\n",
        "operationId": "lookup3DS",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/lookup_3ds_request"
              }
            }
          },
          "description": "Details of the External Card Transfer 3DS authentication lookup.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/lookup_3ds_response"
                }
              }
            },
            "description": "External Card Transfer 3DS authentication lookup complete"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Lookup 3DS",
        "tags": [
          "External Cards"
        ],
        "x-external": true
      }
    },
    "/external_cards/tokens": {
      "post": {
        "description": "Create an External Card from token. The token and cardholder name are obtained through the iFrame. The token must be used within 5 minutes or else it will expire. If a Business ID is provided, address verification will be performed against the legal address of the business. Otherwise, the legal address of the Customer will be used. In either case, the name of the Customer will be used to match against the cardholder name.\n\nEach unique External Card is limited to a single Customer, so once an External Card is created for a Customer, it cannot be used for any other Customers, even if the card is deleted. Given there is a limited number of test cards, to allow easier testing, this restriction is relaxed in the sandbox environment.\n",
        "operationId": "createExternalCardFromToken",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/external_card_request"
              }
            }
          },
          "description": "Details of the External Card to create",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/external_card_response"
                }
              }
            },
            "description": "External Card created"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create External Card from token",
        "tags": [
          "External Cards"
        ],
        "x-external": true
      }
    },
    "/external_cards/transfers": {
      "get": {
        "description": "List External Card Transfers\n",
        "operationId": "listExternalCardTransfers",
        "parameters": [
          {
            "explode": false,
            "in": "query",
            "name": "type",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/transfer_type"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "explode": false,
            "in": "query",
            "name": "amount",
            "schema": {
              "items": {
                "type": "integer"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "explode": false,
            "in": "query",
            "name": "three_ds_id",
            "schema": {
              "items": {
                "format": "uuid",
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "explode": false,
            "in": "query",
            "name": "originating_account_id",
            "schema": {
              "items": {
                "format": "uuid",
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "explode": false,
            "in": "query",
            "name": "account_id",
            "schema": {
              "items": {
                "format": "uuid",
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "from_creation_time",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "explode": false,
            "in": "query",
            "name": "status",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/transfer_status"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "explode": false,
            "in": "query",
            "name": "originating_customer_id",
            "schema": {
              "items": {
                "format": "uuid",
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "from_last_updated_time",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "from_amount",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "to_last_updated_time",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "to_amount",
            "schema": {
              "type": "integer"
            }
          },
          {
            "explode": false,
            "in": "query",
            "name": "tenant",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/tenant_id"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "explode": false,
            "in": "query",
            "name": "external_card_id",
            "schema": {
              "items": {
                "format": "uuid",
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "explode": false,
            "in": "query",
            "name": "transaction_id",
            "schema": {
              "items": {
                "format": "uuid",
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "explode": false,
            "in": "query",
            "name": "original_transfer_id",
            "schema": {
              "items": {
                "format": "uuid",
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "to_creation_time",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "payment_account_reference",
            "schema": {
              "type": "string"
            }
          },
          {
            "explode": false,
            "in": "query",
            "name": "customer_id",
            "schema": {
              "items": {
                "format": "uuid",
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "explode": false,
            "in": "query",
            "name": "id",
            "schema": {
              "items": {
                "format": "uuid",
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transfer_list_response"
                }
              }
            },
            "description": "External Card Transfer list"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List External Transfers",
        "tags": [
          "External Cards"
        ],
        "x-external": true
      },
      "post": {
        "description": "Create External Card Transfer\n",
        "operationId": "createExternalCardTransfer",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/transfer_request"
              }
            }
          },
          "description": "Details of the External Card Transfer to create",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/create_transfer_response"
                }
              }
            },
            "description": "External Card Transfer created"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create External Card Transfer",
        "tags": [
          "External Cards"
        ],
        "x-external": true
      }
    },
    "/external_cards/transfers/applepay": {
      "post": {
        "description": "> 🚧 Alpha\n> Apple Pay transfers is currently in Alpha release and spec is subject to change.\n\nCreate External Card Transfer using an Apple Pay card\n",
        "operationId": "createApplePayExternalCardTransfer",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/transfer_request_apple_pay"
              }
            }
          },
          "description": "Details of the Apple Pay External Card Transfer to create",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/create_transfer_response_apple_pay"
                }
              }
            },
            "description": "Apple Pay External Card Transfer created"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create Apple Pay External Card Transfer",
        "tags": [
          "External Cards"
        ],
        "x-external": true
      }
    },
    "/external_cards/transfers/googlepay": {
      "post": {
        "description": "> 🚧 Alpha\n> Google Pay transfers is currently in Alpha release and spec is subject to change.\n\nCreate External Card Transfer using a Google Pay card.\n",
        "operationId": "createGooglePayExternalCardTransfer",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/transfer_request_google_pay"
              }
            }
          },
          "description": "Details of the Google Pay External Card Transfer to create",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/create_transfer_response_google_pay"
                }
              }
            },
            "description": "Google Pay External Card Transfer created"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create Google Pay External Card Transfer",
        "tags": [
          "External Cards"
        ],
        "x-external": true
      }
    },
    "/external_cards/transfers/{transfer_id}": {
      "description": "External Card Transfer\n",
      "get": {
        "description": "Get External Card Transfer\n",
        "operationId": "getExternalCardTransfer",
        "parameters": [
          {
            "$ref": "#/components/parameters/transfer_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transfer_response"
                }
              }
            },
            "description": "External Card Transfer details"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get External Card Transfer",
        "tags": [
          "External Cards"
        ],
        "x-external": true
      },
      "summary": "External Card Transfer"
    },
    "/external_cards/transfers/{transfer_id}/reversals": {
      "post": {
        "description": "Create External Card Transfer Reversal\n",
        "operationId": "createExternalCardTransferReversal",
        "parameters": [
          {
            "$ref": "#/components/parameters/transfer_id"
          },
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/transfer_reversal_request"
              }
            }
          },
          "description": "Details of the External Card Transfer Reversal to create",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transfer_response"
                }
              }
            },
            "description": "External Card Transfer Reversal created"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create External Card Transfer Reversal",
        "tags": [
          "External Cards"
        ],
        "x-external": true
      }
    },
    "/external_cards/{external_card_id}": {
      "delete": {
        "description": "Delete an External Card \n",
        "operationId": "deleteExternalCard",
        "parameters": [
          {
            "$ref": "#/components/parameters/external_card_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/delete_response"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Delete External Card",
        "tags": [
          "External Cards"
        ],
        "x-external": true
      },
      "description": "External Card\n",
      "get": {
        "description": "Get External Card\n",
        "operationId": "getExternalCard",
        "parameters": [
          {
            "$ref": "#/components/parameters/external_card_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/external_card_response"
                }
              }
            },
            "description": "External Card details"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get External Card",
        "tags": [
          "External Cards"
        ],
        "x-external": true
      },
      "patch": {
        "description": "Update External Card data\n",
        "operationId": "updateExternalCard",
        "parameters": [
          {
            "$ref": "#/components/parameters/external_card_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/external_card_update_request"
              }
            }
          },
          "description": "Fields to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/external_card_response"
                }
              }
            },
            "description": "External Card details"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Update External Card",
        "tags": [
          "External Cards"
        ],
        "x-external": true
      },
      "summary": "Get External Card"
    },
    "/fdx_auth_requests": {
      "get": {
        "description": "> 🚧 Beta\n> This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.\n\nGet paginated list of FDX authorization requests\n",
        "operationId": "listFDXAuthRequests",
        "parameters": [
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fdx_auth_request_list"
                }
              }
            },
            "description": "List of FDX authorization requests"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List FDX authorization requests",
        "tags": [
          "Plaid Core Exchange (beta)"
        ],
        "x-external": true
      },
      "summary": "FDX authorization requests"
    },
    "/fdx_auth_requests/authorization_test": {
      "get": {
        "description": "Use this endpoint to initiate a test of the Plaid Core Exchange authorization flow. Your configured Authentication URI will be returned in the response body which you can navigate to in browser, then perform your authentication process using the appended auth_request_id. If that authentication is successful, this flow should end by redirecting to our success page from the authorize response.\nThis endpoint is only supported in the sandbox environment.\n",
        "operationId": "getAuthorizationTest",
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/test_authorize_response"
                }
              }
            },
            "description": "redirect response url to the authentication page"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/already_exists"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Authorization Test",
        "tags": [
          "Plaid Core Exchange (beta)"
        ],
        "x-external": true
      },
      "summary": "FDX authorization requests"
    },
    "/fdx_auth_requests/authorize": {
      "post": {
        "description": "> 🚧 Beta\n> This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.\n\nGrant or deny an FDX authorization request\n",
        "operationId": "grantFdxAuthRequest",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/fdx_auth_grant_post"
              }
            }
          },
          "description": "FDX authorization grant",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fdx_auth_grant_response"
                }
              }
            },
            "description": "FDX authorization grant response"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/already_exists"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Grant an FDX authorization request",
        "tags": [
          "Plaid Core Exchange (beta)"
        ],
        "x-external": true
      },
      "summary": "FDX authorization"
    },
    "/fdx_tokens": {
      "get": {
        "description": "> 🚧 Beta\n> This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.\n\nGet paginated list of FDX tokens\n",
        "operationId": "listFDXToken",
        "parameters": [
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fdx_token_list"
                }
              }
            },
            "description": "List of FDX tokens"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List tokens",
        "tags": [
          "Plaid Core Exchange (beta)"
        ],
        "x-external": true
      },
      "summary": "FDX token"
    },
    "/fdx_tokens/{fdx_token_id}": {
      "get": {
        "description": "> 🚧 Beta\n> This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.\n\nGet an FDX token\n",
        "operationId": "getFDXToken",
        "parameters": [
          {
            "$ref": "#/components/parameters/fdx_token_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fdx_token_response"
                }
              }
            },
            "description": "FDX token"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get an FDX token",
        "tags": [
          "Plaid Core Exchange (beta)"
        ],
        "x-external": true
      },
      "summary": "FDX token"
    },
    "/fee_templates": {
      "get": {
        "description": "> 🚧 Beta\n> This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced.\n\nGet paginated list of fee templates\n",
        "operationId": "listFeetemplates",
        "parameters": [
          {
            "$ref": "#/components/parameters/fee_template_id_query"
          },
          {
            "$ref": "#/components/parameters/fee_template_subtype_query"
          },
          {
            "$ref": "#/components/parameters/fee_template_sort_by_query"
          },
          {
            "$ref": "#/components/parameters/fee_template_is_enabled_query"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/fee_template_description_query"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fee_template_list"
                }
              }
            },
            "description": "List of fee templates"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List fee templates",
        "tags": [
          "Fees (beta)"
        ],
        "x-external": true
      },
      "post": {
        "description": "> 🚧 Beta\n> This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced.\n\nCreate a fee template\nA fee template defines the properties of a fee that a fintech wishes to\nuse to easily charge their customers. The fintech can then create fee templates for different\namounts or categories of fees that represent different instances of services or charges\n",
        "operationId": "createFeeTemplate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/fee_template_post"
              }
            }
          },
          "description": "Fee to create\n\n> 🚧 Beta\n> This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced.\n",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fee_template_response"
                }
              }
            },
            "description": "Created fee template"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/already_exists"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create a fee template",
        "tags": [
          "Fees (beta)"
        ],
        "x-external": true
      },
      "summary": "Fees"
    },
    "/fee_templates/{fee_template_id}": {
      "get": {
        "description": "Get a fee template by ID.\n\n> 🚧 Beta\n> This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced.\n",
        "operationId": "getFeeTemplate",
        "parameters": [
          {
            "$ref": "#/components/parameters/fee_template_id_path"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fee_template_response"
                }
              }
            },
            "description": "Returned fee template"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get a Fee template",
        "tags": [
          "Fees (beta)"
        ],
        "x-external": true
      },
      "patch": {
        "description": "Update a fee template by ID.\n\n> 🚧 Beta\n> This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced.\n",
        "operationId": "patchFeeTemplate",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          },
          {
            "$ref": "#/components/parameters/fee_template_id_path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/fee_template_patch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fee_template_response"
                }
              }
            },
            "description": "Updated fee template"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Patch Fee Template",
        "tags": [
          "Fees (beta)"
        ],
        "x-external": true
      }
    },
    "/fees": {
      "get": {
        "description": "Get paginated list of fees\n\n> 🚧 Beta\n> This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced.\n",
        "operationId": "listFees",
        "parameters": [
          {
            "$ref": "#/components/parameters/fee_end_time_query"
          },
          {
            "$ref": "#/components/parameters/fee_account_id_query"
          },
          {
            "$ref": "#/components/parameters/fee_subtype_query"
          },
          {
            "$ref": "#/components/parameters/fee_id_query"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/fee_start_time_query"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/fee_description_query"
          },
          {
            "$ref": "#/components/parameters/fee_fee_template_id_query"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fee_list"
                }
              }
            },
            "description": "List of fees"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List fees",
        "tags": [
          "Fees (beta)"
        ],
        "x-external": true
      },
      "post": {
        "description": "Create a fee\n\n> 🚧 Beta\n> This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced.\n",
        "operationId": "createFee",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/fee_post"
              }
            }
          },
          "description": "Fee to create",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fee_response"
                }
              }
            },
            "description": "Created fee"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/already_exists"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create a fee",
        "tags": [
          "Fees (beta)"
        ],
        "x-external": true
      },
      "summary": "Fees"
    },
    "/fees/{fee_id}": {
      "get": {
        "description": "Get a fee by ID.\n\n> 🚧 Beta\n> This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced.\n",
        "operationId": "getFee",
        "parameters": [
          {
            "$ref": "#/components/parameters/fee_id_path"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fee_response"
                }
              }
            },
            "description": "Returned fee."
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get Fee",
        "tags": [
          "Fees (beta)"
        ],
        "x-external": true
      }
    },
    "/fees/{fee_id}/reverse": {
      "post": {
        "description": "Reverse the fee by creating a reversal transaction.\n\n> 🚧 Beta\n> This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced.\n",
        "operationId": "reverseFee",
        "parameters": [
          {
            "$ref": "#/components/parameters/fee_id_path"
          },
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/fee_reverse_post"
              }
            }
          },
          "description": "Fee reversal properties",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fee_response"
                }
              }
            },
            "description": "Reversal fee"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/already_exists"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Reverse a fee",
        "tags": [
          "Fees (beta)"
        ],
        "x-external": true
      },
      "summary": "Fees"
    },
    "/reward_templates": {
      "get": {
        "description": "> 🚧 Beta\n> This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced.\n\nGet paginated list of reward templates\n",
        "operationId": "listRewardtemplates",
        "parameters": [
          {
            "$ref": "#/components/parameters/reward_template_sort_by_query"
          },
          {
            "$ref": "#/components/parameters/reward_template_description_query"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/reward_template_id_query"
          },
          {
            "$ref": "#/components/parameters/reward_template_is_enabled_query"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/reward_template_subtype_query"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reward_template_list"
                }
              }
            },
            "description": "List of reward templates"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List reward templates",
        "tags": [
          "Rewards (beta)"
        ],
        "x-external": true
      },
      "post": {
        "description": "> 🚧 Beta\n> This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced.\n\nCreate a reward template\nA reward template defines the properties of a reward that a fintech wishes to\nuse to easily charge their customers. The fintech can then create reward templates for different\namounts or categories of rewards that represent different instances of services or charges\n",
        "operationId": "createRewardTemplate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/reward_template_post"
              }
            }
          },
          "description": "Reward to create\n\n> 🚧 Beta\n> This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced.\n",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reward_template_response"
                }
              }
            },
            "description": "Created reward template"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/already_exists"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create a reward template",
        "tags": [
          "Rewards (beta)"
        ],
        "x-external": true
      },
      "summary": "Rewards"
    },
    "/reward_templates/{reward_template_id}": {
      "get": {
        "description": "Get a reward template by ID.\n\n> 🚧 Beta\n> This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced.\n",
        "operationId": "getRewardTemplate",
        "parameters": [
          {
            "$ref": "#/components/parameters/reward_template_id_path"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reward_template_response"
                }
              }
            },
            "description": "Returned reward template"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get a Reward template",
        "tags": [
          "Rewards (beta)"
        ],
        "x-external": true
      },
      "patch": {
        "description": "Update a reward template by ID.\n\n> 🚧 Beta\n> This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced.\n",
        "operationId": "patchRewardTemplate",
        "parameters": [
          {
            "$ref": "#/components/parameters/reward_template_id_path"
          },
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/reward_template_patch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reward_template_response"
                }
              }
            },
            "description": "Updated reward template"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Patch Reward Template",
        "tags": [
          "Rewards (beta)"
        ],
        "x-external": true
      }
    },
    "/rewards": {
      "get": {
        "description": "Get paginated list of rewards\n\n> 🚧 Beta\n> This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced.\n",
        "operationId": "listRewards",
        "parameters": [
          {
            "$ref": "#/components/parameters/reward_start_time_query"
          },
          {
            "$ref": "#/components/parameters/reward_description_query"
          },
          {
            "$ref": "#/components/parameters/reward_id_query"
          },
          {
            "$ref": "#/components/parameters/reward_end_time_query"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/reward_reward_template_id_query"
          },
          {
            "$ref": "#/components/parameters/reward_subtype_query"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/reward_account_id_query"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reward_list"
                }
              }
            },
            "description": "List of rewards"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List rewards",
        "tags": [
          "Rewards (beta)"
        ],
        "x-external": true
      },
      "post": {
        "description": "Create a reward\n\n> 🚧 Beta\n> This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced.\n",
        "operationId": "createReward",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/reward_post"
              }
            }
          },
          "description": "Reward to create",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reward_response"
                }
              }
            },
            "description": "Created reward"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/already_exists"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create a reward",
        "tags": [
          "Rewards (beta)"
        ],
        "x-external": true
      },
      "summary": "Rewards"
    },
    "/rewards/{reward_id}": {
      "get": {
        "description": "Get a reward by ID.\n\n> 🚧 Beta\n> This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced.\n",
        "operationId": "getReward",
        "parameters": [
          {
            "$ref": "#/components/parameters/reward_id_path"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reward_response"
                }
              }
            },
            "description": "Returned reward."
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get Reward",
        "tags": [
          "Rewards (beta)"
        ],
        "x-external": true
      }
    },
    "/rewards/{reward_id}/reverse": {
      "post": {
        "description": "Reverse the reward by creating a reversal transaction.\n\n> 🚧 Beta\n> This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced.\n",
        "operationId": "reverseReward",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          },
          {
            "$ref": "#/components/parameters/reward_id_path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/reward_reverse_post"
              }
            }
          },
          "description": "Reward reversal properties",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reward_response"
                }
              }
            },
            "description": "Reversal reward"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/already_exists"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Reverse a reward",
        "tags": [
          "Rewards (beta)"
        ],
        "x-external": true
      },
      "summary": "Rewards"
    },
    "/spend_controls": {
      "get": {
        "description": "List spend controls\n",
        "operationId": "listSpendControls",
        "parameters": [
          {
            "$ref": "#/components/parameters/amount_limit_gte_query"
          },
          {
            "$ref": "#/components/parameters/amount_limit_lte_query"
          },
          {
            "$ref": "#/components/parameters/id_query"
          },
          {
            "$ref": "#/components/parameters/num_related_accounts_gte_query"
          },
          {
            "$ref": "#/components/parameters/num_related_accounts_query"
          },
          {
            "$ref": "#/components/parameters/num_related_accounts_lte_query"
          },
          {
            "$ref": "#/components/parameters/spend_control_sort_by_query"
          },
          {
            "$ref": "#/components/parameters/payment_type_query"
          },
          {
            "$ref": "#/components/parameters/name_query"
          },
          {
            "$ref": "#/components/parameters/spend_control_direction_query"
          },
          {
            "$ref": "#/components/parameters/is_active_query"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/account_id_query"
          },
          {
            "$ref": "#/components/parameters/amount_limit_query"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/spend_control_response_list"
                }
              }
            },
            "description": "Spend control details"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List Spend Controls",
        "tags": [
          "Spend Controls (beta)"
        ],
        "x-external": true,
        "x-permissions": [
          "spend_controls:read"
        ]
      },
      "post": {
        "description": "Create a spend control\n",
        "operationId": "createSpendControl",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/spend_control_creation_request"
              }
            }
          },
          "description": "Details of the spend control to create",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/spend_control_response"
                }
              }
            },
            "description": "Spend control details"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create Spend Control",
        "tags": [
          "Spend Controls (beta)"
        ],
        "x-external": true
      }
    },
    "/spend_controls/{spend_control_id}": {
      "get": {
        "description": "Get spend control\n",
        "operationId": "getSpendControl",
        "parameters": [
          {
            "$ref": "#/components/parameters/spend_control_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/spend_control_response"
                }
              }
            },
            "description": "Spend control details"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get Spend Control",
        "tags": [
          "Spend Controls (beta)"
        ],
        "x-external": true,
        "x-permissions": [
          "spend_controls:read"
        ]
      },
      "patch": {
        "description": "Update spend control\n",
        "operationId": "updateSpendControl",
        "parameters": [
          {
            "$ref": "#/components/parameters/spend_control_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/spend_control_update_request"
              }
            }
          },
          "description": "Fields to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/spend_control_response"
                }
              }
            },
            "description": "Spend control details"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Update Spend Control",
        "tags": [
          "Spend Controls (beta)"
        ],
        "x-external": true
      }
    },
    "/statements": {
      "get": {
        "description": "Gets a list of statement summaries for an account.\n",
        "operationId": "listStatements",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id1"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/statement_list"
                }
              }
            },
            "description": "List of statements for a given account"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List statements",
        "tags": [
          "Statements"
        ],
        "x-external": true
      },
      "summary": "Statements"
    },
    "/statements/{statement_id}": {
      "get": {
        "description": "Gets a full statement by its ID.\n",
        "operationId": "getStatement",
        "parameters": [
          {
            "$ref": "#/components/parameters/statement_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/statement"
                }
              }
            },
            "description": "statement"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get a statement",
        "tags": [
          "Statements"
        ],
        "x-external": true
      },
      "summary": "Statements"
    },
    "/statements/{statement_id}/transactions": {
      "get": {
        "description": "Gets the list of transactions for a statement's period.\n",
        "operationId": "getStatementTransactions",
        "parameters": [
          {
            "$ref": "#/components/parameters/statement_id"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transaction_list"
                }
              }
            },
            "description": "List of transactions for a given statement."
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get a statement's transactions",
        "tags": [
          "Statements"
        ],
        "x-external": true
      },
      "summary": "Statements"
    },
    "/synctera_pay": {
      "description": "The collection represents the endpioints that are used to create, update, and delete Synctera Pay transfers.\n",
      "get": {
        "description": "Get all Synctera Pay transfers\n> 🚧 Beta > This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced.\n",
        "operationId": "getSyncteraPayTransfers",
        "parameters": [
          {
            "$ref": "#/components/parameters/synctera_pay_max_amount_query"
          },
          {
            "$ref": "#/components/parameters/synctera_pay_subtype_query"
          },
          {
            "$ref": "#/components/parameters/synctera_pay_from_posting_date_query"
          },
          {
            "$ref": "#/components/parameters/synctera_pay_to_posting_date_query"
          },
          {
            "$ref": "#/components/parameters/synctera_pay_id_query"
          },
          {
            "$ref": "#/components/parameters/synctera_pay_amount_query"
          },
          {
            "$ref": "#/components/parameters/synctera_pay_reference_id_query"
          },
          {
            "$ref": "#/components/parameters/synctera_pay_effective_date_query"
          },
          {
            "$ref": "#/components/parameters/synctera_pay_min_amount_query"
          },
          {
            "$ref": "#/components/parameters/synctera_pay_is_same_day_query"
          },
          {
            "$ref": "#/components/parameters/synctera_pay_originating_account_id_query"
          },
          {
            "$ref": "#/components/parameters/synctera_pay_from_effective_date_query"
          },
          {
            "$ref": "#/components/parameters/synctera_pay_customer_id_query"
          },
          {
            "$ref": "#/components/parameters/synctera_pay_originating_account_owner_name_query"
          },
          {
            "$ref": "#/components/parameters/synctera_pay_to_effective_date_query"
          },
          {
            "$ref": "#/components/parameters/synctera_pay_dc_sign_query"
          },
          {
            "$ref": "#/components/parameters/synctera_pay_currency_query"
          },
          {
            "$ref": "#/components/parameters/synctera_pay_network_status_query"
          },
          {
            "$ref": "#/components/parameters/synctera_pay_status_query"
          },
          {
            "$ref": "#/components/parameters/synctera_pay_posting_date_query"
          },
          {
            "$ref": "#/components/parameters/synctera_pay_destination_account_id_query"
          },
          {
            "$ref": "#/components/parameters/synctera_pay_destination_account_owner_name_query"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/synctera_pay_list"
                }
              }
            },
            "description": "Retrieve all Synctera Pay transfers"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get Synctera Pay Transfers",
        "tags": [
          "SyncteraPay (beta)"
        ],
        "x-external": true
      },
      "post": {
        "description": "Create a Synctera Pay transfer\n> 🚧 Beta > This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced.\n",
        "operationId": "createSyncteraPayTransfer",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/synctera_pay_post"
              }
            }
          },
          "description": "Attributes of the Synctera Pay transfer"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/synctera_pay_response"
                }
              }
            },
            "description": "Successful creation of a Synctera Pay transfer"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create Synctera Pay Transfer",
        "tags": [
          "SyncteraPay (beta)"
        ],
        "x-external": true
      },
      "summary": "Synctera Pay"
    },
    "/synctera_pay/configurations": {
      "description": "The collection represents the configurations that are used to create, update, and delete Synctera Pay configurations.\n",
      "get": {
        "description": "Get all Synctera Pay configuration\n",
        "operationId": "getSyncteraPayConfigurations",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/synctera_pay_configurations"
                }
              }
            },
            "description": "Retrieve all Synctera Pay configuration"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get Synctera Pay Configurations",
        "tags": [
          "SyncteraPay (beta)"
        ],
        "x-external": true,
        "x-permissions": [
          "accounts:read",
          "sub_ledger:read"
        ]
      },
      "summary": "Synctera Pay"
    },
    "/synctera_pay/configurations/{id}": {
      "description": "The collection represents the configurations that are used to create, update, and delete Synctera Pay configurations.\n",
      "get": {
        "description": "Get a Synctera Pay configuration\n",
        "operationId": "getSyncteraPayConfiguration",
        "parameters": [
          {
            "$ref": "#/components/parameters/id_path1"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/synctera_pay_configuration"
                }
              }
            },
            "description": "Retrieve a Synctera Pay configuration"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get Synctera Pay Configuration",
        "tags": [
          "SyncteraPay (beta)"
        ],
        "x-external": true,
        "x-permissions": [
          "accounts:read",
          "sub_ledger:read"
        ]
      },
      "summary": "Synctera Pay"
    },
    "/synctera_pay/incoming/configurations": {
      "get": {
        "operationId": "listIncomingSyncteraPayConfigurations",
        "parameters": [
          {
            "in": "query",
            "name": "enabled",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "explode": false,
            "in": "query",
            "name": "settlement_account_id",
            "schema": {
              "items": {
                "format": "uuid",
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "explode": false,
            "in": "query",
            "name": "currency",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "explode": false,
            "in": "query",
            "name": "name",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "explode": false,
            "in": "query",
            "name": "settlement_account_owner_id",
            "schema": {
              "items": {
                "format": "uuid",
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "from_creation_time",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Case insensitive wildcard search for name, wildcards can be specified with '*'. Wildcards at both the start and the end of the input is assumed.",
            "in": "query",
            "name": "name_like",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "from_last_updated_time",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "explode": false,
            "in": "query",
            "name": "sort_by",
            "schema": {
              "items": {
                "enum": [
                  "creation_time:asc",
                  "creation_time:desc",
                  "last_updated_time:asc",
                  "last_updated_time:desc"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "to_last_updated_time",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "explode": false,
            "in": "query",
            "name": "tenant",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/tenant_id"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "in": "query",
            "name": "to_creation_time",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "explode": false,
            "in": "query",
            "name": "id",
            "schema": {
              "items": {
                "format": "uuid",
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/incoming_synctera_pay_configuration_list"
                }
              }
            },
            "description": "List of Incoming Synctera Pay Configurations"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List Incoming Synctera Pay Configurations",
        "tags": [
          "Incoming SyncteraPay (beta)"
        ],
        "x-external": true
      }
    },
    "/synctera_pay/incoming/configurations/{id}": {
      "get": {
        "operationId": "getIncomingSyncteraPayConfiguration",
        "parameters": [
          {
            "$ref": "#/components/parameters/id_path1"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/incoming_synctera_pay_configuration_response"
                }
              }
            },
            "description": "Incoming Synctera Pay Configuration"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get Incoming Synctera Pay Configuration",
        "tags": [
          "Incoming SyncteraPay (beta)"
        ],
        "x-external": true
      }
    },
    "/synctera_pay/incoming/transfers": {
      "get": {
        "operationId": "listIncomingSyncteraPayTransfers",
        "parameters": [
          {
            "explode": false,
            "in": "query",
            "name": "payee_id",
            "schema": {
              "items": {
                "format": "uuid",
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "explode": false,
            "in": "query",
            "name": "amount",
            "schema": {
              "items": {
                "type": "integer"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "from_creation_time",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "to_settlement_date",
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "explode": false,
            "in": "query",
            "name": "destination_account_id",
            "schema": {
              "items": {
                "format": "uuid",
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "from_last_updated_time",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "from_amount",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "from_settlement_date",
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "explode": false,
            "in": "query",
            "name": "sort_by",
            "schema": {
              "items": {
                "enum": [
                  "creation_time:asc",
                  "creation_time:desc",
                  "last_updated_time:asc",
                  "last_updated_time:desc"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "settlement_date",
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "explode": false,
            "in": "query",
            "name": "payer_id",
            "schema": {
              "items": {
                "format": "uuid",
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "to_last_updated_time",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "to_amount",
            "schema": {
              "type": "integer"
            }
          },
          {
            "explode": false,
            "in": "query",
            "name": "reference_id",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "explode": false,
            "in": "query",
            "name": "tenant",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/tenant_id"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "explode": false,
            "in": "query",
            "name": "config_id",
            "schema": {
              "items": {
                "format": "uuid",
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "explode": false,
            "in": "query",
            "name": "source_external_account_id",
            "schema": {
              "items": {
                "format": "uuid",
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "to_creation_time",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "explode": false,
            "in": "query",
            "name": "id",
            "schema": {
              "items": {
                "format": "uuid",
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/incoming_synctera_pay_transfer_list"
                }
              }
            },
            "description": "list of matching Incoming Synctera Pay transfers"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List Incoming Synctera Pay Transfers",
        "tags": [
          "Incoming SyncteraPay (beta)"
        ],
        "x-external": true
      },
      "post": {
        "description": "Create incoming Synctera Pay transfer\n> 🚧 Beta > This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced.\n",
        "operationId": "createIncomingSyncteraPayTransfer",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key_required"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/incoming_synctera_pay_transfer_creation_request"
              }
            }
          },
          "description": "Attributes of the Synctera Pay transfer"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/incoming_synctera_pay_transfer_response"
                }
              }
            },
            "description": "Successful creation of a Synctera Pay transfer"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create Incoming Synctera Pay Transfer",
        "tags": [
          "Incoming SyncteraPay (beta)"
        ],
        "x-external": true
      }
    },
    "/synctera_pay/incoming/transfers/{id}": {
      "get": {
        "operationId": "getIncomingSyncteraPayTransfer",
        "parameters": [
          {
            "$ref": "#/components/parameters/id_path1"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/incoming_synctera_pay_transfer_response"
                }
              }
            },
            "description": "the Incoming Synctera Pay Transfer"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get Incoming Synctera Pay Transfer",
        "tags": [
          "Incoming SyncteraPay (beta)"
        ],
        "x-external": true
      }
    },
    "/synctera_pay/vendors": {
      "get": {
        "description": "Get paginated list of Synctera Pay vendors associated\n\n> 🚧 Beta\n> This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced.\n",
        "operationId": "getSyncteraPayVendors",
        "parameters": [
          {
            "$ref": "#/components/parameters/synctera_pay_vendor_name_query"
          },
          {
            "$ref": "#/components/parameters/synctera_pay_vendor_id_query"
          },
          {
            "$ref": "#/components/parameters/enabled_query"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/synctera_pay_vendor_list"
                }
              }
            },
            "description": "List of Synctera Pay vendors"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List Synctera Pay vendors",
        "tags": [
          "SyncteraPay (beta)"
        ],
        "x-external": true
      },
      "summary": "vendors"
    },
    "/synctera_pay/vendors/{id}": {
      "get": {
        "description": "Get a Synctera Pay vendor\n\n> 🚧 Beta\n> This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced.\n",
        "operationId": "getSyncteraPayVendor",
        "parameters": [
          {
            "$ref": "#/components/parameters/id_path1"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/synctera_pay_vendor_response"
                }
              }
            },
            "description": "Account"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get a Synctera Pay vendor",
        "tags": [
          "SyncteraPay (beta)"
        ],
        "x-external": true
      },
      "summary": "vendor"
    },
    "/synctera_pay/{id}": {
      "description": "The collection represents the endpioints that are used to create, update, and delete Synctera Pay transfers.\n",
      "get": {
        "description": "Get a Synctera Pay transfer\n> 🚧 Beta > This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced.\n",
        "operationId": "getSyncteraPayTransfer",
        "parameters": [
          {
            "$ref": "#/components/parameters/id_path1"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/synctera_pay_response"
                }
              }
            },
            "description": "Retrieve a Synctera Pay transfer"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get Synctera Pay Transfer",
        "tags": [
          "SyncteraPay (beta)"
        ],
        "x-external": true
      },
      "patch": {
        "description": "Update a Synctera Pay transfer\n> 🚧 Beta > This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced.\n",
        "operationId": "updateSyncteraPayTransfer",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          },
          {
            "$ref": "#/components/parameters/id_path1"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/synctera_pay_patch"
              }
            }
          },
          "description": "Attributes of the Synctera Pay transfer"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/synctera_pay_response"
                }
              }
            },
            "description": "Successful update of a Synctera Pay transfer"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Update Synctera Pay Transfer",
        "tags": [
          "SyncteraPay (beta)"
        ],
        "x-external": true
      },
      "summary": "Synctera Pay"
    },
    "/synctera_pay/{id}/return": {
      "description": "The collection represents the endpioints that are used to create, update, and delete Synctera Pay transfers.\n",
      "post": {
        "description": "Trigger a return upon an existing Synctera Pay transfer\n> 🚧 Beta > This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced.\n",
        "operationId": "returnSyncteraPayTransfer",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotency_key"
          },
          {
            "$ref": "#/components/parameters/id_path1"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/synctera_pay_response"
                }
              }
            },
            "description": "The created return transfer"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Return a Synctera Pay Transfer",
        "tags": [
          "SyncteraPay (beta)"
        ],
        "x-alpha": true,
        "x-external": true
      },
      "summary": "Synctera Pay"
    },
    "/transactions": {
      "get": {
        "description": "> 🚧 Beta\n> This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.\n\nGet paginated list of transactions matching the provided filters\n",
        "operationId": "listTransactions",
        "parameters": [
          {
            "$ref": "#/components/parameters/posted_amount"
          },
          {
            "$ref": "#/components/parameters/include_child_transactions"
          },
          {
            "$ref": "#/components/parameters/amount"
          },
          {
            "$ref": "#/components/parameters/posted_date"
          },
          {
            "$ref": "#/components/parameters/amount_lt"
          },
          {
            "$ref": "#/components/parameters/type_enum"
          },
          {
            "$ref": "#/components/parameters/posted_amount_gte"
          },
          {
            "$ref": "#/components/parameters/posted_amount_lt"
          },
          {
            "$ref": "#/components/parameters/posted_amount_lte"
          },
          {
            "$ref": "#/components/parameters/status_enum"
          },
          {
            "$ref": "#/components/parameters/internal_account_id"
          },
          {
            "$ref": "#/components/parameters/pending_amount_lte"
          },
          {
            "$ref": "#/components/parameters/amount_gte"
          },
          {
            "$ref": "#/components/parameters/account_id"
          },
          {
            "$ref": "#/components/parameters/show_partial_clearings"
          },
          {
            "$ref": "#/components/parameters/group_id"
          },
          {
            "$ref": "#/components/parameters/pending_amount_gte"
          },
          {
            "$ref": "#/components/parameters/exclude_jit_transactions"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "$ref": "#/components/parameters/card_id1"
          },
          {
            "$ref": "#/components/parameters/pending_amount"
          },
          {
            "$ref": "#/components/parameters/account_source"
          },
          {
            "$ref": "#/components/parameters/posted_date_from"
          },
          {
            "$ref": "#/components/parameters/posted_amount_gt"
          },
          {
            "$ref": "#/components/parameters/pending_amount_gt"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/amount_gt"
          },
          {
            "$ref": "#/components/parameters/posted_date_to"
          },
          {
            "$ref": "#/components/parameters/amount_lte"
          },
          {
            "$ref": "#/components/parameters/subtype_enum"
          },
          {
            "$ref": "#/components/parameters/pending_amount_lt"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/paginated_transactions"
                }
              }
            },
            "description": "Paginated list of transactions"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List Transactions",
        "tags": [
          "Transactions (beta)"
        ],
        "x-external": true
      },
      "summary": "List Transactions (alpha)"
    },
    "/transactions/{id}": {
      "get": {
        "description": "> 🚧 Beta\n> This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.\n\nGet a transaction by its uuid\n",
        "operationId": "getTransactionByID",
        "parameters": [
          {
            "$ref": "#/components/parameters/show_partial_clearings"
          },
          {
            "$ref": "#/components/parameters/id1"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transaction1"
                }
              }
            },
            "description": "Transaction"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get a transaction by ID",
        "tags": [
          "Transactions (beta)"
        ],
        "x-external": true
      },
      "summary": "Get Transaction (beta)"
    },
    "/webhooks": {
      "get": {
        "description": "List all webhooks\n",
        "operationId": "listWebhooks",
        "parameters": [
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "in": "query",
            "name": "is_enabled_only",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook_list"
                }
              }
            },
            "description": "List of webhooks"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List webhooks",
        "tags": [
          "Webhooks"
        ],
        "x-external": true,
        "x-permissions": [
          "notifications:read"
        ]
      },
      "post": {
        "callbacks": {
          "WebhookRequest": {
            "{$request.body#/url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/webhook_request_object"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "Your server returns this code if it accepts the webhook request object"
                  }
                },
                "summary": "Send event details to integrator using registered URL"
              }
            }
          }
        },
        "description": "Create a webhook\n",
        "operationId": "createWebhook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook"
              }
            }
          },
          "description": "Webhook to create",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook"
                }
              }
            },
            "description": "Created webhook"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create a webhook",
        "tags": [
          "Webhooks"
        ],
        "x-external": true
      }
    },
    "/webhooks/trigger": {
      "post": {
        "description": "Trigger an specific event for webhook testing purpose\n",
        "operationId": "triggerEvent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "event": {
                    "$ref": "#/components/schemas/event_type"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Provide an event type to trigger",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event_trigger"
                }
              }
            },
            "description": "Triggered webhook event"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Trigger an event",
        "tags": [
          "Webhooks"
        ],
        "x-external": true
      }
    },
    "/webhooks/{webhook_id}": {
      "delete": {
        "description": "Delete a webhook\n",
        "operationId": "deleteWebhook",
        "parameters": [
          {
            "$ref": "#/components/parameters/webhook_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/delete_response"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Delete a webhook",
        "tags": [
          "Webhooks"
        ],
        "x-external": true
      },
      "get": {
        "description": "Get a webhook by ID\n",
        "operationId": "getWebhook",
        "parameters": [
          {
            "$ref": "#/components/parameters/webhook_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook"
                }
              }
            },
            "description": "Webhook"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get a webhook",
        "tags": [
          "Webhooks"
        ],
        "x-external": true,
        "x-permissions": [
          "notifications:read"
        ]
      },
      "put": {
        "description": "Update a webhook\n",
        "operationId": "updateWebhook",
        "parameters": [
          {
            "$ref": "#/components/parameters/webhook_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook"
              }
            }
          },
          "description": "Webhook to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook"
                }
              }
            },
            "description": "Created webhook"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Update a webhook",
        "tags": [
          "Webhooks"
        ],
        "x-external": true
      }
    },
    "/webhooks/{webhook_id}/events": {
      "get": {
        "description": "List webhook events. This response does not include the event response history.\n",
        "operationId": "listEvents",
        "parameters": [
          {
            "description": "Start time of date-time range filtering for events. Date is inclusive and should be in UTC timezone 00:00:00.",
            "in": "query",
            "name": "start_time",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "End time of date-time range filtering for events. Date is inclusive and should be in UTC timezone 00:00:00.",
            "in": "query",
            "name": "end_time",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/webhook_id"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "description": "Limit returned events to those that occurred on the specified resource.",
            "in": "query",
            "name": "resource_id",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event_list"
                }
              }
            },
            "description": "List of webhook events"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List webhook events",
        "tags": [
          "Webhooks"
        ],
        "x-external": true,
        "x-permissions": [
          "notifications:read"
        ]
      }
    },
    "/webhooks/{webhook_id}/events/{event_id}": {
      "get": {
        "description": "Get webhook event by ID\n",
        "operationId": "getEvent",
        "parameters": [
          {
            "description": "Webhook event ID",
            "in": "path",
            "name": "event_id",
            "required": true,
            "schema": {
              "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/webhook_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event"
                }
              }
            },
            "description": "Webhook event"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get webhook event",
        "tags": [
          "Webhooks"
        ],
        "x-external": true
      }
    },
    "/webhooks/{webhook_id}/events/{event_id}/resend": {
      "post": {
        "description": "Resend a webhook event\n",
        "operationId": "resendEvent",
        "parameters": [
          {
            "description": "Delay the event triggering in seconds. Events are checked once a minute, so a short delay may not result in an immediate resend.",
            "in": "query",
            "name": "delay",
            "schema": {
              "maximum": 3600,
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "description": "Webhook event ID",
            "in": "path",
            "name": "event_id",
            "required": true,
            "schema": {
              "example": "b01db9c7-78f2-4a99-8aca-1231d32f9b96",
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/webhook_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event"
                }
              }
            },
            "description": "Resent webhook event"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Resend an event",
        "tags": [
          "Webhooks"
        ],
        "x-external": true
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "servers": [
    {
      "description": "Production",
      "url": "https://api.synctera.com/v1"
    },
    {
      "description": "Sandbox (no real world financial impact)",
      "url": "https://api-sandbox.synctera.com/v1"
    }
  ],
  "tags": [
    {
      "description": "Requests to create and manage Rewards\n",
      "name": "Rewards (beta)"
    },
    {
      "description": "Create and manage spending controls",
      "name": "Spend Controls (beta)"
    },
    {
      "description": "Create and manage Cash Order and Cash Deposit transfers",
      "name": "Cash Orders and Deposits (alpha)"
    },
    {
      "description": "Rates",
      "name": "Rates"
    },
    {
      "description": "Requests to create and manage webhooks",
      "name": "Webhooks"
    },
    {
      "description": "Tenant Config",
      "name": "Tenant Config"
    },
    {
      "description": "FDX authentication and data transfer using Plaid Core Exchange",
      "name": "Plaid Core Exchange (beta)"
    },
    {
      "description": "Create and manage disputes",
      "name": "Disputes"
    },
    {
      "description": "Requests to generate simulated webhooks",
      "name": "Card Webhook Simulations (beta)"
    },
    {
      "description": "Apple Pay APIs",
      "name": "Apple Pay"
    },
    {
      "description": "Lending Config",
      "name": "Lending Config"
    },
    {
      "description": "Payments related to lending accounts",
      "name": "Payments"
    },
    {
      "description": "Manage negative balance processes",
      "name": "Negative Balance"
    },
    {
      "description": "Requests to generate simulated transactions",
      "name": "Cash Transaction Simulations (alpha)"
    },
    {
      "description": "Request to create and manage accounts",
      "name": "Accounts"
    },
    {
      "description": "Create and manage transactions",
      "name": "Transactions (beta)"
    },
    {
      "description": "Requests to create and manage batch payments\n",
      "name": "Batch Payments (alpha)"
    },
    {
      "description": "Billing rates",
      "name": "Billing Rates"
    },
    {
      "description": "Create and manage Synctera Pay templates",
      "name": "SyncteraPay"
    },
    {
      "description": "Requests to create and manage card disputes",
      "name": "Card Disputes"
    },
    {
      "description": "Requests to generate simulated transactions",
      "name": "Card Transaction Simulations (beta)"
    },
    {
      "description": "Bulk card issuance",
      "name": "Bulk Issuance"
    },
    {
      "description": "Request to create and manage exclusions",
      "name": "Statements"
    },
    {
      "description": "Customer Service Details for disputes and billing inquiries",
      "name": "Customer Service Details"
    },
    {
      "description": "Create a credit application.",
      "name": "Applications (beta)"
    },
    {
      "description": "Billing period summaries",
      "name": "Billing Period Summaries"
    },
    {
      "description": "Requests to issue and manage cards",
      "name": "Cards"
    },
    {
      "description": "Push and pull from cards",
      "name": "External Cards"
    },
    {
      "description": "Requests to create and manage fees\n",
      "name": "Fees (beta)"
    }
  ]
}
